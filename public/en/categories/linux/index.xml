<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Linux on Alberto Reineri</title>
		<link>https://albertoreineri.it/en/categories/linux/</link>
		<description>Recent content in Linux on Alberto Reineri</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en</language>
		<lastBuildDate>Mon, 27 Jun 2022 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://albertoreineri.it/en/categories/linux/index.xml" rel="self" type="application/rss+xml" />

		<item>
			<title>Nano Editor, Guida per principianti</title>
			<link>https://albertoreineri.it/en/blog/nano-editor-guida-per-principianti/</link>
			<pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/en/blog/nano-editor-guida-per-principianti/</guid>
			<description>Gli utenti Linux hanno molte opzioni tra cui scegliere quando si tratta di editor di testo. Da base ad avanzato, esistono un sacco di editor di testo, ma alcuni come Vim ed Emacs possono risultare molto complicati per gli utenti meno avanzati.
In questo casi ci viene in aiuto Nano, forse il miglior editor di testo per principianti.
Nano: Nano è un editor di testo semplice e leggero sviluppato appositamente per sistemi UNIX e ambienti desktop che utilizzano un&amp;rsquo;interfaccia a riga di comando.</description>
			<content type="html"><![CDATA[<p>Gli utenti <a href="/categories/linux/">Linux</a> hanno molte opzioni tra cui scegliere quando si tratta di editor di testo. Da base ad avanzato, esistono un sacco di editor di testo, ma alcuni come Vim ed Emacs possono risultare molto complicati per gli utenti meno avanzati.</p>
<p>In questo casi ci viene in aiuto Nano, forse il miglior editor di testo per principianti.</p>
<h2 id="nano">Nano:</h2>
<p>Nano è un editor di testo semplice e leggero sviluppato appositamente per sistemi UNIX e ambienti desktop che utilizzano un&rsquo;interfaccia a riga di comando. Nano è concesso in licenza sotto la GNU General Public License ed emula l&rsquo;editor di testo Pico.</p>
<h2 id="come-installare-nano">Come installare Nano:</h2>
<p>Sto usando Ubuntu per questo tutorial e il processo di installazione sarà lo stesso su altre distribuzioni Linux.</p>
<p>Prima di procedere con il processo di installazione, sarebbe una buona idea verificare se l&rsquo;editor di testo Nano è già installato o meno sul tuo sistema. Alcune distribuzioni Linux vengono fornite con l&rsquo;editor Nano preinstallato.</p>
<p>Per controllare, esegui il seguente comando in Terminale.</p>
<pre tabindex="0"><code>$ nano --version
</code></pre><p>Se ottieni un output con l&rsquo;attuale versione di nano, puoi saltare l&rsquo;installazione poiché l&rsquo;editor di testo Nano è già installato sul tuo sistema.</p>
<p>L&rsquo;installazione di Nano Text Editor è semplice, basta eseguire il seguente comando da Terminale e attendere il completamento dell&rsquo;installazione.</p>
<pre tabindex="0"><code>$ sudo apt-get install nano
</code></pre><p>Gli utenti CentOS/Red Hat Enterprise Linux (RHEL) possono utilizzare il comando seguente per installare l&rsquo;editor Nano.</p>
<pre tabindex="0"><code>$ yum installa nano
</code></pre><p>Ora che l&rsquo;editor nano è stato installato correttamente sul tuo sistema e pronto per l&rsquo;uso, possiamo iniziare con una guida per principianti all&rsquo;uso dell&rsquo;editor di testo Nano.</p>
<h2 id="guida-alluso-delleditor-di-testo-nano">Guida all&rsquo;uso dell&rsquo;editor di testo Nano</h2>
<p>Vediamo ora come utilizzare l&rsquo;editor di testo Nano.</p>
<h3 id="come-aprirechiudere-il-nano-text-editor">Come aprire/chiudere il Nano Text Editor</h3>
<p>Il comando per aprire l&rsquo;editor di testo Nano è il seguente.</p>
<pre tabindex="0"><code>$ nano nomefile 
</code></pre><p>Puoi aprire vari tipi di file nell&rsquo;editor di testo Nano, inclusi .txt, .php, .html e molti altri. Devi solo digitare il nome del file seguito da un&rsquo;estensione per aprire il file particolare nell&rsquo;editor Nano. Ad esempio, supponiamo di dover aprire il file denominato il_mio_file.txt, il comando sarà il seguente.</p>
<pre tabindex="0"><code>$ nano il_mio_file.txt
</code></pre><p>Devi assicurarti di essere nella directory in cui è stato salvato il file. Se il file non è presente nella directory, l&rsquo;editor di testo Nano creerà un nuovo file nella directory attuale.</p>
<p>Una volta aperto il file noterai che l&rsquo;interfaccia nano presenta il nome del file nella parte superiore, mentre nella parte inferiore noterai principalmente scorciatoie come taglia, sostituisci, vai alla riga e giustifica. Qui ˄ significa il tasto <strong>CTRL</strong> sulla tastiera.</p>
<p>Ad esempio, per <strong>scrivere</strong> o salvare le modifiche, devi premere i pulsanti CTRL + O sulla tastiera.</p>
<p>Se stai aprendo un file di configurazione, assicurati di utilizzare l&rsquo; opzione <strong>–w</strong> , questo comanderà a Nano editor di aprire il file di configurazione in un formato standard. Se non si utilizza questa opzione, l&rsquo;editor Nano avvolgerà il testo del file per adattarlo alla finestra, che alla fine sarà difficile da leggere.</p>
<h2 id="come-cercare--sostituire-il-testo">Come cercare / sostituire il testo</h2>
<p><strong>CTRL + W</strong> è la scorciatoia per cercare la parola nell&rsquo;editor. Ora devi inserire il testo che vuoi cercare e quindi premere il tasto Invio. Per continuare a cercare lo stesso testo, usa il tasto <strong>ALT + W.</strong></p>
<p>Per sostituire il testo, devi usare <strong>CTRL + R</strong>, l&rsquo;editor ti porterà alla prima istanza del testo che desideri sostituire; per sostituire tutto il testo, devi premere <strong>A</strong> . Ma se vuoi sostituire un solo testo, devi premere <strong>Y</strong>.</p>
<h2 id="come-copiare-e-incollare-il-testo">Come copiare e incollare il testo</h2>
<p>L&rsquo;operazione di copia incolla non è così semplice come altri editor di testo nell&rsquo;editor Nano. Se desideri tagliare e incollare una riga particolare, devi prima portare il cursore all&rsquo;inizio di quella riga.</p>
<p>Ora devi premere <strong>CTRL + K</strong> per tagliare la linea, quindi spostare il cursore nel punto in cui vuoi incollarlo, ora infine, premere <strong>CTRL + U</strong> per incollare la linea.</p>
<p>Per copiare e incollare una particolare stringa o parola, devi selezionare quella parola o stringa premendo <strong>CTRL + 6</strong> o <strong>ALT + A</strong> , assicurati che il cursore sia all&rsquo;inizio della parola.</p>
<p>Ora puoi usare <strong>CTRL + K</strong> e <strong>CTRL + U</strong> per tagliare e incollare la parola o la stringa.</p>
<p>Ecco come puoi iniziare a utilizzare l&rsquo;editor di testo Nano. Modificare un file di testo utilizzando la riga di comando non è facile, ma l&rsquo;editor di testo Nano lo rende più semplice. È affidabile e uno degli strumenti più facili da usare.</p>
<p>Dagli utenti inesperti ai professionisti, tutti trovano l&rsquo;editor di testo Nano un utile strumento da riga di comando. Spero che questa guida ti abbia sicuramente aiutato a iniziare con l&rsquo;editor Nano.</p>
<p>Di seguito ti lascio una serie di comandi spesso utilizzati:</p>
<h2 id="scoriatoie-utili-per-nano">Scoriatoie utili per nano:</h2>
<table>
<thead>
<tr>
<th>Command</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td>CTRL + A</td>
<td>Vai all&rsquo;inizio della riga</td>
</tr>
<tr>
<td>CTRL + E</td>
<td>Vai alla fine della riga</td>
</tr>
<tr>
<td>CTRL + Y</td>
<td>Scorri in basso nella pagina</td>
</tr>
<tr>
<td>CTRL + V</td>
<td>Scorri in alto nella pagina</td>
</tr>
<tr>
<td>CTRL + _</td>
<td>Scorri fino alla riga speficina</td>
</tr>
<tr>
<td>CTRL + C</td>
<td>Scopri dov&rsquo;è il cursore</td>
</tr>
<tr>
<td>CTRL + V</td>
<td>Scorri verso l&rsquo;alto</td>
</tr>
<tr>
<td>CTRL + W</td>
<td>Cerca un testo</td>
</tr>
<tr>
<td>CTRL + D</td>
<td>Cancella il carattere sotto al cursore</td>
</tr>
<tr>
<td>CTRL + K</td>
<td>Cancella l&rsquo;intera riga</td>
</tr>
<tr>
<td>CTRL + \</td>
<td>Sostituisci una stringa</td>
</tr>
<tr>
<td>CTRL + O</td>
<td>Salva il contenuto senza uscire</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
		</item>

		<item>
			<title>How to Install a LAMP Stack (Linux, Apache, MySQL, PHP) on Ubuntu</title>
			<link>https://albertoreineri.it/en/blog/how-to-install-a-lamp-stack-linux-apache-mysql-php-on-ubuntu/</link>
			<pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/en/blog/how-to-install-a-lamp-stack-linux-apache-mysql-php-on-ubuntu/</guid>
			<description>Introduction A &amp;ldquo;LAMP&amp;rdquo; stack is a group of open-source software typically installed together to enable a server to host dynamic websites and web applications. This term is actually an acronym representing the Linux operating system, with the Apache web server. The website data is stored in a MySQL database, and dynamic content is processed by PHP.
In this guide, we will install a LAMP stack on an Ubuntu server.
Prerequisites This tutorial is created on Ubuntu but works on all Debian-based distros, such as Pop!</description>
			<content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>A &ldquo;LAMP&rdquo; stack is a group of open-source software typically installed together to enable a server to host dynamic websites and web applications. This term is actually an acronym representing the Linux operating system, with the Apache web server. The website data is stored in a MySQL database, and dynamic content is processed by PHP.</p>
<p>In this guide, we will install a LAMP stack on an Ubuntu server.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>This tutorial is created on Ubuntu but works on all Debian-based distros, such as Pop!_OS, Elementary OS, Linux Mint, etc.</p>
<h2 id="step-1-installing-apache">Step 1: Installing Apache</h2>
<p>The Apache web server is a popular open-source web server that can be used in conjunction with <a href="/blog/le-basi-di-php/">PHP</a> to host dynamic websites. Ensure your <code>apt</code> cache is up-to-date with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt update
</span></span></code></pre></div><p>If this is your first time using <code>sudo</code> in this session, you&rsquo;ll be prompted to enter your user password to validate your permissions.</p>
<p>Once the cache is updated, you can install Apache by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install apache2
</span></span></code></pre></div><p>After entering this command, <code>apt</code> will inform you which packages it intends to install and how much disk space they will occupy. Press <code>S</code> (or <code>Y</code> if your system is set to English) and then press <code>ENTER</code> to confirm, and the installation will proceed.</p>
<p><em>Note: In this guide, I will use &lsquo;<em>Y</em>&rsquo; to proceed with the installation because I habitually install Linux in English&hellip; If you use Italian, remember to press &lsquo;<em>S</em>&rsquo;.</em></p>
<p>And voilà! Apache is now installed!</p>
<p>You can perform a quick check to verify that everything went as expected by visiting your server&rsquo;s public IP address in your web browser. If you&rsquo;re local, simply open the browser and enter:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>http://localhost
</span></span></code></pre></div><p>If you&rsquo;re configuring a remote web server, then you&rsquo;ll need to enter your IP address:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>http://your_server_ip
</span></span></code></pre></div><p>You should now see Apache&rsquo;s default web page in your browser, which is available for informational and testing purposes. It should look something like this:</p>
<p><img src="images/small_apache_default_1804-728x1024.png" alt="Apache Default Page"></p>
<p>If you see this page, your web server is now correctly installed and accessible through your firewall.</p>
<h3 id="how-to-find-your-servers-public-ip-address">How to find your server&rsquo;s public IP address</h3>
<p>If you&rsquo;re configuring a remote web server and don&rsquo;t know what your server&rsquo;s public IP address is, there are several ways to find it. Usually, it&rsquo;s the address you use to connect to your server via SSH.</p>
<p>There are different ways to do this from the command line. First, you can use the <code>iproute2</code> tools to get your IP address by typing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ip addr show eth0 | grep inet | awk <span style="color:#e6db74">&#39;{ print $2; }&#39;</span> | sed <span style="color:#e6db74">&#39;s/\/.*$//&#39;</span>
</span></span></code></pre></div><p>This will return two or three lines. They are all correct addresses, but your computer may only be able to use one, so feel free to try them.</p>
<p>An alternative method is to use the <code>curl</code> utility to contact an external party to tell you how your server &lsquo;sees&rsquo; itself. This is done by asking a specific server what your IP address is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install curl
</span></span><span style="display:flex;"><span>curl http://icanhazip.com
</span></span></code></pre></div><p>Regardless of the method used to obtain your IP address, type it into your web browser&rsquo;s address bar to view the default Apache page.</p>
<h2 id="step-2-installing-mysql">Step 2: Installing MySQL</h2>
<p>Now that you have your web server up and running, it&rsquo;s time to install MySQL. MySQL is a database management system that organizes and provides access to databases where your site can store information.</p>
<p>Again, we use <code>apt</code> to acquire and install this software:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install mysql-server
</span></span></code></pre></div><p><strong>Note:</strong> In this case, there&rsquo;s no need to run <code>sudo apt update</code> before the command. This is because you recently did it in the commands above to install Apache. Your computer&rsquo;s package index should already be up-to-date.</p>
<p>This command will also show you a list of packages to be installed, along with the amount of disk space they will occupy. Enter <code>Y</code> (or <code>S</code>) to continue.</p>
<p>After the installation, run a simple pre-installed security script with MySQL that will remove some dangerous default settings and lock down access to your database system (If you&rsquo;re local, this step is not necessary). Start the interactive script by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo mysql_secure_installation
</span></span></code></pre></div><p>This will ask you if you want to set up the <code>VALIDATE PASSWORD PLUGIN</code>.</p>
<p><strong>Note:</strong> Enabling this feature is a judgment call. If enabled, passwords that do not meet the specified criteria will be rejected by MySQL with</p>
<h2 id="step-2-mysql-installation">Step 2: MySQL Installation</h2>
<p>Now that your web server is up and running, it&rsquo;s time to install MySQL. MySQL is a database management system that will organize and provide access to the databases where your site can store information.</p>
<p>Once again, we use <code>apt</code> to acquire and install this software:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install mysql-server
</span></span></code></pre></div><p><strong>Note:</strong> In this case, there is no need to run <code>sudo apt update</code> before the command. This is because you recently executed it in the commands above to install Apache. The package index on your computer should already be updated.</p>
<p>This command will also show you a list of the packages that will be installed, along with the amount of disk space they will occupy. Enter <code>Y</code> (or <code>S</code>) to proceed.</p>
<p>After the installation is complete, run a simple security script preinstalled with MySQL. This script will remove some dangerous default settings and block access to your database system (if you&rsquo;re local, this step is not necessary). Initiate the interactive script by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo mysql_secure_installation
</span></span></code></pre></div><p>This will ask you if you want to configure the <code>VALIDATE PASSWORD PLUGIN</code>.</p>
<p><strong>Note:</strong> Enabling this feature is a judgment call. If enabled, passwords that do not meet the specified criteria will be rejected by MySQL with an error. This can cause issues if you use a weak password along with software that automatically configures MySQL user credentials, like the Ubuntu packages for phpMyAdmin. It is safe to leave validation disabled, but you should always use complex and unique passwords for database credentials.</p>
<p>Reply with <code>Y</code> for yes or anything else to continue without enabling.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>VALIDATE PASSWORD PLUGIN can be used to test passwords
</span></span><span style="display:flex;"><span>and improve security. It checks the strength of password
</span></span><span style="display:flex;"><span>and allows the users to set only those passwords which are
</span></span><span style="display:flex;"><span>secure enough. Would you like to setup VALIDATE PASSWORD plugin?
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Press y|Y <span style="color:#66d9ef">for</span> Yes, any other key <span style="color:#66d9ef">for</span> No:
</span></span></code></pre></div><p>If you answer &ldquo;yes,&rdquo; you will be asked to select a password validation level. Keep in mind that if you enter <code>2</code>, the strongest level, you will receive errors when trying to set a password that does not include numbers, uppercase and lowercase letters, special characters, or is based on common dictionary words.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>There are three levels of password validation policy:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>LOW    Length &gt;<span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>MEDIUM Length &gt;<span style="color:#f92672">=</span> 8, numeric, mixed <span style="color:#66d9ef">case</span>, and special characters
</span></span><span style="display:flex;"><span>STRONG Length &gt;<span style="color:#f92672">=</span> 8, numeric, mixed <span style="color:#66d9ef">case</span>, special characters and dictionary                  file
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Please enter 0 <span style="color:#f92672">=</span> LOW, 1 <span style="color:#f92672">=</span> MEDIUM and 2 <span style="color:#f92672">=</span> STRONG: <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Regardless of whether you chose to set up the <code>VALIDATE PASSWORD PLUGIN</code>, your server will then ask you to select and confirm a password for the MySQL <strong>root</strong> user. This should not be confused with the <strong>system root</strong>. The <strong>database root</strong> user is an administrative user with full privileges on the database system. Even though the default authentication method for the MySQL root user does not require a password, <strong>even if one is set</strong>, you should define a strong password here as an additional security measure. We&rsquo;ll discuss this further in a moment.</p>
<p>If you enabled password validation, you will be shown the password strength for the root password you just entered, and your server will ask if you want to change that password. If you are satisfied with your current password, type <code>N</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Using existing password <span style="color:#66d9ef">for</span> root.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Estimated strength of the password: <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>Change the password <span style="color:#66d9ef">for</span> root ? <span style="color:#f92672">((</span>Press y|Y <span style="color:#66d9ef">for</span> Yes, any other key <span style="color:#66d9ef">for</span> No<span style="color:#f92672">)</span> : n
</span></span></code></pre></div><p>For the rest of the questions, press <code>Y</code> and press <code>ENTER</code> at each prompt. This will remove some anonymous users and the test database, disable remote root logins, and load these new rules so that MySQL immediately respects the changes made.</p>
<p>Finally, check if you can access the MySQL console by typing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo mysql
</span></span></code></pre></div><p>This will connect to the MySQL server as the administrative database <strong>root</strong> user, inferred from the use of <code>sudo</code> when running this command. You should see an output like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>OutputWelcome to the MySQL monitor.  Commands end with ; or <span style="color:#ae81ff">\g</span>.
</span></span><span style="display:flex;"><span>Your MySQL connection id is <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>Server version: 5.7.34-0ubuntu0.18.04.1 <span style="color:#f92672">(</span>Ubuntu<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Copyright <span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> 2000, 2021, Oracle and/or its affiliates.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Oracle is a registered trademark of Oracle Corporation and/or its
</span></span><span style="display:flex;"><span>affiliates. Other names may be trademarks of their respective
</span></span><span style="display:flex;"><span>owners.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#39;help;&#39;</span> or <span style="color:#e6db74">&#39;\h&#39;</span> <span style="color:#66d9ef">for</span> help. Type <span style="color:#e6db74">&#39;\c&#39;</span> to clear the current input statement.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mysql&gt;
</span></span></code></pre></div><p>To exit the MySQL console, type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>exit
</span></span></code></pre></div><p>Note that you do not need to provide a password to connect as the <strong>root</strong> user, even if one was set during the <code>mysql_secure_installation</code> execution. This is because the default authentication method for the MySQL administrative user is <code>unix_socket</code> instead of <code>password</code>. While it may initially seem like a security issue, it makes the database server more</p>
<p>secure because only users with sudo privileges connecting from the console or via an application running with the same privileges are allowed to access as the MySQL <strong>root</strong> user. In practical terms, this means you won&rsquo;t be able to use the administrative database <strong>root</strong> user to connect from your PHP application. The MySQL account acts as a safeguard in case the default authentication method is changed from <code>unix_socket</code> to <code>password</code>.</p>
<p>For enhanced security, it&rsquo;s advisable to have dedicated user accounts with less extensive privileges set up for each database, especially if you plan to have multiple databases hosted on your server. However, I will create more detailed guides on this in the future.</p>
<p>Your MySQL server is now installed and secured. Let&rsquo;s now proceed to install PHP, the final component in the LAMP stack.</p>
<h2 id="step-3-php-installation">Step 3: PHP Installation</h2>
<p>PHP is the component of the setup that will process code to display dynamic content. It can run scripts, connect to your MySQL databases to fetch information, and deliver the processed content to your web server so that it can display the results to your visitors.</p>
<p>Once again, leverage the <code>apt</code> system to install PHP. In addition to the <code>php</code> package, you will also need to include <code>libapache2-mod-php</code> in Apache and the <code>php-mysql</code> package to allow PHP to connect to MySQL databases. Execute the following command to install all three packages and their dependencies:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install php libapache2-mod-php php-mysql
</span></span></code></pre></div><p>This should install PHP without any issues. We will test it shortly.</p>
<h3 id="modify-apache-directory-index-optional">Modify Apache Directory Index (Optional)</h3>
<p>In some cases, you may want to change how Apache serves files when a directory is requested. By default, if a user requests a directory from the server, Apache will first look for a file named <code>index.html</code>. However, we want to instruct the web server to prefer PHP files over others, so that Apache looks for <code>index.php</code> as the first file. Otherwise, an <code>index.html</code> placed in the root of the application&rsquo;s document will always take precedence over an <code>index.php</code>.</p>
<p>To make this change, open the <code>dir.conf</code> configuration file in a text editor of your choice. Here, we will use <code>nano</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo nano /etc/apache2/mods-enabled/dir.conf
</span></span></code></pre></div><p>You should see something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span><span style="color:#f92672">&lt;IfModule</span> <span style="color:#e6db74">mod_dir.c</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/IfModule&gt;</span>
</span></span></code></pre></div><p>Move the PHP index file (highlighted above) to the first position after <code>DirectoryIndex</code>, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span><span style="color:#f92672">&lt;IfModule</span> <span style="color:#e6db74">mod_dir.c</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/IfModule&gt;</span>
</span></span></code></pre></div><p>Once done, save and close the file by pressing <code>CTRL+X</code>. Confirm saving by typing <code>Y</code>, and then press <code>ENTER</code> to verify the file&rsquo;s save location.</p>
<p>Next, restart the Apache Web server so that the changes are recognized. You can do this with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo systemctl restart apache2
</span></span></code></pre></div><p>You can also check the status of the <code>apache2</code> service using <code>systemctl</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo systemctl status apache2
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Sample Output
</span></span><span style="display:flex;"><span>● apache2.service - The Apache HTTP Server
</span></span><span style="display:flex;"><span>   Loaded: loaded <span style="color:#f92672">(</span>/lib/systemd/system/apache2.service; enabled; vendor preset: enabled<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  Drop-In: /lib/systemd/system/apache2.service.d
</span></span><span style="display:flex;"><span>           └─apache2-systemd.conf
</span></span><span style="display:flex;"><span>   Active: active <span style="color:#f92672">(</span>running<span style="color:#f92672">)</span> since Thu 2021-07-15 09:22:59 UTC; 1h 3min ago
</span></span><span style="display:flex;"><span> Main PID: <span style="color:#ae81ff">3719</span> <span style="color:#f92672">(</span>apache2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    Tasks: <span style="color:#ae81ff">55</span> <span style="color:#f92672">(</span>limit: 2361<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>   CGroup: /system.slice/apache2.service
</span></span><span style="display:flex;"><span>           ├─3719 /usr/sbin/apache2 -k start
</span></span><span style="display:flex;"><span>           ├─3721 /usr/sbin/apache2 -k start
</span></span><span style="display:flex;"><span>           └─3722 /usr/sbin/apache2 -k start
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Jul <span style="color:#ae81ff">15</span> 09:22:59 ubuntu1804 systemd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>: Starting The Apache HTTP Server...
</span></span><span style="display:flex;"><span>Jul <span style="color:#ae81ff">15</span> 09:22:59 ubuntu1804 apachectl<span style="color:#f92672">[</span>3694<span style="color:#f92672">]</span>: AH00558: apache2: Could not reliably determine the server<span style="color:#e6db74">&#39;s fully qualified domain name, using 127.0.1.1. Set the &#39;</span>ServerName<span style="color:#960050;background-color:#1e0010">&#39;</span> di
</span></span><span style="display:flex;"><span>Jul <span style="color:#ae81ff">15</span> 09:22:59 ubuntu1804 systemd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>: Started The Apache HTTP Server.
</span></span></code></pre></div><p>Press <code>Q</code> to exit this status view.</p>
<h2 id="step-4-configure-a-virtual-host-recommended">Step 4: Configure a Virtual Host (Recommended)</h2>
<p>When using the Apache web server, you can use <em>virtual hosts</em> to encapsulate configuration details and host more than one domain from a single server. We will now set up a sample domain called <strong>my_domain</strong>, and you can replace it with the domain name you intend to use.</p>
<p>Apache comes with a server block enabled by default that is configured to serve documents from the <code>/var/www/html</code> folder. While it works well for a single site, it can become cumbersome when hosting multiple sites. Instead of modifying <code>/var/www/html</code>, let&rsquo;s create a directory structure within <code>/var/www</code> for the <strong>my_domain</strong> site, leaving <code>/var/www/html</code> as the default directory to serve if a client request doesn&rsquo;t match any other site.</p>
<p>Create the directory for <strong>my_domain</strong> as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo mkdir /var/www/my_domain
</span></span></code></pre></div><p>Then, assign ownership of the directory using the <code>$USER</code> environment variable, which refers to the current logged-in user:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo chown -R $USER:$USER /var/www/my_domain
</span></span></code></pre></div><p>The permissions for your main web directory should be correct if you haven&rsquo;t changed its umask value, but you can still type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo chmod -R <span style="color:#ae81ff">755</span> /var/www/my_domain
</span></span></code></pre></div><p>Now, create a sample <code>index.html</code> page using <code>nano</code> or your preferred editor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nano /var/www/my_domain/index.html
</span></span></code></pre></div><p>Inside, add the following sample HTML code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">title</span>&gt;My Domain&lt;/<span style="color:#f92672">title</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">h1</span>&gt;My domain is WORKING!!!&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>Save and close the file when you&rsquo;re done.</p>
<p>For Apache to serve this content, you need to create a virtual host file with the correct directives. Instead of modifying the default configuration file located at <code>/etc/apache2/sites-available/000-default.conf</code> directly, let&rsquo;s create a new one at <code>/etc/apache2/sites-available/my_domain.conf</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo nano /etc/apache2/sites-available/my_domain.conf
</span></span></code></pre></div><p>Paste the following configuration block, which is similar to the default but updated for our new directory and domain name, into <code>/etc/apache2/sites-available/my_domain.conf</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span><span style="color:#f92672">&lt;VirtualHost</span> <span style="color:#e6db74">*:80</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    ServerAdmin webmaster@localhost
</span></span><span style="display:flex;"><span>    ServerName my_domain
</span></span><span style="display:flex;"><span>    ServerAlias www.my_domain
</span></span><span style="display:flex;"><span>    DocumentRoot <span style="color:#e6db74">/var/www/my_domain</span>
</span></span><span style="display:flex;"><span>    ErrorLog ${APACHE_LOG_DIR}/error.log
</span></span><span style="display:flex;"><span>    CustomLog ${APACHE_LOG_DIR}/access.log combined
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/VirtualHost&gt;</span>
</span></span></code></pre></div><p>Note that we&rsquo;ve updated the <code>DocumentRoot</code> to our new directory and set <code>ServerAdmin</code> to an email that the administrator of the <strong>my_domain</strong> site can access. We&rsquo;ve also added two directives: <code>ServerName</code>, which sets the base domain that should match this virtual host definition, and <code>ServerAlias</code>, which defines other names that should match as if they were the base name.</p>
<p>Save and close the file when you&rsquo;re done.</p>
<p>Now, enable the file with the <code>a2ensite</code> tool:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo a2ensite my_domain.conf
</span></span></code></pre></div><p>Finally, disable the default site defined in <code>000-default.conf</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo a2dissite 000-default.conf
</span></span></code></pre></div><p>Then, test for configuration errors:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apache2ctl configtest
</span></span></code></pre></div><p>You should see the following output:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Output
</span></span><span style="display:flex;"><span>Syntax OK
</span></span></code></pre></div><p>Restart Apache to implement the changes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo systemctl restart apache2
</span></span></code></pre></div><p>Apache should now serve your domain name. You can test it by navigating to <code>http://my_domain</code>; you should see the HTML page created earlier working correctly.</p>
<p>With this, your virtual host is fully configured. Before making further changes or deploying an application, it would be prudent to proactively test the PHP configuration in case there are issues that need to be addressed.</p>
<h2 id="step-5-test-php-processing-on-the-web-server">Step 5: Test PHP Processing on the Web Server</h2>
<p>To verify that your system is correctly configured for PHP, create a PHP script named <code>info.php</code>. For Apache to find and serve this file correctly, it must be saved in the root directory of the web.</p>
<p>Create the file in the web root you created in the previous step by executing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo nano /var/www/my_domain/info.php
</span></span></code></pre></div><p>This will open an empty file. Add the following text, which is valid PHP code, inside the file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">phpinfo</span>();
</span></span></code></pre></div><p>Once done, save and close the file.</p>
<p>Now you can check whether your web server can correctly display the content generated by this PHP script. To test it, visit this page in your web browser. You will need the public IP address or the domain name of your server again.</p>
<p>The address you&rsquo;ll want to visit is:</p>
<pre tabindex="0"><code>http://my_domain/info.php
</code></pre><p>The page you should see should resemble this:</p>
<p><img src="images/small_php_info_1804-796x1024.png" alt="PHP Info Page"></p>
<p>This page provides some basic information about your server from a PHP perspective. It&rsquo;s useful for debugging and ensuring that settings are applied correctly.</p>
<p>If you can see this page in your browser, your PHP is working as expected.</p>
<p>You probably want to remove this file after this test because it could potentially provide information about your server to unauthorized users. To do so, run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo rm /var/www/my_domain/info.php
</span></span></code></pre></div><p>You can always recreate this page if you need to access the information again later.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Now that you have installed a LAMP stack, you have many choices for what to do next. You&rsquo;ve set up a platform that will allow you to install most types of websites and web software on your server.</p>
<p>All that&rsquo;s left is to start installing or developing your PHP-based sites on your new LAMP stack!</p>
<p>Happy coding!</p>
]]></content>
		</item>

		<item>
			<title>Web development on Linux</title>
			<link>https://albertoreineri.it/en/blog/web-development-on-linux/</link>
			<pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/en/blog/web-development-on-linux/</guid>
			<description>Development on Linux I have been developing software and websites for more than ten years now (with a break in between), and I have had the opportunity to use both Windows and Mac as well as Linux.
While I have primarily used Windows and Mac, during the last period where I worked closely with system administrators and did much more backend development than frontend, I felt the need to switch to something more performance-oriented for these activities.</description>
			<content type="html"><![CDATA[<h1 id="development-on-linux">Development on Linux</h1>
<p>I have been developing software and websites for more than ten years now (with a break in between), and I have had the opportunity to use both <a href="/blog/miglior-pc-per-sviluppatori-la-mia-esperienza/"><strong>Windows</strong></a> and <strong>Mac</strong> as well as <strong>Linux</strong>.</p>
<p>While I have primarily used <strong>Windows</strong> and <strong>Mac</strong>, during the last period where I worked closely with <strong>system administrators</strong> and did much more <strong>backend development</strong> than frontend, I felt the need to switch to something more <strong>performance-oriented</strong> for these activities.</p>
<h2 id="beginnings">Beginnings</h2>
<p>I started my career as a <strong>.NET developer.</strong> I used a PC with the marvelous <strong>Windows XP</strong>.</p>
<p>It truly was wonderful—<strong>stable</strong>, fast, capable of doing everything.</p>
<p>At that time, I used Visual Studio and developed <strong>management and CRM</strong> software for the <strong>Windows</strong> platform, so I was obliged to remain in the <strong>Microsoft</strong> environment.</p>
<p>Then I started developing some <strong>websites</strong>, always for the same company. Being proficient in .NET, we began developing with <strong>ASP</strong>, a language very similar to Visual Basic.</p>
<p>I remember that at the time, <strong>changing the operating system never even crossed my mind.</strong> Linux was still quite challenging, Mac was expensive, and neither allowed for developing software for Windows, so the matter ended there.</p>
<h2 id="my-first-mac">My first Mac</h2>
<p>With the first money I saved, I decided to buy my first Mac: a <strong>MacBook White</strong>.</p>
<p>I was fascinated by the Apple environment.</p>
<p>I made the purchase mainly to use it for <strong>recording music</strong>; I had no intention of using it for development.</p>
<p>I tried it at the beginning, but everything I was used to using didn&rsquo;t exist for Mac. Visual Studio wasn&rsquo;t available for Mac, and our sites ran on Windows servers, so there was nothing to be done.</p>
<p>I contented myself with the fantastic <strong>artistic department</strong> of the bitten apple. There was no comparison; drawing, video, and music software were decidedly on another level.</p>
<h2 id="a-period-of-pause">A period of pause</h2>
<p><strong>Then I stopped programming for a few years.</strong> I did something completely different; I graduated in a humanities subject and completely disconnected from computers.</p>
<p>I continued to use the <strong>Mac as a personal laptop</strong>, but I only used it for <strong>university</strong> and <strong>free time</strong>, and here I began to <strong>miss Windows</strong>.</p>
<p>The <strong>Office suite</strong>, the possibility of finding thousands of software for any type of problem, <strong>games</strong>, and much more were missing on the Mac&hellip;</p>
<p>So when the MacBook White finally died of old age (7 years of good service), <strong>I bought a Windows laptop.</strong></p>
<h2 id="return-to-windows">Return to Windows</h2>
<p>When I bought my current laptop, <strong>I was still studying</strong> and had not yet resumed my career as a developer, but <strong>I wanted to return to programming,</strong> to write some code, to develop something from scratch.</p>
<p>So I went to Unieuro and bought <strong>the laptop with the best value for money.</strong></p>
<h2 id="resuming-development">Resuming development</h2>
<p><strong>A year later, I started developing seriously again,</strong> and I felt great on <strong>Windows</strong>; after all, that&rsquo;s where I had started, and I felt at home.</p>
<p>Thanks to <strong>XAMPP</strong>, I could set up my own lamp stack in 5 minutes and start tinkering with <strong>WordPress</strong>, <strong>Laravel</strong>, and create my projects the way I prefer: using <strong>core PHP</strong>.</p>
<p>As I caught up with the times and learned to use the new tools, I increasingly realized that <strong>Windows was no longer the ideal choice for me.</strong></p>
<p>I was no longer creating management software but web applications, and <strong>the web runs on Linux.</strong></p>
<p>I started using <strong>Node.js</strong> and various <strong>JavaScript</strong> tools that work from the command line, and gradually, I began to discover how <strong>limiting PowerShell</strong> could be&hellip;</p>
<p>Then I expanded my skills as a backend developer, and here I had to make the leap to a <strong>more performant terminal</strong>, and that&rsquo;s when I discovered Linux.</p>
<p>I started using <strong>WSL</strong>, but it was all a bit <strong>too messy</strong> for my taste, so I switched to Linux proper.</p>
<h2 id="arrival-at-linux">Arrival at Linux</h2>
<p><strong>It wasn&rsquo;t love at first sight.</strong></p>
<p>I started installing Ubuntu as a virtual machine with <strong>VirtualBox</strong> to try to tinker a bit with the penguin.</p>
<p>The <strong>first impact</strong>, perhaps also due to a lifetime spent on other systems, was <strong>quite tragic</strong>&hellip;</p>
<p>Everything I wanted to do, I had to <strong>configure</strong>; there was very little that worked right away, and for a while, I abandoned the idea of Linux.</p>
<p>Then little by little, I <strong>reapproached it</strong>, trying to <strong>adapt my way of thinking to this system</strong>, and everything changed.</p>
<p>The trick is to <strong>stop wanting Linux to resemble Windows or Mac OS,</strong> but to try to understand what it really is; then you can appreciate its infinite qualities.</p>
<p>Installing libraries, managing components, using command-line software, <strong>everything is much easier on Linux</strong>, everything works on the first try.</p>
<p>Configuring Vagrant correctly on Windows took much more time than on Ubuntu, and so much more.</p>
<p>Most of the time, all you need to do is <strong>run a command from the terminal, and voilà</strong>, everything works perfectly.</p>
<p>As a developer from now on, I think I will only use Linux distros, leaving a partition with Windows in case I have to do specific work with Photoshop (currently happily replaced with Pixlr) or other software available only for Windows.</p>
<p>In addition to being better from a developer&rsquo;s perspective, there is also the whole issue of <strong>open source</strong> behind it, the largest community project in history, the <strong>opposition to multinational corporations</strong>, the <strong>fight against planned obsolescence of laptops</strong>, and much more, but this is not the time to address these issues.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As a developer, I would suggest that anyone <strong>switch to Linux</strong> (except those developing for iOS or specifically for Windows). Certainly, <strong>the beginning is not easy</strong>; you need to tinker a bit, bump your head a few times, but once you get into the right <strong>mood</strong>, everything flows smoothly and quickly.</p>
<p>For now, I&rsquo;m getting along very well with <strong><a href="https://www.ubuntu-it.org/">Ubuntu</a></strong> because I like <strong>Gnome</strong>. I tried other distros, but in the end, there isn&rsquo;t much difference; everything can be installed on any distro. So I went for Ubuntu for its <strong>stability</strong>.</p>
<p>I have been using it as a <strong>primary system for a couple of months</strong> now, and I think it will remain so for a long time. This way, I can <strong>finally free myself from Apple&rsquo;s pressing marketing</strong>, which, to be honest, is a constant temptation but would end up making me a slave to the apple&hellip; You know that if you buy a Mac, you want an iPhone, then an iPad, and an Apple Watch, and in the end, you always use the same three apps&hellip;</p>
<p>Even <strong>Windows laptops</strong> are becoming increasingly <strong>beautiful</strong> and tempting, with hardware that seems to age faster and faster. Of course, if you put an i7 in an ultrabook without a cooling system, you either melt the PC or castrate it and turn it into an i3. In the end, it&rsquo;s all marketing&hellip;</p>
<p>With <strong>Linux</strong>, on the other hand, you can take an <strong>i5</strong> from any generation, throw in an **SSD</p>
<p>** and <strong>8GB</strong> of RAM, and you&rsquo;re good for years without performance issues and more.</p>
<p>Of course, there&rsquo;s the problem of <strong>battery life</strong>, which is not as well optimized on Linux&hellip; But in the end, I use <strong>Linux for work</strong>, connected to the power, and when I want to chill on the couch, I can use Windows and enjoy a few more hours away from the cables.</p>
]]></content>
		</item>

	</channel>
</rss>
