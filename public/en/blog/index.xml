<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Blog on Alberto Reineri</title>
		<link>https://albertoreineri.it/en/blog/</link>
		<description>Recent content in Blog on Alberto Reineri</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en</language>
		<lastBuildDate>Sat, 20 Jan 2024 05:00:00 +0000</lastBuildDate>
		<atom:link href="https://albertoreineri.it/en/blog/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>New Website</title>
			<link>https://albertoreineri.it/en/blog/new-website/</link>
			<pubDate>Sat, 20 Jan 2024 05:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/new-website/</guid>
			<description>Here&amp;rsquo;s my New Website!
I know, it might seem unconventional. There&amp;rsquo;s no WOW effect as one would expect, at least not in the form of flashy or extravagant animations. It&amp;rsquo;s a simple website, primarily text-based. It might seem like it doesn&amp;rsquo;t fully comply with Google&amp;rsquo;s rules, but in reality, there&amp;rsquo;s more than meets the eye.
Why Such an SEO-Unfriendly Website I decided to make a radical change! Originally, this site was the showcase of my Freelance Web Developer business.</description>
			<content type="html"><![CDATA[<p>Here&rsquo;s my New Website!</p>
<p>I know, it might seem unconventional. <strong>There&rsquo;s no WOW effect</strong> as one would expect, at least not in the form of flashy or extravagant animations. It&rsquo;s a simple website, primarily text-based. It might seem like <strong>it doesn&rsquo;t fully comply with Google&rsquo;s rules</strong>, but in reality, there&rsquo;s more than meets the eye.</p>
<h2 id="why-such-an-seo-unfriendly-website">Why Such an SEO-Unfriendly Website</h2>
<p>I decided to make a radical change! Originally, this site was the <strong>showcase of my Freelance Web Developer business</strong>. In the past, it had vibrant colors, animations, and effects to showcase my skills and attract new clients.</p>
<p>Fortunately, I no longer need to <em>show off</em> that much. This is for various reasons:</p>
<h3 id="no-economic-need-to-find-new-clients">No economic need to find new clients</h3>
<p>At the moment, I find myself in a rather stable situation (<em>as stable as a VAT business can be&hellip;</em>). I have satisfying long-term collaborations and fill my days with programming. I always welcome new clients and projects, even though I recently had to decline some and direct potential clients to other entities! Being a solo Freelancer, I don&rsquo;t have the structure to expand indefinitely, and honestly, I don&rsquo;t want to create it at the moment. For now, I&rsquo;m content with staying solo. However, this means I have to turn down some work. Days have a limited number of hours, and my mind has a limited number of projects it can handle, so for now, I can say I&rsquo;m saturated.</p>
<p>Perhaps in a few years, I&rsquo;ll open up to new possibilities, or I&rsquo;ll strengthen current collaborations even more and quit freelancing altogether&hellip; Who knows&hellip; We&rsquo;ll see how things evolve! There&rsquo;s no point in looking too far ahead; the world is constantly changing, and we must always be ready to adapt!</p>
<h3 id="i-want-a-website-that-represents-me">I want a website that represents me</h3>
<p>My site must be first and foremost <strong>mine</strong>! It may seem obvious, but today, to <em>attract</em> the audience, you have to appear cool, modern, lively, joyful, and then some! In the past, I did it because it was necessary, but in reality, I&rsquo;m not like that&hellip;
I&rsquo;m a rather serious, calm, and composed person. I love silence and tranquility; I don&rsquo;t like things that are too flashy&hellip;</p>
<p>I wouldn&rsquo;t call myself boxed in; I&rsquo;ve always had long hair, dressed casually, and I&rsquo;m quite liberal, but I tend to take things seriously, perhaps too much.</p>
<h3 id="showcase">Showcase</h3>
<p>This site is no longer my showcase, or better to say, its being a showcase is no longer a central factor.
For now, the promotional pages <a href="/services">Services</a> and <a href="/portfolio">Portfolio</a> are still active, but I don&rsquo;t exclude the possibility of removing them in the future and keeping only the blog. Also, I plan to create an Extra section to include what I do outside the web world.</p>
<h3 id="seo">SEO</h3>
<p>However, SEO is indeed present on this site. The Lighthouse tests are very positive, and I expect the indexing to improve. It&rsquo;s true that there are no images, but the content is already widely read, and now the loading times have greatly improved. Only time will tell if all this can work.</p>
<h3 id="exiting-social-media">Exiting Social Media</h3>
<p>As a long-term goal, I would like to use this site as my only online presence.
I&rsquo;ve been fed up with social networks for a long time. They are becoming more and more invasive, and every time I think about what they bring to my life, there are more things they take away from me than what they give me. Therefore, I hope to get out of them soon. I&rsquo;m forced to keep them active because I sometimes use them for work, but I hope to close them shortly and be present online only through this site. If it happens, I&rsquo;ll also create an &ldquo;Extra&rdquo; section to gather some of my curiosities outside of programming.</p>
<h2 id="how-this-site-works">How This Site Works</h2>
<p>I&rsquo;ll start by saying that this site is developed with Hugo, an open-source framework for creating static sites. This allows me to manage it entirely through GitHub. So, I gave up my personal domain and am using <a href="https://albertoreineri.github.io/">albertoreineri.github.io</a>. The only thing I had to give up is the email associated with my personal domain, so I use Gmail. This has never been a problem for my clients over the years, and it saves me from managing domain, DNS, and server for this site. One less job for me!</p>
<p>But how does this particular site work? Well, it&rsquo;s not actually difficult&hellip;
The main thing is that the navbar is moved down, not at the top like on all other sites. This is to make the site more convenient to use, more app-style. If you open it from mobile, you can use the navbar simply with your thumb without stretching it to the top of the screen, but by clicking comfortably at the bottom.</p>
<p>This site is oriented towards a pleasant reading experience. That&rsquo;s why there&rsquo;s only a dark mode. Reading white text on a dark background is more relaxing for the eyes and stresses the mind less.
Also, the structure presents only text without a sidebar or anything else. Sometimes the table of contents is on the right, always to improve content readability. Finally, on scroll, the navbar disappears completely, and the text becomes the only thing on the page to ensure the best possible reading experience.</p>
<p>Scrolling up or reaching the bottom of the page will make the navbar visible again, and you can change pages.</p>
<p>As additional features, there&rsquo;s the possibility to search the site&rsquo;s content and multilingual support, which is still in development but will be online soon.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This is my new site. I don&rsquo;t know how long it will last! As a web developer, I&rsquo;m always looking for new challenges, and the best way to understand a technology is to try it directly. It could be completely different in two months, or I could remain faithful to this approach for years.</p>
<p>In any case, I&rsquo;ll keep you informed on this blog!</p>
<p>See you soon!</p>
<p><em>Alberto</em></p>
]]></content>
		</item>
		
		<item>
			<title>The Basics of GIT: Learn Versioning!</title>
			<link>https://albertoreineri.it/en/blog/the-basics-of-git-learn-versioning/</link>
			<pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/the-basics-of-git-learn-versioning/</guid>
			<description>In the vast landscape of software development, effective code management plays a crucial role in determining the success of a project. In this context, Git stands out as an indispensable tool, providing a powerful and efficient version control system. Its adoption not only simplifies collaboration among developers but also offers a robust method for tracking changes over time, managing distinct branches, and resolving conflicts in an orderly manner.
This practical guide aims to walk you through the fundamentals of code management with Git, offering a clear and detailed overview of essential procedures.</description>
			<content type="html"><![CDATA[<p>In the vast landscape of software development, effective code management plays a crucial role in determining the success of a project. In this context, Git stands out as an indispensable tool, providing a powerful and efficient version control system. Its adoption not only simplifies collaboration among developers but also offers a robust method for tracking changes over time, managing distinct branches, and resolving conflicts in an orderly manner.</p>
<p>This practical guide aims to walk you through the fundamentals of code management with Git, offering a clear and detailed overview of essential procedures. From the initial installation to advanced collaboration on platforms like GitHub, we will explore step by step how to fully leverage Git&rsquo;s capabilities to enhance your development workflow.</p>
<p>Whether you are a beginner embarking on your software development journey or an experienced professional looking to refine your skills, this guide will accompany you in your Git experience, opening doors to a more organized and collaborative code management world.</p>
<h2 id="1-git-installation">1. Git Installation:</h2>
<p>The first fundamental step in embarking on your journey into code management with Git is installing the tool on your system. Git is a versatile resource and can be installed on various platforms, including Windows, macOS, and Linux. Follow the corresponding steps for your operating system to ensure a correct installation.</p>
<h3 id="windows">Windows:</h3>
<ul>
<li>Visit the official Git website (<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>) and download the installer.</li>
<li>Run the downloaded installer, following the installation instructions.</li>
<li>During the installation, make sure to select the option to &ldquo;Use Git and optional Unix tools from the Command Prompt&rdquo; to enable Git usage from the command line.</li>
</ul>
<h3 id="macos">macOS:</h3>
<ul>
<li>If you are using macOS, it is advisable to use Homebrew for installation. Open the terminal and execute the command:
<pre tabindex="0"><code>brew install git
</code></pre></li>
<li>Wait for the installation to complete.</li>
</ul>
<h3 id="linux-ubuntu">Linux (Ubuntu):</h3>
<ul>
<li>On Ubuntu-based systems, run the following commands in the terminal:
<pre tabindex="0"><code>sudo apt update
sudo apt install git
</code></pre></li>
<li>Confirm the installation when prompted.</li>
</ul>
<p>Verify the installation by running the command <code>git --version</code> in the terminal. If Git has been installed successfully, the current version will be displayed.</p>
<p>With Git installed on your system, you have opened the door to fully exploiting its code management capabilities. In the following sections, we will explore how to initialize a repository and start tracking changes to your code accurately.</p>
<h2 id="2-creating-a-repository">2. Creating a Repository:</h2>
<p>Now that you have Git installed on your system, the next step is to initialize a Git repository within your project&rsquo;s directory. A repository is essentially a container that will track changes to your code over time. Follow these steps carefully to create your repository:</p>
<ol>
<li>
<p><strong>Opening the Terminal or Console:</strong> Open the terminal if you are on macOS or Linux, or the console if you are on Windows.</p>
</li>
<li>
<p><strong>Navigating to the Project Directory:</strong> Use the <code>cd</code> command to navigate to your project&rsquo;s directory. For example:</p>
<pre tabindex="0"><code>cd path/to/your/project
</code></pre></li>
<li>
<p><strong>Initializing the Repository:</strong> Execute the command <code>git init</code> to initialize a new Git repository in the project directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init
</span></span></code></pre></div></li>
<li>
<p><strong>Checking Repository Status:</strong> You can use the command <code>git status</code> to check the status of your repository, displaying modified or added files and those ready for commit.</p>
</li>
</ol>
<p>You have now successfully created your first Git repository. From this point forward, Git will start tracking changes to your files. In the next step, we will explore how to add files to the repository and record changes through commits.</p>
<h2 id="3-adding-files-to-the-repository">3. Adding Files to the Repository:</h2>
<p>Now that your Git repository has been initialized, it&rsquo;s time to start tracking and recording changes to your files. We will use the <code>git add</code> command to stage files and the <code>git commit</code> command to confirm the changes. Here&rsquo;s how to proceed:</p>
<h3 id="adding-files-to-the-repository">Adding Files to the Repository:</h3>
<p>Use the <code>git add &lt;filename&gt;</code> command to add a single file to the so-called &ldquo;staging area,&rdquo; where Git prepares files for the next commit.
<code>bash git add filename.txt </code></p>
<p>If you want to add all modified or new files, you can use the command:
<code>bash git add . </code></p>
<p>Make sure to replace <code>&lt;filename&gt;</code> with the actual name of your file.</p>
<h3 id="checking-repository-status">Checking Repository Status:</h3>
<p>You can always check the current status of the repository with the <code>git status</code> command. This will show you the files that have been added to the staging area and those still waiting to be added.
<code>bash git status </code></p>
<h3 id="confirming-changes-with-a-commit">Confirming Changes with a Commit:</h3>
<p>Once you have added the desired files, it&rsquo;s time to make a commit to record the changes in the repository. Use the <code>git commit</code> command followed by a descriptive message:
<code>bash git commit -m &quot;Description of the changes&quot; </code></p>
<p>The commit message should be clear and informative, making it easy to understand the changes made in this specific commit.</p>
<p>You have now officially recorded your first changes in the Git repository. In the next step, we will further explore the concepts of branching, allowing you to work on different development lines in an organized manner.</p>
<h2 id="4-committing-changes">4. Committing Changes:</h2>
<p>After adding the desired files to your repository via the staging area, it&rsquo;s time to make a commit. Commits in Git are like snapshots of your project at a specific moment, and each commit has an associated descriptive message indicating the changes made. Here&rsquo;s how to make a commit:</p>
<h3 id="executing-the-commit">Executing the Commit:</h3>
<p>Use the <code>git commit -m &quot;Commit message&quot;</code> command to officially record the changes in the repository.
<code>bash git commit -m &quot;Implemented authentication system&quot; </code></p>
<p>The commit message should be clear and informative, briefly explaining the changes made in this specific commit.</p>
<h3 id="viewing-commit-history">Viewing Commit History:</h3>
<p>You can view the commit history with the <code>git log</code> command. This will show a list of all commits in the repository, with detailed information on who made the commit, when it was executed, and the associated message.</p>
<h3 id="reverting-to-previous-versions-optional">Reverting to Previous Versions (Optional):</h3>
<p>If you want to go back to a previous version of your project, you can do so using the <code>git checkout &lt;commit ID&gt;</code> or <code>git checkout &lt;branch name&gt;</code> command. This allows you to explore your project at a specific state.</p>
<h3 id="viewing-differences-optional">Viewing Differences (Optional):</h3>
<p>You can view differences between versions with the <code>git diff</code> command. This command will show you the changes made between your current working copy and the last recorded version in the repository.</p>
<p>Making regular and descriptive commits is a crucial practice to keep track of changes over time and facilitate collaboration with other developers. In the next section, we will explore the use of branches, allowing you to work on different development lines separately.</p>
<h2 id="5-creating-branches">5. Creating Branches:</h2>
<p>The use of branches in Git allows you to develop different code lines separately, enabling parallel work on different features or fixes without directly impacting the main branch. Let&rsquo;s see how to create and manage branches in Git:</p>
<h3 id="creating-a-new-branch">Creating a New Branch:</h3>
<p>Use the <code>git branch &lt;branch name&gt;</code> command to create a new branch. For example:
<code>bash git branch feature-authentication </code></p>
<p>This creates a new branch named &ldquo;feature-authentication,&rdquo; but you currently remain in your current branch.</p>
<h3 id="switching-between-branches">Switching Between Branches:</h3>
<p>To switch from one branch to another, use the <code>git checkout &lt;branch name&gt;</code> command:
```bash
git checkout feature-auth</p>
<p>entication
```</p>
<p>You are now in the &ldquo;feature-authentication&rdquo; branch, and any changes you make will be isolated to this branch.</p>
<h3 id="creating-and-switching-in-one-step">Creating and Switching in One Step:</h3>
<p>You can create a new branch and switch to it in one step using the <code>-b</code> option with the <code>git checkout</code> command:
<code>bash git checkout -b feature-authentication </code></p>
<p>This is a convenient shortcut.</p>
<h3 id="merging-branches">Merging Branches:</h3>
<p>Once you have completed work on a branch, you can merge it back into the main branch (usually &ldquo;master&rdquo; or &ldquo;main&rdquo;). First, switch to the main branch:
<code>bash git checkout main </code>
Then, use the <code>git merge &lt;branch name&gt;</code> command to merge the changes from the specified branch:
<code>bash git merge feature-authentication </code></p>
<p>Git will attempt to automatically merge the changes. If conflicts arise, you will need to resolve them manually.</p>
<h3 id="deleting-branches">Deleting Branches:</h3>
<p>After a branch has been merged and is no longer needed, you can delete it using the <code>git branch -d &lt;branch name&gt;</code> command:
<code>bash git branch -d feature-authentication </code></p>
<p>The branch deletion is subject to confirmation. If the branch contains unmerged changes, use <code>-D</code> instead of <code>-d</code> to force deletion:
<code>bash git branch -D feature-authentication </code></p>
<p>Using branches effectively contributes to a more organized and manageable development process. In the next section, we will explore remote repositories and how to collaborate with others using platforms like GitHub.</p>
<h2 id="6-remote-repositories">6. Remote Repositories:</h2>
<p>Git&rsquo;s true power is revealed when collaborating with others on a project. Remote repositories, often hosted on platforms like GitHub, allow multiple developers to work on the same codebase seamlessly. Let&rsquo;s explore the key concepts of remote repositories:</p>
<h3 id="setting-up-a-remote-repository-github-example">Setting Up a Remote Repository (GitHub Example):</h3>
<ol>
<li>Create a GitHub account if you don&rsquo;t have one.</li>
<li>On GitHub, click the &ldquo;+&rdquo; sign in the top right and select &ldquo;New repository.&rdquo;</li>
<li>Fill in the repository name, description, and other details.</li>
<li>Click &ldquo;Create repository.&rdquo;</li>
</ol>
<h3 id="linking-a-local-repository-to-a-remote-repository">Linking a Local Repository to a Remote Repository:</h3>
<p>Use the <code>git remote add origin &lt;repository URL&gt;</code> command to link your local repository to a remote repository. For example:
<code>bash git remote add origin https://github.com/your-username/your-repository.git </code></p>
<p>Replace the URL with the actual URL of your remote repository.</p>
<h3 id="pushing-changes-to-the-remote-repository">Pushing Changes to the Remote Repository:</h3>
<p>After making changes and committing them locally, use the <code>git push origin &lt;branch name&gt;</code> command to push the changes to the remote repository. For example:
<code>bash git push origin main </code></p>
<p>This command pushes the changes made in your local &ldquo;main&rdquo; branch to the &ldquo;main&rdquo; branch of the remote repository.</p>
<h3 id="pulling-changes-from-the-remote-repository">Pulling Changes from the Remote Repository:</h3>
<p>If others have made changes to the remote repository, you can pull those changes to your local repository using the <code>git pull origin &lt;branch name&gt;</code> command. For example:
<code>bash git pull origin main </code></p>
<p>This command fetches the changes made by others in the remote &ldquo;main&rdquo; branch and merges them into your local &ldquo;main&rdquo; branch.</p>
<h3 id="cloning-a-remote-repository">Cloning a Remote Repository:</h3>
<p>To clone an existing remote repository to your local machine, use the <code>git clone &lt;repository URL&gt;</code> command. For example:
<code>bash git clone https://github.com/username/repository.git </code></p>
<p>This creates a copy of the remote repository on your local machine.</p>
<h3 id="branching-in-remote-repositories">Branching in Remote Repositories:</h3>
<p>Branches created in a local repository can be pushed to the remote repository to facilitate collaboration. After creating and committing changes in a local branch, use the <code>git push origin &lt;branch name&gt;</code> command to push the branch to the remote repository.</p>
<p>These fundamental concepts of remote repositories lay the groundwork for effective collaboration among developers. In the final section, we will explore some advanced Git topics, providing additional tools for managing your codebase.</p>
<h2 id="7-advanced-git-topics">7. Advanced Git Topics:</h2>
<h3 id="resolving-merge-conflicts">Resolving Merge Conflicts:</h3>
<p>In collaborative projects, it&rsquo;s common for multiple developers to make changes to the same file simultaneously, leading to merge conflicts. When Git is unable to automatically merge changes, it marks the conflicting sections, and manual intervention is required.</p>
<p>To resolve a merge conflict:</p>
<ol>
<li>Open the conflicted file in your code editor.</li>
<li>Locate and resolve the conflicting sections.</li>
<li>Mark the conflict as resolved using <code>git add &lt;filename&gt;</code>.</li>
<li>Complete the merge with <code>git commit</code>.</li>
</ol>
<h3 id="git-rebase">Git Rebase:</h3>
<p>Git rebase is an alternative to merging that allows you to combine multiple branches more linearly. It involves moving or combining a sequence of commits to a new base commit.</p>
<p>To rebase a branch:
<code>bash git checkout feature-branch git rebase main </code></p>
<p>This moves the changes in the &ldquo;feature-branch&rdquo; on top of the latest changes in the &ldquo;main&rdquo; branch.</p>
<h3 id="git-tags">Git Tags:</h3>
<p>Git tags are used to capture a point in history that is used for a marked version release (e.g., v1.0.0). Tags are often used for release management.</p>
<p>To create a tag:
<code>bash git tag -a v1.0.0 -m &quot;Version 1.0.0&quot; </code></p>
<p>This creates an annotated tag with a message.</p>
<h3 id="git-stash">Git Stash:</h3>
<p>Git stash allows you to temporarily save changes without committing them. This is useful when you need to switch branches but don&rsquo;t want to commit changes.</p>
<p>To stash changes:
<code>bash git stash </code></p>
<p>Later, you can apply the stashed changes:
<code>bash git stash apply </code></p>
<p>This is particularly helpful when you need to switch to another branch to work on a different task.</p>
<p>These advanced Git topics provide additional tools for managing complex development scenarios. Mastering these concepts will empower you to navigate diverse challenges and contribute effectively to collaborative software projects.</p>
<h2 id="conclusion">Conclusion:</h2>
<p>Congratulations! You have completed this comprehensive guide to Git, covering fundamental concepts and advanced topics alike. By mastering Git, you have acquired a powerful skill set that will serve you well in your software development journey.</p>
<p>As you continue your exploration of Git, remember that practice is key. Experiment with different Git commands, collaborate with others on projects, and explore the wide range of possibilities that Git offers for efficient code management.</p>
<p>May your Git repositories always be well-organized, and your commits be descriptive and meaningful. Happy coding!</p>
]]></content>
		</item>
		
		<item>
			<title>I am officially a WordPress Developer.</title>
			<link>https://albertoreineri.it/en/blog/i-am-officially-a-wordpress-developer./</link>
			<pubDate>Wed, 10 Jan 2024 05:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/i-am-officially-a-wordpress-developer./</guid>
			<description>Today my plugin was approved, and it has been published in the official WordPress repository! Now, I am officially part of the community as a WordPress Developer. What an exciting moment! 😊 😊 😊
The plugin is actually very simple, but it was my first step into the WP community, and I wanted to start from the ground up to quietly join the team.
I&amp;rsquo;ve been coding for WordPress for over five years, a significant part of my work.</description>
			<content type="html"><![CDATA[<p><strong>Today my plugin was approved</strong>, and it has been published in the <a href="https://wordpress.org/plugins/simple-header-and-footer/"><strong>official WordPress repository</strong></a>!
Now, I am officially part of the community as a <a href="https://profiles.wordpress.org/albertoreineri/"><strong>WordPress Developer</strong></a>.
What an exciting moment! 😊 😊 😊</p>
<p>The plugin is actually <strong>very simple</strong>, but it was my first step into the WP community, and I wanted to start from the ground up to quietly join the team.</p>
<p>I&rsquo;ve been coding for WordPress for over five years, a significant part of my work. However, obtaining <strong>approval from the official team</strong> is far from simple. The rules are strict, and the code needs a complex structure to be approved, making software development a challenging task. Even though my plugin seems to perform a simple task, behind the scenes, there&rsquo;s a considerable effort to meet the high standards required. Throughout this journey, I&rsquo;ve gained new insights into software design and learned to use the SVN version control system for managing the code and updates for my plugin. As always, <em>doing is the best way to learn!</em></p>
<p>All of this has no monetary value; the plugin is <strong>free &amp; open source</strong>, so it&rsquo;s available for free to anyone worldwide. My reward lies in the pride of creating something that can be useful to others, in addition to being officially recognized as a WP Developer by the official team.</p>
<p>Receiving acknowledgments is always a rewarding experience, especially when they come from such a vast and diverse community like WordPress, which manages one of the most widely used software platforms globally.</p>
<p>For anyone interested, here is the link to the plugin: <a href="https://wordpress.org/plugins/simple-header-and-footer/">https://wordpress.org/plugins/simple-header-and-footer/</a>. I want to emphasize once again that it&rsquo;s a Free &amp; Open Source project, so anyone can participate and improve it.</p>
<p>I&rsquo;ll wrap up this self-referential post here, but sometimes being proud of oneself is healthy and necessary to keep enthusiasm high! Also, I can revisit this page in a few years and remember this significant event for me.</p>
<p>See you soon!</p>
<p><em>Alberto</em></p>
]]></content>
		</item>
		
		<item>
			<title>The 9 Best Visual Studio Code Extensions</title>
			<link>https://albertoreineri.it/en/blog/the-9-best-visual-studio-code-extensions/</link>
			<pubDate>Sun, 29 Oct 2023 09:12:22 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/the-9-best-visual-studio-code-extensions/</guid>
			<description>Visual Studio Code (VS Code) has become one of the most popular code editors among developers due to its flexibility and a wide range of available extensions. VS Code extensions offer additional features that can significantly enhance a developer&amp;rsquo;s workflow. In this article, we will explore the top 10 Visual Studio Code extensions that will empower your development environment, making your programming experience even more efficient and productive.
ESLint ESLint is an essential ally for any developer aiming to write clean and error-free JavaScript code.</description>
			<content type="html"><![CDATA[<p>Visual Studio Code (VS Code) has become one of the most popular code editors among developers due to its flexibility and a wide range of available extensions. VS Code extensions offer additional features that can significantly enhance a developer&rsquo;s workflow. In this article, we will explore the top 10 Visual Studio Code extensions that will empower your development environment, making your programming experience even more efficient and productive.</p>
<h2 id="eslint">ESLint</h2>
<p>ESLint is an essential ally for any developer aiming to write clean and error-free JavaScript code. This powerful Visual Studio Code extension seamlessly integrates ESLint into your development environment, providing real-time suggestions and warnings as you code. With ESLint, you can maintain a consistent coding standard, identify and fix common errors, improve the quality of your software, and save valuable time during debugging. Don&rsquo;t compromise the quality of your JavaScript code: install ESLint for Visual Studio Code today and simplify the process of writing clean and error-free code.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">Link »</a></p>
<h2 id="bracket-pair-colorizer">Bracket Pair Colorizer</h2>
<p>Well-structured code is the key to efficient programming, and the &ldquo;Bracket Pair Colorizer&rdquo; extension for Visual Studio Code is your ideal companion for keeping your code organized and easily readable. This extension assigns distinct and intuitive colors to pairs of parentheses, curly braces, and square brackets in your code, making it easy to visualize the relationships between open and closed brackets. You will never lose track of your code structure again, eliminating bracketization errors and simplifying debugging. With &ldquo;Bracket Pair Colorizer,&rdquo; you can focus on coding without worrying about formatting or bracketization errors. Make your development experience more efficient and visually clear: install Bracket Pair Colorizer today and bring a touch of color to your code organization.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2">Link »</a></p>
<h2 id="prettier">Prettier</h2>
<p>Consistency in code formatting is crucial for effective collaboration and maintaining project organization. The &ldquo;Prettier&rdquo; extension for Visual Studio Code is an indispensable tool to ensure that your JavaScript, TypeScript, HTML, CSS, and many other language codes are always impeccably formatted. Prettier seamlessly integrates into your workflow, automatically applying predefined or customized formatting rules to your code with a simple click or upon file save. With Prettier, forget lengthy discussions about code formatting in development teams and focus on writing high-quality code. Install Prettier – Code Formatter today and discover how to make code formatting an effortless and consistent process in Visual Studio Code.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Link »</a></p>
<h2 id="gitlens">GitLens</h2>
<p>If you are a Git enthusiast looking to maximize your productivity in software development, the &ldquo;GitLens&rdquo; extension for Visual Studio Code is a must-have tool. GitLens brings the power and transparency of Git directly into your development environment. This extension clearly highlights key information on each line of code: who made the changes, when they were made, and even why the changes were made with Git Blame annotations and commits.</p>
<p>With GitLens, you can effortlessly explore your project&rsquo;s history, compare branches, easily retrieve previous versions, and much more. Your understanding of Git workflow will deepen, resulting in increased development efficiency and better collaboration within the team. If you want to take your code management to the next level, look no further: install GitLens today and discover how this extension can make version control with Git more powerful and accessible than ever directly in Visual Studio Code.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">Link »</a></p>
<h2 id="live-server">Live Server</h2>
<p>&ldquo;Live Server&rdquo; is the perfect ally for any web developer looking to streamline and enhance the front-end development process. This Visual Studio Code extension gives you the ability to launch a local web server directly from your workspace, transforming your development environment into a dynamic and interactive experience.</p>
<p>With &ldquo;Live Server,&rdquo; you can instantly view changes made to your HTML, CSS, or JavaScript code in the browser without manually reloading the page. This means you can focus on coding and immediately see how your changes affect your web page.</p>
<p>Additionally, &ldquo;Live Server&rdquo; offers additional features such as page auto-refresh, the ability to view your website on mobile devices, and intelligent port management. This makes the extension an ideal companion for responsive web development and debugging.</p>
<p>If you want to make your web development workflow smoother, install &ldquo;Live Server&rdquo; today and discover how this extension simplifies your development process, saving valuable time and improving your efficiency in front-end development.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Link »</a></p>
<h2 id="material-icon-theme">Material Icon Theme</h2>
<p>Add a touch of style and visual organization to your development environment with the &ldquo;Material Icon Theme&rdquo; extension for Visual Studio Code. This extension transforms standard file and folder icons into vibrant and well-designed icons based on Google&rsquo;s popular &ldquo;Material Design.&rdquo;</p>
<p>With &ldquo;Material Icon Theme,&rdquo; you can immediately identify the type of file or folder you are looking for thanks to a complete set of clearly recognizable icons. Whether you are working on JavaScript files, HTML, CSS, images, or documentation, this extension provides an enhanced visual experience that helps you quickly find what you need in your project.</p>
<p>Furthermore, &ldquo;Material Icon Theme&rdquo; is highly customizable, allowing you to choose from different icon variants and adjust settings to suit your personal style. It&rsquo;s a simple yet powerful way to improve the look of your development environment and make it more intuitive and appealing.</p>
<p>If you want a fresh and modern view of your workspace in Visual Studio Code, install &ldquo;Material Icon Theme&rdquo; today and discover how this extension can make your development environment</p>
]]></content>
		</item>
		
		<item>
			<title>AJAX and PHP</title>
			<link>https://albertoreineri.it/en/blog/ajax-and-php/</link>
			<pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/ajax-and-php/</guid>
			<description>Would you like to execute PHP code without refreshing the page? With AJAX, you can do it!
An AJAX call is an asynchronous request sent from a web browser to a web server, using the JavaScript language. The web server can respond to the AJAX call with data in JSON, XML, or HTML format, which can then be processed by the web browser to dynamically update a part of the web page without having to reload the entire page.</description>
			<content type="html"><![CDATA[<p>Would you like to execute PHP code without refreshing the page? With AJAX, you can do it!</p>
<p>An AJAX call is an asynchronous request sent from a web browser to a web server, using the JavaScript language. The web server can respond to the AJAX call with data in JSON, XML, or HTML format, which can then be processed by the web browser to dynamically update a part of the web page without having to reload the entire page.</p>
<p>I&rsquo;ve created a video tutorial demonstrating <a href="/en/blog/sending-mails-in-php/">the email sending process I talked about in the previous guide</a> using AJAX:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/tm2IFW1WFes" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Source Code: <a href="https://github.com/albertoreineri/Send-Mail-With-AJAX-in-PHP">https://github.com/albertoreineri/Send-Mail-With-AJAX-in-PHP</a></p>
]]></content>
		</item>
		
		<item>
			<title>Send EMail in PHP</title>
			<link>https://albertoreineri.it/en/blog/send-email-in-php/</link>
			<pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/send-email-in-php/</guid>
			<description>In the era of frameworks, we often forget that we can also use the basic, pure, and simple language.
Today, let&amp;rsquo;s see how to send an email using just core PHP.
We will create a real-world example to make the operation clearer, so we&amp;rsquo;ll build a Contact Form using Bootstrap and then send an email upon submitting the form.
Source Code: https://github.com/albertoreineri/PHP-Send-Mail
Happy coding!!!</description>
			<content type="html"><![CDATA[<p>In the era of frameworks, we often forget that we can also use the basic, pure, and simple language.</p>
<p>Today, let&rsquo;s see how to send an email using just core PHP.</p>
<p>We will create a real-world example to make the operation clearer, so we&rsquo;ll build a Contact Form using Bootstrap and then send an email upon submitting the form.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/Dp51P_L5juY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Source Code: <a href="https://github.com/albertoreineri/PHP-Send-Mail">https://github.com/albertoreineri/PHP-Send-Mail</a></p>
<p>Happy coding!!!</p>
]]></content>
		</item>
		
		<item>
			<title>Qualche cambiamento</title>
			<link>https://albertoreineri.it/en/blog/qualche-cambiamento/</link>
			<pubDate>Sun, 11 Sep 2022 19:43:13 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/qualche-cambiamento/</guid>
			<description>Questo sito ne ha passate di tutti i colori! È sempre stato il mio banco di prova per testare nuove funzionalità, imparare a gestire un server web da riga di comando e infine pubblicizzare i mie servizi.
Ora è il momento di cambiare ancora!
Professionalmente non ho più bisogno di pubblicizzarmi granché. Lavoro come freelance e ho stabilito una serie di collaborazioni sufficienti per riempirmi le giornate (talvolta anche troppo 😅😅).</description>
			<content type="html"><![CDATA[<p>Questo sito ne ha passate di tutti i colori! È sempre stato il mio banco di prova per testare nuove funzionalità, imparare a gestire un server web da riga di comando e infine pubblicizzare i mie servizi.</p>
<p>Ora è il momento di cambiare ancora!</p>
<p>Professionalmente non ho più bisogno di pubblicizzarmi granché. Lavoro come freelance e ho stabilito una serie di collaborazioni sufficienti per riempirmi le giornate (talvolta anche troppo 😅😅).</p>
<p>Quindi è giunta l&rsquo;ora di associare il mio nome non solamente alla mia attività di Web Developer.</p>
<p>Nel mondo di oggi viviamo di etichette, specialmente online! Le persone vengono identificate in base a ciò che fanno! C&rsquo;è quello che viaggia, quello che parla di tecnologia, quello che vive in camper etc…</p>
<p>Personalmente lo trovo molto riduttivo! La vita non si può rinchiudere dentro una singola etichetta, almeno non la mia!</p>
<p>Se mi guardo indietro sono stato meccanico di bici, agente immobiliare, programmatore, insegnante e libero professionista. Questo per quanto riguarda il lavoro. Poi ho suonato in diverse band, amo andare in bici, ho due moto e un camper e così via…. La mia vita non può essere rinchiusa in un singolo argomento, e non voglio farlo.</p>
<p>Per un momento ho pensato di chiudere questo sito, chiudere tutto, dedicarmi al mio lavoro e alle mie passioni nella mia vita privata, senza pubblicare nulla.</p>
<p>Però mi piace scrivere! E non ho molte occasioni per farlo, a parte la scrittura del codice…</p>
<p>Quindi ho deciso di trasformare questo sito web da sito vetrina a sito personale, un blog vecchia maniera, forse obsoleto nell&rsquo;era social, ma più intimo e personale.</p>
<p>Nel tempo ho realizzato una serie di guide sullo sviluppo web per aiutare giovani aspiranti Web Developer, e alcune sono state lette da migliaia di persone portandomi in prima pagina su google. Tutto questo rimarrà e continuerà, però non sarà l&rsquo;unico tipo di contenuto presente su questo sito.</p>
<p>Ci sarà tutto ciò che voglio che ci sia! Si, può sembrare egoistico, però sito mio argomenti miei!</p>
<p>Diventerà quindi il mio giardino digitale, dove potrò fermarmi talvolta e scrivere con calma di ciò che mi va, di ciò che mi piace, senza per forza dover parlare di programmazione.</p>
<p>Vi presento quindi il mio nuovo sito! È molto semplice, niente effetti wow!</p>
<p>Per lavoro passo intere giornate a sviluppare effetti e animazioni, ma per questo sito ho voluto pensare al mondo analogico! È un foglio di carta con del testo sopra, nien&rsquo;altro.</p>
<p>Se vuoi seguire i miei articoli puoi iscriverti alla <a href="/iscriviti-alla-newsletter/">Newsletter</a>! L&rsquo;ho aperta qualche tempo fa ed è stata apprezzata dagli utenti.</p>
<p>Buona lettura!</p>
]]></content>
		</item>
		
		<item>
			<title>8 consigli sulla produttività per sviluppatori e programmatori</title>
			<link>https://albertoreineri.it/en/blog/8-consigli-sulla-produttivit%C3%A0-per-sviluppatori-e-programmatori/</link>
			<pubDate>Fri, 22 Jul 2022 07:42:48 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/8-consigli-sulla-produttivit%C3%A0-per-sviluppatori-e-programmatori/</guid>
			<description>Non è facile mantenere la produttività da sviluppatori. È un lavoro mentalmente stressante che può esaurire rapidamente la mente e richiede molta attenzione. Capire come puoi concentrarti sul tuo lavoro, prendere scorciatoie usando l&amp;rsquo;automazione e gestire le distrazioni può aiutarti molto a ottenere il massimo dal tuo orario di lavoro. In questa raccolta, puoi trovare i migliori suggerimenti sulla produttività per sviluppatori e programmatori, dalla ricerca dei migliori strumenti per sviluppatori alle pause regolari fino all&amp;rsquo;eliminazione delle distrazioni durante il lavoro.</description>
			<content type="html"><![CDATA[<p>Non è facile mantenere la produttività da sviluppatori. È un lavoro mentalmente stressante che può esaurire rapidamente la mente e richiede molta attenzione. Capire come puoi concentrarti sul tuo lavoro, prendere scorciatoie usando l&rsquo;automazione e gestire le distrazioni può aiutarti molto a ottenere il massimo dal tuo orario di lavoro. In questa raccolta, puoi trovare i migliori suggerimenti sulla produttività per sviluppatori e programmatori, dalla ricerca dei migliori strumenti per sviluppatori alle pause regolari fino all&rsquo;eliminazione delle distrazioni durante il lavoro.</p>
<h3 id="1-trova-il-miglior-editor-di-codice">1. TROVA IL MIGLIOR EDITOR DI CODICE</h3>
<p>La produttività degli sviluppatori inizia con un buon editor di codice. Sebbene ci siano molte ottime opzioni sul mercato, è difficile dire quale sia la migliore: tutto dipende dai tuoi obiettivi e dalle tue esigenze. Vale la pena provare <a href="/blog/5-migliori-editor-di-testo-per-sviluppatori">diversi editor di testo</a> per vedere quale si adatta meglio al tuo flusso di lavoro. Ecco alcune cose importanti da tenere in considerazione:</p>
<ul>
<li>Quale/i linguaggio/i di programmazione stai utilizzando. Hai bisogno di un editor di codice che offra l&rsquo;evidenziazione della sintassi per i linguaggi di cui hai bisogno (almeno come plug-in). Alcuni editor di codice sono inoltre dotati di evidenziatori di sintassi per tecnologie popolari come React, non solo per linguaggi di programmazione.</li>
<li>Se l&rsquo;editor di codice scelto ha un tema adeguato e un ecosistema di plug-in che fornisce le funzionalità di cui hai bisogno (ad esempio, un tema ad alto contrasto se hai problemi di vista).</li>
<li>Se affidi il tuo lavoro a una piattaforma di condivisione del codice, come GitHub o Bitbucket, potresti trovare utile la funzionalità <a href="/blog/come-usare-git/">Git integrata</a>. Ad esempio, Visual Studio Code ti consente di eseguire il commit direttamente del tuo lavoro su GitHub senza uscire dall&rsquo;editor.</li>
<li>Se desideri utilizzare i tuoi frammenti di codice e/o le scorciatoie da tastiera, è anche una buona idea scegliere un editor di codice che ti consenta di aggiungerli o importarli.</li>
</ul>
<h3 id="2-inizia-ogni-giorno-con-il-compito-più-difficile">2. INIZIA OGNI GIORNO CON IL COMPITO PIÙ DIFFICILE</h3>
<p>È facile perdersi nelle attività quotidiane e anche la procrastinazione è un&rsquo;abitudine comune degli sviluppatori, soprattutto se <a href="/10-consigli-per-freelance-e-liberi-professionisti/">lavori come libero professionista</a>e devi gestire le tue scadenze. Pertanto, capita spesso di lavorare tutto il giorno e alla fine della giornata ti rendi conto di aver fatto a malapena qualcosa. Puoi evitarlo se, invece del multitasking, crei una gerarchia di attività quotidiane e inizi con l&rsquo;attività più difficile ogni giorno.</p>
<p>Sebbene il multitasking sia stato visto come una cosa positiva per molti anni, si è scoperto che non è adatto alla maggior parte delle persone. <a href="https://www.forbes.com/sites/lisaquast/2017/02/06/want-to-be-more-productive-stop-multi-tasking">La ricerca ha dimostrato</a> che solo il 2% della popolazione è bravo nel multitasking, mentre il resto può subire una perdita di produttività fino al 40%. Quindi, se sei nel 2% continua con il multitasking, altrimenti dai la priorità alle tue attività e concentrati solo su una cosa alla volta.</p>
<h3 id="3-fai-delle-pause-regolarmente">3. FAI DELLE PAUSE REGOLARMENTE</h3>
<p>Gli esseri umani non possono concentrarsi sulla stessa cosa per un tempo illimitato e questo è particolarmente vero per il duro lavoro mentale della programmazione. Puoi trovare diversi studi sul limite di tempo in cui le persone possono concentrarsi su un&rsquo;attività senza che la loro mente si allontani da qualcos&rsquo;altro. Ad esempio, <a href="http://naturalhealthcare.ca/glossaries.phtml?term=sustained+attention#.XgqCCPx7nIU">questo studio</a> afferma che l&rsquo;attenzione prolungata è possibile per circa 45 minuti, mentre <a href="https://www.theatlantic.com/business/archive/2014/09/science-tells-you-how-many-minutes-should-you-take-a-break-for-work-17/380369/">un altro</a> menziona 52 minuti consecutivi seguiti da una pausa di 17 minuti.</p>
<p>Poi, abbiamo la famosa <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Tecnica del Pomodoro</a> che utilizza un timer da cucina a forma di pomodoro per misurare il tempo. Funziona con intervalli di tempo di 25 minuti con pause brevi di 5 minuti e pause lunghe di 10 minuti. La tecnica Pomodoro è diventata così popolare tra la comunità degli sviluppatori che ci sono persino <a href="https://tomato-timer.com/">app Pomodoro</a> che puoi usare mentre lavori.</p>
<p>Tutto sommato, non esiste una regola d&rsquo;oro qui e ognuno ha un limite di tempo diverso, quindi dovrai sperimentare un po&rsquo; per scoprire cosa funziona meglio per te. Inoltre, non vale la pena seguire una regola molto rigida: se sei già nel flusso, non interrompere il tuo lavoro solo perché è arrivato il momento della pausa.</p>
<p>Tuttavia, c&rsquo;è una cosa importante da ricordare. La pausa deve essere una vera pausa quando ti alzi dalla scrivania. Controllare e-mail, notifiche Slack, social media, blog o semplicemente fissare qualsiasi tipo di schermo non conta come una pausa per il tuo cervello: ogni singola ricerca sull&rsquo;argomento lo afferma come un dato di fatto.</p>
<h3 id="4-pianifica-le-tue-attività-in-anticipo">4. PIANIFICA LE TUE ATTIVITÀ IN ANTICIPO</h3>
<p>La pianificazione delle attività in anticipo può anche aumentare notevolmente la produttività. Puoi creare elenchi di attività e controllare le attività completate utilizzando <a href="https://www.developerdrive.com/creating-a-simple-to-do-application-part-1/">To Do app</a> come <a href="https://www.wunderlist.com/">Wunderlist</a> e <a href="https://todoist.com/">Todoist</a> o impostare flussi di lavoro con un&rsquo;app come <a href="https://trello.com/">Trello</a> . Al giorno d&rsquo;oggi, ci sono anche molte fantastiche opzioni che ti consentono di integrare diversi strumenti di produttività, come <a href="https://zapier.com/">Zapier</a> e <a href="https://ifttt.com/">IFTTT</a> (If This Then That).</p>
<p>Con la pianificazione delle attività, dovrai anche condurre alcuni esperimenti e pensare al tipo di strumenti di cui avrai veramente bisogno. Puoi sicuramente utilizzare più di un&rsquo;app per gestire le attività, tuttavia può diventare dispersivo utilizzare troppi strumenti contemporaneamente. In alcuni casi, un&rsquo;eccessiva complessità può persino portare a una perdita di produttività.</p>
<h3 id="5-tieni-traccia-delle-tue-ore-di-lavoro">5. TIENI TRACCIA DELLE TUE ORE DI LAVORO</h3>
<p>Sebbene non a tutti piaccia tenere traccia delle proprie ore di lavoro, utilizzare un&rsquo;app di monitoraggio del tempo può aiutare molto in caso di problemi con la gestione del tempo. Il monitoraggio del tempo può aumentare la tua produttività principalmente perché puoi vedere come hai trascorso le ore durante il giorno in modo da poter escludere possibili distrazioni. I cronometri possono anche essere una manna dal cielo se sei un libero professionista, poiché ti aiutano a fatturare i tuoi clienti su base oraria.</p>
<h3 id="6-automatizza-le-attività-ripetitive">6. AUTOMATIZZA LE ATTIVITÀ RIPETITIVE</h3>
<p>L&rsquo;automazione delle attività ripetitive è un must in questi giorni come sviluppatore. Non è una coincidenza che DevOps (l&rsquo;intersezione di sviluppo e operazioni) sia di gran moda di recente. Non avrai bisogno di molta automazione nella fase di sviluppo, tuttavia, rendere il tuo codice di sviluppo pronto per la produzione comporta molte attività ripetitive.</p>
<p>Ad esempio, come sviluppatore frontend, puoi utilizzare un task runner per eseguire automaticamente attività di routine sul tuo codice, come minimizzazione, ottimizzazione delle immagini e altro. Abbiamo un articolo recente sui <a href="/blog/6-migliori-tool-per-sviluppo-frontend">migliori strumenti di compilazione per sviluppatori frontend</a> , ma ci sono anche molte ottime opzioni per la programmazione backend che vale la pena dare un&rsquo;occhiata.</p>
<h3 id="7-utilizzare-la-riga-di-comando">7. UTILIZZARE LA RIGA DI COMANDO</h3>
<p>Oltre ad automatizzare le attività, è anche una buona idea prendere l&rsquo;abitudine di utilizzare la riga di comando nel flusso di lavoro quotidiano. Innanzitutto, puoi velocizzare notevolmente il tuo flusso di lavoro se utilizzi una CLI (Command Line Interface) invece di una GUI (Graphical User Interface). Ad esempio, ecco un tutorial su come <a href="/blog/usare-la-riga-di-comando-con-wordpress-grazie-a-wp-cli">configurare la CLI di WordPress</a> per accelerare lo sviluppo e la manutenzione di WordPress. In secondo luogo, l&rsquo;uso sicuro dei comandi CLI è un&rsquo;abilità di programmazione importante che puoi utilizzare in molte altre aree del tuo lavoro.</p>
<h3 id="8-elimina-le-distrazioni">8. ELIMINA LE DISTRAZIONI</h3>
<p>Le distrazioni sono il più grande nemico della produttività, quindi è necessario trovare un modo per eliminarle il più possibile. Sfortunatamente, hanno una natura subdola, quindi non è affatto facile catturarli. Ciò è dovuto principalmente al fatto che molte volte non sembrano prima una distrazione.</p>
<p>Ad esempio, controllare la posta elettronica ogni ora, guardare un nuovo tutorial video su YouTube o chattare con i colleghi su Slack possono essere visti come attività legate al lavoro, ma se ci dedichi troppo tempo, potresti scoprire che non hai ottenuto così tanto entro la fine della giornata.</p>
<p>Quindi, devi stare molto attento alle distrazioni e prendere precauzioni ovunque puoi. Ad esempio, puoi decidere di controllare le tue e-mail solo due volte al giorno, disattivare le notifiche Slack mentre lavori o bloccare i siti Web che distraggono frequentemente durante il lavoro.</p>
<h3 id="conclusione">CONCLUSIONE</h3>
<p>Se segui questsi suggerimenti sulla produttività o almeno alcuni di essi, puoi utilizzare il tuo orario di lavoro in modo più efficiente e allo stesso tempo migliorare il tuo flusso di lavoro e di sviluppo. Sebbene prendere una nuova abitudine all&rsquo;inizio possa essere difficile, diventa rapidamente una seconda natura.</p>
<p>Ricorda che la sperimentazione è l&rsquo;elemento chiave della produttività. Se provi una tecnica o uno strumento che non funziona per te, abbandonalo e passa a quello successivo, finché non trovi quello che si adatta meglio al tuo flusso di lavoro e alla tua personalità.</p>
<p>E, se hai bisogno di altri suggerimenti unici per sviluppatori e programmatori, non perdere il nostro articolo su <a href="/blog/come-scegliere-quale-linguaggio-di-programmazione-imparare">come scegliere quale linguaggio di programmazione imparare</a> .</p>
<p>{{- /* This comment removes trailing newlines. */ -}}</p>
]]></content>
		</item>
		
		<item>
			<title>The 5 Best Cross-Platform Code Editors for Web Developers</title>
			<link>https://albertoreineri.it/en/blog/the-5-best-cross-platform-code-editors-for-web-developers/</link>
			<pubDate>Mon, 18 Jul 2022 12:37:13 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/the-5-best-cross-platform-code-editors-for-web-developers/</guid>
			<description>Text editors are arguably the most crucial tools for web developers. Finding one that fits your workflow, aligns with your goals, and provides all the features you need can save you a lot of time and significantly enhance the quality of your code.
In this article, I&amp;rsquo;ll showcase the five best cross-platform code editors for web developers. All of them work on the three major operating systems—Windows, Linux, and macOS. The features you need will largely depend on your working style, coding expertise, and the type of work you need to accomplish.</description>
			<content type="html"><![CDATA[<p>Text editors are arguably the most crucial tools for web developers. Finding one that fits your workflow, aligns with your goals, and provides all the features you need can save you a lot of time and significantly enhance the quality of your code.</p>
<p>In this article, I&rsquo;ll showcase the five best cross-platform code editors for web developers. All of them work on the three major operating systems—Windows, Linux, and macOS. The features you need will largely depend on your working style, coding expertise, and the type of work you need to accomplish. You might have one go-to editor for everything, but many developers use different code editors for different tasks.</p>
<p>Now, let&rsquo;s explore the five best cross-platform code editors for web developers.</p>
<h2 id="1-atom1">1. <a href="https://atom.io/">ATOM</a></h2>
<p><img src="https://example.com/path/to/atom.jpeg" alt="Atom"></p>
<p>Atom is a free and open-source code editor created by GitHub. Originally GitHub&rsquo;s in-house text editor, Atom was released to the public in 2014. With many advanced features, it quickly became one of the most popular code editors.</p>
<p>Its exceptionally well-designed user interface allows you to split the interface into different panes for easy comparison of different files. Atom includes essential features that can significantly enhance your development workflow, such as a built-in package manager, intelligent autocomplete, file system navigation, an easy-to-use find-and-replace function, and more.</p>
<p>Atom also boasts thousands of <a href="https://atom.io/packages">packages</a> and <a href="https://atom.io/themes">themes</a>, many of which are created by third-party developers. For instance, <a href="https://teletype.atom.io/">Teletype</a>, its latest package developed by the core team, enables real-time collaboration for developers needing a reliable tool for pair programming or social coding.</p>
<p><strong>Pros:</strong></p>
<ul>
<li>Diverse customization options</li>
<li>Built-in package manager</li>
<li>Easy-to-install packages</li>
<li>Git integration</li>
<li>Open source and free</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li>Startup time can be slow at times</li>
<li>Occasional performance issues (may slow down the system)</li>
</ul>
<h2 id="2-visual-studio-code5">2. <a href="https://code.visualstudio.com/">VISUAL STUDIO CODE</a></h2>
<p><img src="https://example.com/path/to/visual-studio-code.jpeg" alt="Visual Studio Code"></p>
<p>Visual Studio Code is Microsoft&rsquo;s cross-platform source code editor that works on all major operating systems. Interestingly, Visual Studio Code was built on the open-source components of Atom, but Microsoft removed some features and added new ones. It&rsquo;s also faster than Atom, both at startup and during execution. Visual Studio Code is fully customizable, and you can find many different themes and plugins in the <a href="https://marketplace.visualstudio.com/vscode">official marketplace</a>. You can easily install them from the editor and start using them right away.</p>
<p>Visual Studio Code has many fantastic features that can significantly improve your development workflow. Probably the most notable is the <em>IntelliSense</em> autocomplete feature, providing a list of intelligent suggestions as you code. Visual Studio Code also has an excellent built-in debugger that allows you to debug directly from the editor. Additionally, it supports Git by default, with a separate Git view where you can execute various Git commands.</p>
<p><strong>Pros:</strong></p>
<ul>
<li>User-friendly marketplace and pleasant extension ecosystem</li>
<li>Integrated Git support</li>
<li>IntelliSense autocomplete feature</li>
<li>Built-in debugger</li>
<li>Highly customizable</li>
<li>Free and open source</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li>Confusing branding (unrelated to Visual Studio)</li>
</ul>
<h2 id="3-brackets7">3. <a href="http://brackets.io/">BRACKETS</a></h2>
<p><img src="https://example.com/path/to/brackets.jpeg" alt="Brackets"></p>
<p>Brackets was specifically created for web designers and front-end developers by Adobe Systems. It can be the ideal source code editor for you if you primarily work on front-end tasks (HTML, CSS, JavaScript). One of its most outstanding features is that it allows you to establish a real-time connection with Google Chrome. This means you can immediately see the changes you&rsquo;re making in the browser.</p>
<p>While you can split the editor into vertical or horizontal panes for side-by-side coding, Brackets also introduces the practical <em>inline editing</em> feature. For example, if you select a specific CSS ID with the cursor, you can open the inline editor by pressing Ctrl + E (on Windows) or Cmd + E (on Mac). Brackets will then show you all selectors belonging to that ID within an inline window. Brackets also supports Sass and LESS, allowing you to use them alongside inline editing and live preview features.</p>
<p><strong>Pros:</strong></p>
<ul>
<li>Preprocessor support</li>
<li>Visual tools for front-end development</li>
<li>Lightweight (only 40 MB)</li>
<li>Syncs with the browser (via Live Preview feature)</li>
<li>Open source and free</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li>Confusing extension management (e.g., no filtering option in the registry)</li>
<li>Fewer extensions and themes compared to other code editors</li>
<li>Not suitable for working with backend languages (e.g., PHP, Python, Ruby, or WordPress)</li>
</ul>
<h2 id="4-sublime-text8">4. <a href="https://www.sublimetext.com/">SUBLIME TEXT</a></h2>
<p><img src="https://example.com/path/to/sublime-text.jpeg" alt="Sublime Text"></p>
<p>Sublime Text is currently in its third major version (Sublime Text 3) and is a rather popular text editor within the web developer community. It&rsquo;s not free, but it comes with a free trial. For continued use, you need to purchase a license for $80. However, Sublime Text doesn&rsquo;t restrict you if you don&rsquo;t, it just occasionally displays a pop-up prompt asking you to buy the license.</p>
<p>One of Sublime Text&rsquo;s most interesting features is the <strong>Goto Anything</strong> command, which you can activate by pressing the keyboard shortcut <kbd>Ctrl</kbd>+<kbd>P</kbd>. You can quickly open files or jump to specific words, lines, or symbols. Sublime Text also provides you with a sophisticated command palette through which you can easily access various features like checking key bindings or switching to another color scheme.</p>
<p>Moreover, it allows multiple selections and split edits and has an extensive <a href="https://packagecontrol.io/">package ecosystem</a>. Packages can be installed using the Sublime Text package manager via the command palette.</p>
<p><strong>Pros:</strong></p>
<ul>
<li>Goto Anything and Multiple Selection features</li>
<li>Distraction-free mode</li>
<li>Instant project switch</li>
<li>Advanced package ecosystem</li>
<li>Excellent performance on any platform (outperforms all other source code editors)</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li>Not free</li>
<li>Not easy to integrate with Git</li>
</ul>
<h2 id="5-light-table10">5. <a href="http://lighttable.com/">LIGHT TABLE</a></h2>
<p><img src="https://example.com/path/to/light-table.jpeg" alt="Light Table"></p>
<p>Light Table started as a <a href="https://www.kickstarter.com/projects/ibdknox/light-table">Kickstarter campaign</a> in 2012 and managed to raise over $300,000. It works on all major operating</p>
<p>systems, including Windows, Linux, and macOS, although the installation process currently requires <a href="https://github.com/LightTable/LightTable/blob/master/README.md#downloads">some additional steps</a> for OS X users. Light Table has a sleek and minimalist user interface that removes all clutter but still provides a command palette and a blurred-out seeker. It&rsquo;s written in ClojureScript and currently supports HTML, CSS, JavaScript, Python, Clojure, and ClojureScript.</p>
<p>With Light Table, you can easily perform inline evaluation within your code, meaning you don&rsquo;t have to use the console when you want to see results. The <strong>watches</strong> feature allows you to track any important values within your code. Additionally, Light Table also lets you embed anything your project needs, such as charts, games, and visualizations. Light Table has a built-in plugin manager (accessible from the <em>View &gt; Plugin Manager</em> menu), with a good selection of plugins.</p>
<p><strong>Pros:</strong></p>
<ul>
<li>Inline evaluation and watches</li>
<li>Embed any functionality</li>
<li>Powerful plugin manager</li>
<li>Highly customizable</li>
<li>Fast and tidy interface</li>
<li>Free and open source</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li>Currently no built-in PHP support, so WordPress development requires some additional steps (you can use this <a href="https://github.com/thierrymarianne/LightTable-PHP">PHP plugin</a>, for example)</li>
</ul>
<h2 id="next-steps">Next Steps</h2>
<p>In addition to choosing the code editor that best suits your needs, you might also want to explore other web development tools. In that case, check out our article on <a href="http://www.developerdrive.com/2018/01/9-best-free-cloud-ides/">the best cloud IDEs</a> or take a look at our <a href="http://www.developerdrive.com/2015/02/essential-tools-for-modern-web-development/">collection of essential tools</a> recommended for modern web development.</p>
]]></content>
		</item>
		
		<item>
			<title>Miglior portatile per programmare</title>
			<link>https://albertoreineri.it/en/blog/miglior-portatile-per-programmare/</link>
			<pubDate>Mon, 11 Jul 2022 19:50:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/miglior-portatile-per-programmare/</guid>
			<description>Una delle domande che mi fate più spesso è proprio questa: Ma qual è il miglior portatile per programmare?
Ebbene la capisco perché non è una scelta facile! Il mercato ci offre un mare di possibilità differenti fra loro, inoltre spesso si tratta di una spesa corposa quindi vogliamo scegliere un prodotto che possa durarci un bel po&amp;rsquo; di anni.
In questo articolo provo ad esporvi il mio punto di vista e darvi una risposta alla fatidica domanda:</description>
			<content type="html"><![CDATA[<p>Una delle domande che mi fate più spesso è proprio questa: Ma qual è il miglior portatile per programmare?</p>
<p>Ebbene la capisco perché non è una scelta facile! Il mercato ci offre un mare di possibilità differenti fra loro, inoltre spesso si tratta di una spesa corposa quindi vogliamo scegliere un prodotto che possa durarci un bel po&rsquo; di anni.</p>
<p>In questo articolo provo ad esporvi il mio punto di vista e darvi una risposta alla fatidica domanda:</p>
<p class="has-text-align-center has-medium-font-size">
  <em><strong>Qual è il miglior notebook per sviluppatori???</strong></em>
</p>
<h2 id="budget">Budget</h2>
<p>La primissima cosa da valutare nella scelta è il budget disponibile. Qua possiamo iniziare a fare due macro distinzioni: sopra i <strong>1.000</strong> euro oppure sotto.</p>
<p>Se stai pensando di spendere meno di mille euro allora la scelta obbligata è andare su un pc Windows.</p>
<p>Il mio consiglio è di scegliere almeno un pc con processore core i5 e 8 Gb di RAM (non ho esperienza diretta sugli AMD Ryzen ma ne parlano molto bene).</p>
<p>Puoi trovare qualcosa di decente che può fare bene il suo lavoro senza grosse pretese. Per fare Sviluppo Web base, semplici siti in WordPress o Core PHP, facendoli girare su XAMPP o LocalWP, queste specifiche dovrebbero andare abbastanza bene.</p>
<p>Se però puoi avvicinarti alla soglia dei 1.000 euro allora sappi che puoi anche accaparrarti il nuovo Macbook Air con M1 a circa 900 euro, se trovi l&rsquo;offerta giusta!</p>
<p>E qua si apre l&rsquo;altro grande discorso:</p>
<h2 id="windows-oppure-mac">Windows oppure Mac???</h2>
<p><a href="/blog/windows-vs-mac-per-sviluppo-web-la-mia-esperienza/">L&rsquo;eterna faida</a> senza fine dei due sistemi operativi! Quale sarà migliore??? La risposta è che <strong>DIPENDE</strong>…</p>
<p>Certo questo complica le cose, ma la vita non è mai solo bianca o nera, le cose sono sempre più complicate di così…</p>
<h2 id="windows">Windows</h2>
<p>Con Windows si hanno, a parer mio, un sacco di vantaggi e pochi svantaggi (Spoiler alert!!! Io uso Mac).</p>
<p>Personalmente ho lavorato per moltissimi anni su Windows, e mi sono sempre trovato bene. I dispositivi hanno prezzi accettabili, si possono installare migliaia e migliaia di programmi e ci si può anche giocare!</p>
<p>Se dovessi scegliere di avere una sola macchina, allora credo prorpio che andrei su un laptop da gaming di alta gamma. È vero che la batteria non è granché su quei dispositivi, però hanno tutto ciò che conta realmente: processore, ram, SSD e scheda video belli grossi e performanti. Farei un dual boot con Ubuntu e voilà, avrei tutto. Lavoro, giochi, cazzeggio…. Potrei fare praticamente tutto ciò che mi serve.</p>
<p>L&rsquo;unica cosa infattibile è realizzare app per iOS, ma personalmente non me ne occupo.</p>
<p>Insomma, Windows è il giusto compromesso fra tutto. Per programmare fa un po&rsquo; schifo ma posso installarci su una distro linux e così si risolve tutto!</p>
<p>Ah, se programmi con linguaggi e framwork semplici, allora non preoccuparti, puoi fare tutto su Windows. Se però inizi ad affacciarti a framework più complessi (Symfony per esempio) o vuoi imparare un po&rsquo; di web server, allora ti consiglio di buttarti sul mondo linux e entrare anche tu nel mondo del pinguino, ma attento, una volta entrati diventa quasi una droga dalla quale è difficile uscire ???.</p>
<h2 id="mac">Mac</h2>
<p>Come già detto precedentemente, io ho scelto di usare Mac. Ma perché visto che Windows tutto sommato non è così male?</p>
<p>Bè, perché credo che Mac sia meglio! Soprattutto dal punto di vista della produttività.</p>
<p>Se mi occupassi solamente di programmazione e scrivessi codice fulltime, allora andrei sicuramente su Linux (Pop!_OS mi sta piacendo molto di recente), ma sto tirando su la mia attività e devo fare un po&rsquo; di tutto, dalla gestione dei clienti, alla contabilità, a qualche lavoretto di design. Inoltre ho una grande passione per la musica e la scrittura, e molti software che utilizzo non ci sono per Linux e alcuni nemmeno per Windows (Logic Pro)…</p>
<p>Inoltre se i pc windows puntano tutto sulla potenza dei componenti, Mac ha un approccio diverso, mira all&rsquo;esperienza generale nell&rsquo;uso del laptop. Il mio Macbook Pro è bello! Basta prenderlo in mano per essere felici di iniziare a lavorare, il che non è poco.</p>
<p class="has-text-align-center">
  <strong><em>Ma non finisce qui!</em></strong>
</p>
<p>È silenzioso, il trackpad è una figata (non ha proprio paragoni con i concorrenti), lo schermo è meraviglioso, la tastiera va alla grande ed è veramente fluido e scattante. Ah, quasi dimenticavo, non si riavvia quando vuole lui per installarmi aggiornamenti di cui non sapevo niente, anche su questo Mac è tutta un&rsquo;altra cosa.</p>
<p>Alcuni potrebbero ribattere che esistono Notebook Windows con schermi altrettanto belli, batterie capienti, tastiere fantastiche e grandi velocità, il che è vero! Ma il trackpad secondo me è assolutamente imbattibile e mi rende veramente molto produttivo, inoltre questi concorrenti Windows arrivano ad avere gli stessi prezzi del Mac, quindi alla fine io prenderei sempre un Mac. Una Toyota top di gamma può arrivare a costare come una Porche, ma fra le due sceglierei sempre la Porche! Siamo umani e il cuore vuole la sua parte!</p>
<h2 id="conclusione">Conclusione</h2>
<p>Quindi??? Facciamola breve:</p>
<ul>
<li>Budget 600-900 euro: Laptop Windows</li>
<li>Budget 900-1.200: Macbook M1</li>
<li>Budget Superiore ai 1.500: Macbook Pro o Laptop Windows Top di gamma</li>
</ul>
<p>Voilà, più sintetico di così si muore!</p>
<p>Un&rsquo;altra piccola cosa, su Windows è difficile scegliere a causa dell&rsquo;enorme quantità di marchi. Come qualità costruttiva mi sentirei di consigliare Lenovo o Dell, sicuramente i migliori. Sento parlare bene anche di alcuni modelli HP ultimamente ma non ci ho mai messo le mani… Se invece cercate qualcosa del tipo “<em>poca spesa tanta resa</em>” allora potete andare su ASUS, ma non dovrete fare troppo caso alla qualità costruttiva.</p>
<p>Bene, spero che questo articolo possa esserti di aiuto! Se vuoi qualche consiglio in più scrivimi pure nei commenti, cercherò di risponderti il più presto possibile.</p>
]]></content>
		</item>
		
		<item>
			<title>I migliori temi per Visual Studio Code</title>
			<link>https://albertoreineri.it/en/blog/i-migliori-temi-per-visual-studio-code/</link>
			<pubDate>Mon, 04 Jul 2022 21:26:57 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/i-migliori-temi-per-visual-studio-code/</guid>
			<description>Lavorare in un ambiente piacevole è fondamentale per la produttività. Visual Studio code ultimamente sta guadagnando sempre più popolarità, e se mi segui saprai già che è il mio editor preferito! Vediamo oggi quali sono i miei temi preferiti per Visual Studio Code, sia chiari che scuri!
Nel 2019 Visual Studio Code (VSCode) è stato l&amp;rsquo;editor di testo più utilizzato dagli sviluppatori secondo, con il 50% degli 87.317 intervistati che lo utilizzano.</description>
			<content type="html"><![CDATA[<p>Lavorare in un ambiente piacevole è fondamentale per la produttività. Visual Studio code ultimamente sta guadagnando sempre più popolarità, e se mi segui saprai già che è il mio editor preferito! Vediamo oggi quali sono i miei temi <a href="/blog/software-per-sviluppo-web/">preferiti</a> per Visual Studio Code, sia chiari che scuri!</p>
<p>Nel 2019 <a href="https://code.visualstudio.com/">Visual Studio Code</a> (VSCode) è stato l&rsquo;editor di testo più utilizzato dagli sviluppatori secondo, con il 50% degli 87.317 intervistati che lo utilizzano. Questo è stato un grande passo avanti dopo essere stato classificato al 13° posto tra gli strumenti di sviluppo popolari su Stackoverflow.</p>
<p>VSCode dispone di un velocissimo editor di codice sorgente, ideale per l&rsquo;uso quotidiano. Con il supporto per centinaia di linguaggi di programmazione diversi, tra cui C++, Java, Javascript, JSON, Julia, PHP etc. migliora la tua produttività con la corrispondenza delle parentesi, la selezione dei riquadri, l&rsquo;evidenziazione della sintassi, l&rsquo;indentazione automatica e altro ancora.</p>
<p>Tuttavia, con oltre 5.000 temi tra cui scegliere, può essere scoraggiante trovare il migliore per te. Se stai cercando i migliori temi VSCode da provare, ecco a te i miei preferiti!</p>
<h2 id="anc-0.wp-block-heading"><strong>Come installare temi in Visual Studio Code</strong></h2>
<p>Puoi installare temi in Visual Studio Code in due modi principali. Puoi visitare il Marketplace e selezionare il tema che desideri scaricare, oppure puoi cercare in VSCode IDE.</p>
<h3 id="metodo-1-marketplace">Metodo 1: <strong>Marketplace</strong></h3>
<p>1: Visita il <a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noreferrer noopener">Marketplace</a> e seleziona il tema che desideri scaricare. In VSCode, fai clic su File&gt;Preferenze&gt;Tema colore per aprire il selettore Tema colore sul tuo PC Windows. Se sei su macOS, fai clic su Code&gt;Preferenze&gt;Tema colore</p>
<p>Puoi anche aprire il selettore usando la scorciatoia da tastiera “Ctrl+K Ctrl+T”.</p>
<p>2: Usa i tasti cursore per scorrere e visualizzare in anteprima i colori del tema</p>
<p>3: Seleziona il tema che desideri e premi “Invio” sulla tastiera<figure class="wp-block-image"></p>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/1-how-to-install-vscode-themes-from-marketplace.png" alt="" class="wp-image-1588" /> </figure></p>
<h3 id="metodo-2-ricerca-in-vscode">Metodo 2: ricerca in VSCode</h3>
<p>In alternativa, puoi installare un tema cercandolo dentro VSCode. Dall&rsquo;icona <a href="https://www.tabnine.com/blog/top-42-free-vscode-extensions/" target="_blank" rel="noreferrer noopener">Estensioni</a> sul lato sinistro di VSCode, cerca il tema richiesto e fai clic su Installa.<figure class="wp-block-image"></p>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/2-how-to-install-vscode-themes-in-ide-1024x576.jfif" alt="" class="wp-image-1590" /> </figure></p>
<h2 id="anc-1.wp-block-heading"><strong>I migliori temi scuri per VSCode</strong></h2>
<p>Se non vuoi farti male agli occhi usando un tema chiaro tutto il giorno, un tema scuro è sicuramente consigliato per la tua vista. Sebbene VSCode abbia un tema Dark+ predefinito, potrebbe non essere il tuo preferito… Magari desideri un mix di colori e sfumature diversi. </p>
<p>Ecco i migliori temi oscuri per VSCode:</p>
<h3 id="one-dark-profigure-classwp-block-image"><strong>One Dark Pro</strong><figure class="wp-block-image"></h3>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/3-one-dark-pro-1024x861.png" alt="" class="wp-image-1591" /> </figure></p>
<p>One Dark Pro è il tema VSCode più popolare e ampiamente scaricato con quasi 4 milioni di installazioni. Si basa sul tema One Dark di Atom ed è adatto per gli sviluppatori che amano i temi in modalità oscura. Ha combinazioni ben miscelate e colori di evidenziazione della sintassi molto <em>cool</em> che lo rendono visivamente accattivante. </p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">Scarica One Dark pro</a></p>
<h3 id="dracula-officialfigure-classwp-block-image"><strong>Dracula Official</strong><figure class="wp-block-image"></h3>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/4-dracula-official-screenshot-989x1024.png" alt="" class="wp-image-1592" /> </figure></p>
<p>Creato da Zeno Rocha, Dracula Official è un tema scuro per VSCode e altre oltre 181 app. Ha download in tutto il mondo con oltre 2 milioni di utenti e ha ricevuto una valutazione media di 4,9 da 81 revisori. Vanta fantastiche combinazioni di colori e contrasti per migliorare la tua produttività.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula">Scarica Dracula ufficiale</a></p>
<h3 id="darculafigure-classwp-block-image"><strong>Darcula</strong><figure class="wp-block-image"></h3>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/5-darcula-screenshot-1024x760.png" alt="" class="wp-image-1594" /> </figure></p>
<p>Se hai utilizzato gli IDE Jetbrains e Android Studio, ti sei sicuramente imbattuto nel tema Darcula. Sebbene sia facile confondere Dracula Official con il Darcula, quest&rsquo;ultimo offre una combinazione di colori accuratamente scuri per oltre 195+ app, editor di codice ed emulatori di terminale, incluso VSCode. </p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=rokoroku.vscode-theme-darcula">Scarica il tema Darcula</a></p>
<p>### <strong>Synthwave &lsquo;84</strong><figure class="wp-block-image"></p>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/6-synthwave-theme-1024x672.jpg" alt="" class="wp-image-1595" /> </figure></p>
<p>Il tema Synthwave &lsquo;84 è un semplice tema CSS che celebra l&rsquo;estetica degli anni &lsquo;80 nello sviluppo web moderno. È influenzato dalla musica e dalle copertine dei moderni marchi Synthwave come Timecop 1893, The Midnight e FM-84. Ti consente di sperimentare l&rsquo;effetto bagliore dei sogni al neon degli anni &lsquo;80 con colori ben miscelati, rendendolo uno dei temi più eleganti e di classe.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=RobbOwen.synthwave-vscode">Scarica Synthwave &lsquo;84</a></p>
<h3 id="tema-atom-one-darkfigure-classwp-block-image"><strong>Tema Atom One Dark</strong><figure class="wp-block-image"></h3>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/7-atom-one-dark-preview-1024x617.png" alt="" class="wp-image-1596" /> </figure></p>
<p>Creato da Mahmoud Ali, è stato l&rsquo;ispirazione per il tema One Dark e si basa sul tema dell&rsquo;Atom IDE. A differenza di altri temi dark, ha solo una variante: oscuro. È un&rsquo;opzione eccellente se ti manca Atom ma non vuoi tornarci. Vanta quasi 2 milioni di installazioni in tutto il mondo con una valutazione di 5/5.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark">Scarica Atom One Dark</a></p>
<p>### <strong><strong>Night Owl</strong></strong><figure class="wp-block-image"></p>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/8-nightowl-first-screen.jpg" alt="" class="wp-image-1597" /> </figure></p>
<p>Sei un nottambulo a cui piace programmare di notte quando il resto del mondo dorme? Lo sono anche io! Il tema Night Owl può fare per te. Presenta un tema chiaro e uno scuro, che aiuta le persone daltoniche e garantisce una facile visualizzazione alla luce del giorno.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl">Scarica Night Owl</a></p>
<h2 id="anc-2.wp-block-heading"><strong>I migliori temi chiari per VSCode</strong></h2>
<p>I temi chiari sono consigliati per la codifica della luce diurna. Poiché i programmatori trascorrono la maggior parte del lavoro di giorno, spesso si può avere bisogno di un tema luminoso elegante che aiuti a programmare con facilità. Personalmente li utilizzo quando lavoro all&rsquo;aperto sotto al sole.</p>
<p>Ecco i migliori temi di luce per VSCode:</p>
<p>### <strong><strong>Quie t Light</strong></strong><figure class="wp-block-image"></p>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/9-quiet-light.png" alt="" class="wp-image-1598" /> </figure></p>
<p>Creato inizialmente per l&rsquo;editor di testo Espresso su Mac, Quiet Light è un porting ufficiale del tema Quiet Light. Sebbene VSCode venga fornito con un tema Quiet Light predefinito, questo ha più modifiche per soddisfare i tuoi gusti e le tue preferenze. Supporta diversi linguaggi, inclusi JavaScript, PHP, HTML, CSS, Python e altri.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=onecrayon.theme-quietlight-vsc">Scarica Quiet Light</a></p>
<p>### <strong><strong>Bracket Lights Pro</strong></strong><figure class="wp-block-image"></p>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/10-brackets-light-pro-1024x597.png" alt="" class="wp-image-1599" /> </figure></p>
<p>Bracket Lights Pro è un tema accattivante grazie alla sua bellissima tavolozza di colori. Incanala il tema chiaro dell&rsquo;editor di codice Brackets di Adobe su VSCode. Sebbene Adobe abbia terminato il suo supporto per Brackets il 1° settembre 2021, ti piacerà usare Bracket Lights Pro per il suo aspetto pulito.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=fehey.brackets-light-pro">Scarica Bracket Lights Pro</a></p>
<p>### <strong><strong>Bluloco Light</strong></strong><figure class="wp-block-image"></p>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/11-blulocojs-1024x926.png" alt="" class="wp-image-1600" /> </figure></p>
<p>Se desideri un tema con raffinatezza e un&rsquo;ampia gamma di colori nella tavolozza, non sbaglierai con Bluloco Light. Biforcato inizialmente da One Light Theme, presenta un uso più ampio della coerenza del colore e degli ambiti della sintassi per quanto riguarda leggibilità, contrasto ed estetica.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=uloco.theme-bluloco-light">Scarica Bluloco Light</a></p>
<p>### ## <strong>I migliori temi per VSCode</strong> {#anc-3.wp-block-heading}</p>
<p>VSCode è senza dubbio uno dei migliori editor di codice, con una vasta gamma di estensioni supportate dalla comunità. Disponibile su macOS, Windows e Linux, puoi soddisfare quasi tutte le tue esigenze di programmazione indipendentemente dal sistema operativo. </p>
<p>Ecco i migliori temi per VSCode:</p>
<p>### <strong><strong>Tokyo Night</strong></strong><figure class="wp-block-image"></p>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/12-ss_tokyo_night-1024x713.png" alt="Notte di Tokio" class="wp-image-1605" /> <figcaption>Tokyo Night</figcaption></figure> <figure class="wp-block-image"><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/12-ss_tokyo_night_storm-1-1024x713.png" alt="Tempesta notturna di Tokyo" class="wp-image-1602" /><figcaption>Tokyo Night Storm</figcaption></figure> <figure class="wp-block-image"><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/12-ss_tokyo_day-1024x712.png" alt="Giornata di Tokyo" class="wp-image-1603" /><figcaption>Tokyo Day</figcaption></figure></p>
<p>Questo tema è pulito, fresco e rilassante con colori calmi. Celebra le luci del centro di Tokyo di notte ed è disponibile sia in versione chiara che scura. La sua perfetta miscela e combinazione di colori aiutano a meditare mentre scrivi codici.</p>
<p>[Scarica <a href="https://marketplace.visualstudio.com/items?itemName=enkia.tokyo-night">Tokyo Night</a>]<a href="https://marketplace.visualstudio.com/items?itemName=enkia.tokyo-night">12</a></p>
<p>### <strong><strong>GitHub Theme</strong></strong><figure class="wp-block-image"></p>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/13-github-132220037-3cd3e777-55a6-445f-9a2e-da6020ebd78d-1024x640.png" alt="" class="wp-image-1604" /> <figcaption>Temi GitHub</figcaption></figure></p>
<p>Il tema GitHub porta l&rsquo;esperienza GitHub in VSCode. È simile ai temi ufficiali di GitHub.com ed è popolare tra gli sviluppatori che preferiscono i temi classici. È disponibile sia in chiaro che in scuro</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme">Scarica GitHub Theme</a></p>
<h3 id="winter-is-comingfigure-classwp-block-image"><strong><strong>Winter is Coming</strong></strong><figure class="wp-block-image"></h3>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/14-dark-blue-html-1024x605.png" alt="" class="wp-image-1608" /> <figcaption><strong><strong>Dark Blue HTML</strong></strong></figcaption></figure> <figure class="wp-block-image"><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/14-dark-blue-js-1024x605.png" alt="" class="wp-image-1609" /><figcaption><strong><strong>Dark Blue JavaScript</strong></strong></figcaption></figure> <figure class="wp-block-image"><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/14-dark-blue-ts-1024x605.png" alt="" class="wp-image-1610" /><figcaption><strong><strong>Dark Blue TypeScript</strong></strong></figcaption></figure> <figure class="wp-block-image"><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/14-winteriscoming-1024x605.png" alt="JavaScript leggero" class="wp-image-1606" /><figcaption><strong><strong>Light JavaScript</strong></strong></figcaption></figure></p>
<p>Se sei un grande fan di Game of Thrones, avrai sicuramente sentito questa frase diverse volte! È stato creato da John Papa ed è disponibile in diverse versioni, tra cui blu scuro, nero scuro e chiaro. Racchiude un equilibrio nelle sue combinazioni di colori, rendendolo perfetto per la codifica durante il giorno e la notte.</p>
<p>[Scarica <a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.winteriscoming">Winter is Coming</a>]<a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.winteriscoming">14</a></p>
<h3 id="firefox-themefigure-classwp-block-image"><strong><strong>Firefox Theme</strong></strong><figure class="wp-block-image"></h3>
<p><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/15-theme-preview-1-1024x576.gif" alt="Tema Firefox" class="wp-image-1612" /> </figure></p>
<p>Il tema Firefox è basato sugli strumenti per sviluppatori di Mozilla Firefox. Il suo perfetto equilibrio di colori freddi gli conferisce un aspetto elegante con icone illuminate al neon. Per passare facilmente da una scheda all&rsquo;altra, fornisce una sottolineatura evidenziata sulle schede aperte per garantire una transizione rapida. È disponibile nelle versioni scura e chiara.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=Heron.firefox-devtools-theme">Scarica il tema Firefox</a></p>
<h3 id="nu-discofigure-classwp-block-image"><strong>Nu Disco</strong><figure class="wp-block-image"></h3>
<p><a href="https://www.tabnine.com/blog/wp-content/uploads/2021/11/17-discojs.png"><img decoding="async" src="https://www.tabnine.com/blog/wp-content/uploads/2021/11/17-discojs-1024x733.png" alt="Nu Disco" class="wp-image-1615" /></a><figcaption>Nu Disco</figcaption></figure></p>
<p>Nu Disco è stato creato da Danny Banks ed è alimentato da Style Dictionary. I suoi colori di sintassi sono posizionati magnificamente con colori contrastanti per semplificare la tua esperienza di codifica. Disponibile nelle versioni scura e chiara, è perfettamente progettato per essere facile da usare in ambienti luminosi e scarsamente illuminati.</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=dbanksdesign.nu-disco">Scarica il tema Nu Disco</a></p>
<h2 id="anc-4.wp-block-heading"><strong>Incartare</strong></h2>
<p>VSCode è un ottimo editor di codice che supporta centinaia di linguaggi e funzionalità avanzate, tra cui l&rsquo;evidenziazione della sintassi, l&rsquo;indentazione automatica e gli snippet. È adatto per lo sviluppo Web moderno e dispone di un debugger interattivo per visualizzare gli stack di chiamate ed eseguire variabili.</p>
<p>Provare uno dei temi di Visual Studio Code che ho suggerito qua sopra può aiutarti molto durante le tue sessioni di coding. Sebbene i temi sopra riportati rendano il tuo IDE colorato e aiutino i tuoi occhi a pungere meno, non ti renderanno certo un programmatore migliore… Ma lavorare in un ambiente piacevole è sicuramente più motivante!</p>
<p>Buon codice!</p>
]]></content>
		</item>
		
		<item>
			<title>The 6 Best Tools for Frontend Development</title>
			<link>https://albertoreineri.it/en/blog/the-6-best-tools-for-frontend-development/</link>
			<pubDate>Tue, 28 Jun 2022 12:03:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/the-6-best-tools-for-frontend-development/</guid>
			<description>Il codice utilizzato nella produzione è diverso dal codice di sviluppo. In produzione, è necessario creare pacchetti che funzionino velocemente, gestire le dipendenze, automatizzare le attività, caricare moduli esterni e altro ancora. Gli strumenti che consentono di trasformare il codice di sviluppo in codice di produzione sono chiamati tool di compilazione. Gli sviluppatori frontend lavorano principalmente con i seguenti tipi di strumenti di compilazione:
package managers, task runners, module loaders, module bundlers, etc… In questo articolo potrai trovare raccolto i migliori strumenti di build che puoi utilizzare nello sviluppo frontend.</description>
			<content type="html"><![CDATA[<p>Il codice utilizzato nella produzione è diverso dal codice di sviluppo. In produzione, è necessario creare pacchetti che funzionino velocemente, gestire le dipendenze, automatizzare le attività, caricare moduli esterni e altro ancora. Gli strumenti che consentono di trasformare il codice di sviluppo in codice di produzione sono chiamati tool di compilazione. Gli sviluppatori frontend lavorano principalmente con i seguenti tipi di strumenti di compilazione:</p>
<ul>
<li>package managers,</li>
<li>task runners,</li>
<li>module loaders,</li>
<li>module bundlers,</li>
<li>etc…</li>
</ul>
<p>In questo articolo potrai trovare raccolto i migliori strumenti di build che puoi utilizzare nello sviluppo frontend. Nota che tutti questi strumenti vengono eseguiti da riga di comando, quindi non sono dotati di un&rsquo;interfaccia utente grafica.</p>
<h2 id="1-npm-package-manager">1. NPM (PACKAGE MANAGER)</h2>
<p>L&rsquo;acronimo <a href="https://github.com/npm/cli">npm</a> sta per Node Package Maid che è il gestore di pacchetti predefinito di Node.js. Quando <a href="https://nodejs.org/en/download/">installi Node.js</a> sul tuo sistema, anche npm viene installato automaticamente e puoi accedervi dall&rsquo;interfaccia da riga di comando. Con npm puoi installare qualsiasi pacchetto Node.js con un solo comando.</p>
<p>Puoi trovare tutti i pacchetti Node.js esistenti nel registro npm a cui puoi accedere tramite la barra di ricerca nella parte superiore della home page di npm. Devi solo digitare il nome del pacchetto che stai cercando (ad esempio <em>‘postcss&rsquo;</em> ) nella barra di ricerca e verrai indirizzato alla pagina del pacchetto che include tutto ciò che devi sapere sul pacchetto, il suo processo di installazione e tutto delle sue dipendenze.</p>
<p><strong>Caratteristiche principali:</strong></p>
<ul>
<li>Facile processo di installazione.</li>
<li>Software multipiattaforma (Windows, Linux, macOS, SmarOS e altro).</li>
<li>Centinaia di migliaia di pacchetti.</li>
<li>Gestione efficiente delle dipendenze tramite il file <em>package.json</em>.</li>
<li>Molteplici opzioni di configurazione (tramite riga di comando).</li>
<li>Ampia documentazione e utile community.</li>
</ul>
<h2 id="2-yarn-package-manager">2. YARN (PACKAGE MANAGER)</h2>
<p><a href="https://yarnpkg.com/lang/en/">Yarn</a> è un gestore di pacchetti frontend che può essere utilizzato come alternativa a npm. Poiché Yarn stesso è un pacchetto Node.js, devi installare Node.js prima di poter utilizzare Yarn sul tuo sistema. Quindi, devi solo seguire la <a href="https://yarnpkg.com/en/docs/install">guida all&rsquo;installazione</a> per utilizzarla per gestire le dipendenze del frontend.</p>
<p>Sebbene npm sia un ottimo strumento, scoprirai che la creazione di pacchetti con esso a volte richiede molto tempo. Questo non è necessariamente un problema se non hai molte dipendenze da installare o non usi regolarmente un gestore di pacchetti. Tuttavia, se lavori su un progetto pesante, può essere una buona idea utilizzare Yarn permette tempi di costruzione ultraveloci.</p>
<p>Yarn velocizza il processo di compilazione memorizzando nella cache ogni pacchetto in modo da non dover scaricare le dipendenze più volte. Esegue anche operazioni parallele per ridurre ulteriormente i tempi di costruzione.</p>
<p><strong>Caratteristiche principali:</strong></p>
<ul>
<li>Strumento multipiattaforma (Windows, Linux, macOS) con guide di installazione separate per ciascuna piattaforma.</li>
<li>Compatibile con tutti i pacchetti Node.js.</li>
<li>Tempi di <em>build</em> rapidi.</li>
<li>Modalità offline.</li>
</ul>
<h2 id="3-grunt-task-runner">3. GRUNT (TASK RUNNER)</h2>
<p><a href="https://gruntjs.com/">Grunt</a> è un task runner frontend che ti consente di automatizzare attività ripetitive come minimizzazione, linting, test e altro. I task runner sono diversi dai gestori di pacchetti, poiché non puoi usarli per gestire le dipendenze. Ne hai bisogno solo se desideri eseguire le stesse attività durante ogni processo di compilazione.</p>
<p>Poiché Grunt è un pacchetto Node.js, puoi installarlo con npm, Yarn o un altro gestore di pacchetti Node.js. Grunt mantiene le dipendenze personalizzate necessarie per eseguire le attività predefinite nel file <em>package.json</em> . Puoi definire le tue attività nel Gruntfile (<a href="https://gruntjs.com/sample-gruntfile">vedi un esempio</a>) che viene eseguito durante ogni processo di compilazione ed esegue automaticamente ogni attività che include.</p>
<p><strong>Caratteristiche principali:</strong></p>
<ul>
<li>Strumento da riga di comando multipiattaforma che funziona su qualsiasi sistema operativo.</li>
<li>Processo di configurazione semplice.</li>
<li>Enorme ecosistema con centinaia di plugin per aggiungere strumenti frontend (come Sass, Jade, JSHint, Handlebars, RequireJS e altri) che completano le attività preconfigurate.</li>
<li>Attività asincrone se necessario.</li>
<li>Ampia documentazione.</li>
<li>Ampiamente adottato.</li>
</ul>
<h3 id="4-gulp-task-runner">4. GULP (TASK RUNNER)</h3>
<p><a href="https://gulpjs.com/">Gulp</a> è un altro task runner automatizzato e anche il più forte concorrente di Grunt. Simile a Grunt, puoi utilizzare Gulp per automatizzare attività front-end ricorrenti come la preelaborazione CSS, l&rsquo;ottimizzazione delle immagini e molti altri. È anche un pacchetto Node.js che puoi installare con i gestori di pacchetti npm e Yarn. Puoi definire le tue attività in <a href="https://gulpjs.com/docs/en/getting-started/javascript-and-gulpfiles">Gulpfile</a> e configurare le tue dipendenze relative alle tue attività nel file <em>package.json</em> .</p>
<p>La più grande differenza rispetto a Grunt è che Gulp utilizza una tecnica di automazione più efficiente che consente tempi di costruzione più rapidi. Mentre Grunt utilizza i file temporanei per elaborare le attività, Gulp esegue operazioni in memoria senza scrivere in file temporanei. Queste operazioni in memoria sono chiamate <a href="https://nodejs.org/api/stream.html#stream_stream">node streams</a> e possono farti risparmiare molto tempo, soprattutto se desideri elaborare più attività in ogni build.</p>
<p><strong>Caratteristiche principali:</strong></p>
<ul>
<li>Task runner multipiattaforma che può essere installato come un normale pacchetto Node.js.</li>
<li>Utilizza i flussi Node per velocizzare le operazioni.</li>
<li>Enorme ecosistema con migliaia di plugin.</li>
<li>Base di codice di qualità utilizzando le best practice di Node.js.</li>
<li>Documentazione facile da seguire.</li>
<li>Superficie API minima per una semplice adozione.</li>
</ul>
<h2 id="5-browserify-module-loaderbundler">5. BROWSERIFY (MODULE LOADER/BUNDLER)</h2>
<p><a href="http://browserify.org/">Browserify</a> è un caricatore di moduli Node.js che ti consente di raggruppare le tue dipendenze front-end e caricarle come un unico file JavaScript nel browser dell&rsquo;utente. I gestori di pacchetti come npm e Yarn caricano i moduli sul lato server utilizzando la funzione <em><a href="https://nodejs.org/api/modules.html#modules_require_id">require()</a></em> di Node.js progettata per caricare i moduli. Browserify porta il metodo <em>require()</em> sul lato client, il che può comportare un enorme aumento delle prestazioni.</p>
<p>Con Browserify, il browser del tuo utente deve caricare un solo file JavaScript statico che contiene tutte le dipendenze su cui si basa il tuo progetto. Puoi aggiungere il tuo JavaScript in bundle come tag script alla tua pagina e sei a posto. Tuttavia, tieni presente che poiché Browserify è un modulo Node.js e un&rsquo;implementazione dell&rsquo;API CommonJS (simile a npm), puoi utilizzarlo solo per caricare moduli Node.js ma non altri tipi di file JavaScript (o altri).</p>
<p><strong>Caratteristiche principali:</strong></p>
<ul>
<li>Raggruppa tutte le dipendenze di Node.js in un unico file.</li>
<li>Velocizza le applicazioni modulari che si basano su più moduli Node.js.</li>
<li>Consente requisiti esterni (è possibile richiedere moduli da altri tag script ).</li>
<li>Consente di dividere i pacchetti, se necessario.</li>
<li>Esclude, ignora e trasforma le funzionalità.</li>
<li>Documentazione dettagliata e utile <a href="https://github.com/browserify/browserify-handbook">manuale di Browserify</a> .</li>
</ul>
<h2 id="6-webpack-module-loaderbundler">6. WEBPACK (MODULE LOADER/BUNDLER)</h2>
<p><a href="https://webpack.js.org/">Webpack</a> è un bundler di moduli avanzato che ti consente di raggruppare tutte le tue dipendenze e caricarle come risorse statiche nel browser dell&rsquo;utente. Mentre Browserify raggruppa solo i moduli Node.js, Webpack può gestire qualsiasi tipo di file front-end come file <em>.html</em> , <em>.css, .js, .scss</em> , immagini e altre risorse.</p>
<p>Oltre ai moduli CommonJS utilizzati nell&rsquo;ecosistema Node.js, Webpack può anche raggruppare moduli <a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</a> e <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a> nativi (altre specifiche del modulo JavaScript). Webpack analizza il tuo progetto e crea un grafico delle dipendenze. Quindi, in base al grafico delle dipendenze, raggruppa i tuoi file e moduli in uno o più file statici che puoi aggiungere alla tua pagina HTML.</p>
<p>Poiché Webpack stesso è anche un modulo Node.js, puoi installarlo con npm o con il gestore di pacchetti Yarn.</p>
<p>Per impostazione predefinita, la configurazione dei progetti Webpack richiede molto tempo a causa delle molteplici opzioni che consentono di perfezionare il progetto. Tuttavia, dal Webpack 4, include un&rsquo;opzione di configurazione zero che automatizza il processo di compilazione e richiede solo la definizione del file di immissione.</p>
<p><strong>Caratteristiche principali:</strong></p>
<ul>
<li>Molteplici opzioni di configurazione.</li>
<li>Codice suddiviso in blocchi più piccoli che possono essere caricati in modo asincrono.</li>
<li>Supporto per mappe di origine.</li>
<li>Opzione di configurazione zero (dal Webpack 4).</li>
<li>Enorme ecosistema con una ricca interfaccia di plugin.</li>
</ul>
<h2 id="conclusione">CONCLUSIONE</h2>
<p>Gli strumenti di compilazione frontend ti aiutano a trasformare il codice di sviluppo in codice pronto per la produzione che può essere eseguito su qualsiasi dispositivo o piattaforma senza problemi. In questa raccolta, abbiamo esaminato gli strumenti di compilazione più adottati che puoi utilizzare nel tuo progetto Web, inclusi gestori di pacchetti, task runner e caricatori/bundler di moduli.</p>
<p>Oltre alle soluzioni ampiamente adottate, ci sono anche (relativamente) nuovi strumenti sul mercato che stanno guadagnando costantemente terreno, come il gestore di pacchetti <a href="https://pnpm.js.org/">pnpm</a> (un&rsquo;alternativa a npm e Yarn), il bundle di moduli <a href="https://parceljs.org/">Parcel</a> (un&rsquo;alternativa a Webpack) e il bundler di moduli <a href="https://rollupjs.org/blog/en/">Rollup</a> ES (simile a Browserify ma raggruppa i moduli ECMAScript invece di quelli CommonJS). Se sei alla ricerca di nuove soluzioni, vale la pena dare un&rsquo;occhiata anche a questi nuovi strumenti.</p>
<p>L&rsquo;aggiunta di nuovi strumenti al tuo flusso di lavoro può portare il tuo processo di sviluppo a un livello superiore. </p>
<p>Come sempre, <em>Buon Codice!</em></p>
]]></content>
		</item>
		
		<item>
			<title>Nano Editor, Guida per principianti</title>
			<link>https://albertoreineri.it/en/blog/nano-editor-guida-per-principianti/</link>
			<pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/nano-editor-guida-per-principianti/</guid>
			<description>Gli utenti Linux hanno molte opzioni tra cui scegliere quando si tratta di editor di testo. Da base ad avanzato, esistono un sacco di editor di testo, ma alcuni come Vim ed Emacs possono risultare molto complicati per gli utenti meno avanzati.
In questo casi ci viene in aiuto Nano, forse il miglior editor di testo per principianti.
Nano: Nano è un editor di testo semplice e leggero sviluppato appositamente per sistemi UNIX e ambienti desktop che utilizzano un&amp;rsquo;interfaccia a riga di comando.</description>
			<content type="html"><![CDATA[<p>Gli utenti <a href="/argomento/linux/">Linux</a> hanno molte opzioni tra cui scegliere quando si tratta di editor di testo. Da base ad avanzato, esistono un sacco di editor di testo, ma alcuni come Vim ed Emacs possono risultare molto complicati per gli utenti meno avanzati.</p>
<p>In questo casi ci viene in aiuto Nano, forse il miglior editor di testo per principianti.</p>
<h2 id="nano">Nano:</h2>
<p>Nano è un editor di testo semplice e leggero sviluppato appositamente per sistemi UNIX e ambienti desktop che utilizzano un&rsquo;interfaccia a riga di comando. Nano è concesso in licenza sotto la GNU General Public License ed emula l&rsquo;editor di testo Pico.</p>
<h2 id="come-installare-nano">Come installare Nano:</h2>
<p>Sto usando Ubuntu per questo tutorial e il processo di installazione sarà lo stesso su altre distribuzioni Linux.</p>
<p>Prima di procedere con il processo di installazione, sarebbe una buona idea verificare se l&rsquo;editor di testo Nano è già installato o meno sul tuo sistema. Alcune distribuzioni Linux vengono fornite con l&rsquo;editor Nano preinstallato.</p>
<p>Per controllare, esegui il seguente comando in Terminale.</p>
<pre tabindex="0"><code>$ nano --version
</code></pre><p>Se ottieni un output con l&rsquo;attuale versione di nano, puoi saltare l&rsquo;installazione poiché l&rsquo;editor di testo Nano è già installato sul tuo sistema.</p>
<p>L&rsquo;installazione di Nano Text Editor è semplice, basta eseguire il seguente comando da Terminale e attendere il completamento dell&rsquo;installazione.</p>
<pre tabindex="0"><code>$ sudo apt-get install nano
</code></pre><p>Gli utenti CentOS/Red Hat Enterprise Linux (RHEL) possono utilizzare il comando seguente per installare l&rsquo;editor Nano.</p>
<pre tabindex="0"><code>$ yum installa nano
</code></pre><p>Ora che l&rsquo;editor nano è stato installato correttamente sul tuo sistema e pronto per l&rsquo;uso, possiamo iniziare con una guida per principianti all&rsquo;uso dell&rsquo;editor di testo Nano.</p>
<h2 id="guida-alluso-delleditor-di-testo-nano">Guida all&rsquo;uso dell&rsquo;editor di testo Nano</h2>
<p>Vediamo ora come utilizzare l&rsquo;editor di testo Nano.</p>
<h3 id="come-aprirechiudere-il-nano-text-editor">Come aprire/chiudere il Nano Text Editor</h3>
<p>Il comando per aprire l&rsquo;editor di testo Nano è il seguente.</p>
<pre tabindex="0"><code>$ nano nomefile 
</code></pre><p>Puoi aprire vari tipi di file nell&rsquo;editor di testo Nano, inclusi .txt, .php, .html e molti altri. Devi solo digitare il nome del file seguito da un&rsquo;estensione per aprire il file particolare nell&rsquo;editor Nano. Ad esempio, supponiamo di dover aprire il file denominato il_mio_file.txt, il comando sarà il seguente.</p>
<pre tabindex="0"><code>$ nano il_mio_file.txt
</code></pre><p>Devi assicurarti di essere nella directory in cui è stato salvato il file. Se il file non è presente nella directory, l&rsquo;editor di testo Nano creerà un nuovo file nella directory attuale.</p>
<p>Una volta aperto il file noterai che l&rsquo;interfaccia nano presenta il nome del file nella parte superiore, mentre nella parte inferiore noterai principalmente scorciatoie come taglia, sostituisci, vai alla riga e giustifica. Qui ˄ significa il tasto <strong>CTRL</strong> sulla tastiera.</p>
<p>Ad esempio, per <strong>scrivere</strong> o salvare le modifiche, devi premere i pulsanti CTRL + O sulla tastiera.</p>
<p>Se stai aprendo un file di configurazione, assicurati di utilizzare l&rsquo; opzione <strong>–w</strong> , questo comanderà a Nano editor di aprire il file di configurazione in un formato standard. Se non si utilizza questa opzione, l&rsquo;editor Nano avvolgerà il testo del file per adattarlo alla finestra, che alla fine sarà difficile da leggere.</p>
<h2 id="come-cercare--sostituire-il-testo">Come cercare / sostituire il testo</h2>
<p><strong>CTRL + W</strong> è la scorciatoia per cercare la parola nell&rsquo;editor. Ora devi inserire il testo che vuoi cercare e quindi premere il tasto Invio. Per continuare a cercare lo stesso testo, usa il tasto <strong>ALT + W.</strong></p>
<p>Per sostituire il testo, devi usare <strong>CTRL + R</strong>, l&rsquo;editor ti porterà alla prima istanza del testo che desideri sostituire; per sostituire tutto il testo, devi premere <strong>A</strong> . Ma se vuoi sostituire un solo testo, devi premere <strong>Y</strong>.</p>
<h2 id="come-copiare-e-incollare-il-testo">Come copiare e incollare il testo</h2>
<p>L&rsquo;operazione di copia incolla non è così semplice come altri editor di testo nell&rsquo;editor Nano. Se desideri tagliare e incollare una riga particolare, devi prima portare il cursore all&rsquo;inizio di quella riga.</p>
<p>Ora devi premere <strong>CTRL + K</strong> per tagliare la linea, quindi spostare il cursore nel punto in cui vuoi incollarlo, ora infine, premere <strong>CTRL + U</strong> per incollare la linea.</p>
<p>Per copiare e incollare una particolare stringa o parola, devi selezionare quella parola o stringa premendo <strong>CTRL + 6</strong> o <strong>ALT + A</strong> , assicurati che il cursore sia all&rsquo;inizio della parola.</p>
<p>Ora puoi usare <strong>CTRL + K</strong> e <strong>CTRL + U</strong> per tagliare e incollare la parola o la stringa.</p>
<p>Ecco come puoi iniziare a utilizzare l&rsquo;editor di testo Nano. Modificare un file di testo utilizzando la riga di comando non è facile, ma l&rsquo;editor di testo Nano lo rende più semplice. È affidabile e uno degli strumenti più facili da usare.</p>
<p>Dagli utenti inesperti ai professionisti, tutti trovano l&rsquo;editor di testo Nano un utile strumento da riga di comando. Spero che questa guida ti abbia sicuramente aiutato a iniziare con l&rsquo;editor Nano.</p>
<p>Di seguito ti lascio una serie di comandi spesso utilizzati:</p>
<h2 id="scoriatoie-utili-per-nano">Scoriatoie utili per nano:</h2>
<table>
<thead>
<tr>
<th>Command</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td>CTRL + A</td>
<td>Vai all&rsquo;inizio della riga</td>
</tr>
<tr>
<td>CTRL + E</td>
<td>Vai alla fine della riga</td>
</tr>
<tr>
<td>CTRL + Y</td>
<td>Scorri in basso nella pagina</td>
</tr>
<tr>
<td>CTRL + V</td>
<td>Scorri in alto nella pagina</td>
</tr>
<tr>
<td>CTRL + _</td>
<td>Scorri fino alla riga speficina</td>
</tr>
<tr>
<td>CTRL + C</td>
<td>Scopri dov&rsquo;è il cursore</td>
</tr>
<tr>
<td>CTRL + V</td>
<td>Scorri verso l&rsquo;alto</td>
</tr>
<tr>
<td>CTRL + W</td>
<td>Cerca un testo</td>
</tr>
<tr>
<td>CTRL + D</td>
<td>Cancella il carattere sotto al cursore</td>
</tr>
<tr>
<td>CTRL + K</td>
<td>Cancella l&rsquo;intera riga</td>
</tr>
<tr>
<td>CTRL + \</td>
<td>Sostituisci una stringa</td>
</tr>
<tr>
<td>CTRL + O</td>
<td>Salva il contenuto senza uscire</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
		</item>
		
		<item>
			<title>Usare la riga di comando con WordPress grazie a WP-CLI</title>
			<link>https://albertoreineri.it/en/blog/usare-la-riga-di-comando-con-wordpress-grazie-a-wp-cli/</link>
			<pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/usare-la-riga-di-comando-con-wordpress-grazie-a-wp-cli/</guid>
			<description>Se sei uno sviluppatore WordPress, probabilmente hai installato il CMS, l&amp;rsquo;hai aggiornato e hai attivato temi e plugin centinaia di volte. E sebbene queste attività di routine di sviluppo e manutenzione siano abbastanza facili da eseguire con l&amp;rsquo;interfaccia utente grafica di WordPress, eseguirle più e più volte non è molto efficiente.
La buona notizia è che puoi velocizzare facilmente ed efficacemente lo sviluppo e la manutenzione di WordPress con l&amp;rsquo;interfaccia a riga di comando di WordPress (WP-CLI) .</description>
			<content type="html"><![CDATA[<p>Se sei uno sviluppatore WordPress, probabilmente hai installato il CMS, l&rsquo;hai aggiornato e hai attivato temi e plugin centinaia di volte. E sebbene queste attività di routine di sviluppo e manutenzione siano abbastanza facili da eseguire con l&rsquo;interfaccia utente grafica di WordPress, eseguirle più e più volte non è molto efficiente.</p>
<p>La buona notizia è che puoi velocizzare facilmente ed efficacemente lo sviluppo e la manutenzione di <a href="http://wp-cli.org/">WordPress con l&rsquo;interfaccia a riga di comando di WordPress (WP-CLI)</a> . In questo post esploreremo i diversi modi in cui puoi utilizzare WP-CLI e vedremo alcuni utili comandi WP-CLI per aiutarti a iniziare con un passo nella giusta direzione.</p>
<h2 id="unintroduzione-a-wp-cli">UN&rsquo;INTRODUZIONE A WP-CLI</h2>
<p>Se sei nello sviluppo web da un po&rsquo; di tempo, probabilmente hai familiarità con l&rsquo;interfaccia da riga di comando. WP-CLI è l&rsquo;interfaccia della riga di comando di WordPress. E per quelli di voi che non si sono dilettati molto nella programmazione, WP-CLI è uno strumento che consente di gestire le installazioni di WordPress senza utilizzare un browser web.</p>
<p>WP-CLI ti consente di fare qualsiasi cosa, dall&rsquo;installazione del CMS WordPress su un sito Web nuovo di zecca all&rsquo;esecuzione di operazioni a livello di sito su un sito Web WordPress esistente. E la parte migliore è che l&rsquo;insieme di passaggi che devi seguire per completare tali attività sarà, nella maggior parte dei casi, ridotto a una singola riga di codice .</p>
<p>Ora che abbiamo visto a grandi linee cos&rsquo;è WP-CLI e come può aiutarti ad accelerare lo sviluppo del tuo prossimo progetto, diamo un&rsquo;occhiata a come puoi iniziare con questo potente strumento.</p>
<h2 id="installazione-di-wp-cli-sul-tuo-ambiente-di-hosting">INSTALLAZIONE DI WP-CLI SUL TUO AMBIENTE DI HOSTING</h2>
<p>La prima cosa che devi fare per iniziare con WP-CLI è assicurarti che il tuo ambiente di hosting soddisfi i requisiti minimi:</p>
<ul>
<li>
<p>Ambiente UNIX.</p>
</li>
<li>
<p>PHP 5.3.29 (o successivo).</p>
</li>
<li>
<p>WordPress 3.7 (o successivo).</p>
</li>
<li>
<p>Secure Shell (SSH) abilitato sul tuo server web.</p>
</li>
</ul>
<p>Dopo aver verificato quegli elementi essenziali, vai avanti e scarica il file <em>wp-cli.phar</em> usando il seguente comando:</p>
<pre tabindex="0"><code>$ curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
</code></pre><p>E voilà! WP-CLI dovrebbe ora essere installato nel tuo ambiente di hosting. Se desideri assicurarti che funzioni correttamente, esegui semplicemente il seguente comando:</p>
<pre tabindex="0"><code>$ php wp-cli.phar -info
</code></pre><p>Se tutto va bene, dovresti vedere qualcosa di simile sulla riga di comando che specifica quale versione di WP-CLI è in esecuzione nel tuo ambiente di hosting:</p>
<pre tabindex="0"><code>PHP binary: /usr/bin/php5
PHP version: 5.5.9-1ubuntu4.14
php.ini used: /etc/php5/cli/php.ini
WP-CLI root dir: /home/wp-cli/.wp-cli
WP-CLI packages dir: /home/wp-cli/.wp-cli/packages/
WP-CLI global config: /home/wp-cli/.wp-cli/config.yml
WP-CLI project config:
WP-CLI version: 1.3.0
</code></pre><p>Tuttavia, se scopri che WP-CLI non è stato installato correttamente sul tuo sistema, ti consiglio di controllare alcuni metodi di <a href="https://make.wordpress.org/cli/handbook/installing/#alternative-installation-methods">installazione alternativi</a> per ulteriori informazioni su come configurarlo.</p>
<p>Infine, creeremo un file eseguibile per WP-CLI e lo sposteremo nella sua directory in modo da poterlo eseguire da qualsiasi luogo:</p>
<pre tabindex="0"><code>$ chmod +x wp-cli.phar
$ sudo mv wp-cli.phar /usr/local/bin/wp
</code></pre><p>Per semplicità, abbiamo chiamato la directory <em>wp</em> . Ora, ogni volta che devi usare WP-CLI, tutto ciò che devi fare è eseguire il comando <em>wp</em> dalla riga di comando.</p>
<h2 id="sviluppo-wordpress-e-manutenzione-del-sito-con-wp-cli">SVILUPPO WORDPRESS E MANUTENZIONE DEL SITO CON WP-CLI</h2>
<p>Ora che WP-CLI è installato e pronto per l&rsquo;uso, esaminiamo alcune delle cose più utili che puoi fare per accelerare le attività di routine di sviluppo e manutenzione di WordPress.</p>
<h3 id="installazione-di-wordpress">INSTALLAZIONE DI WORDPRESS</h3>
<p>Entra nella directory in cui desideri installare il CMS WordPress ed esegui la seguente riga di codice:</p>
<pre tabindex="0"><code>$ wp core download
</code></pre><p>Dovrai creare un file <em>wp-config.php</em> per proseguire con la tua installazione. Ecco come puoi farlo:</p>
<pre tabindex="0"><code>$ wp core config --dbname=databasename --dbuser=databaseuser --dbpass=databasepassword --dbhost=localhost --dbprefix=prfx_
</code></pre><p><em>(Ho utilizzato del testo di esempio per il nome del database e le credenziali dell&rsquo;utente del database. Assicurati di sostituirli con le informazioni del tuo database prima di eseguire il codice.)</em></p>
<p>Infine, puoi iniziare l&rsquo;installazione vera e propria eseguendo il comando di <em>installazione principale</em> indicato di seguito. Ricorda di sostituire i parametri di esempio con le informazioni del tuo sito prima di eseguire il codice.</p>
<pre tabindex="0"><code>$ wp core install –-url=yoursite.com -–title=&#34;Your WordPress Site&#39;s Title&#34; –-admin_user=admin_username –-admin_password=admin_password –-admin_email=admin@yoursite.com
</code></pre><h3 id="aggiornamento-di-wordpress">AGGIORNAMENTO DI WORDPRESS</h3>
<p>Prima o poi verrà lanciata una nuova versione di WordPress e dovrai aggiornare la tua installazione all&rsquo;ultima versione. Se non sei sicuro di quale versione di WordPress è attualmente in esecuzione sul tuo sito, esegui semplicemente il seguente comando:</p>
<pre tabindex="0"><code>$ wp core version
</code></pre><p>Se ritieni che il tuo sito abbia effettivamente bisogno di essere aggiornato, è meglio eseguire un backup completo del suo database prima di procedere. Ecco come puoi farlo con WP-CLI:</p>
<pre tabindex="0"><code>$ wp db export my-db-backup.sql
</code></pre><p>L&rsquo;esecuzione di questo comando creerà un backup completo del database del tuo sito e lo salverà nella directory principale in un file chiamato <em>my-db-backup.sql</em> .</p>
<p>Infine, puoi aggiornare i file core del tuo sito e il relativo database eseguendo le seguenti righe di codice:</p>
<pre tabindex="0"><code>$ wp core update
$ wp core update –db
</code></pre><p>Per quelli di voi che gestiscono più siti o reti multisito, eseguire il seguente script per aggiornare tutti i siti in una volta sola:</p>
<pre tabindex="0"><code>$ declare -a sites_to_update=(&#39;/var/www/wordpress_site_1&#39; &#39;/var/www/wordpress_site_2&#39; &#39;/var/www/wordpress_site_n&#39;)
for site in &#34;${sites_to_update[@]}&#34;;
do
wp --path=$site core update
done
</code></pre><p><em>(Ricordati di sostituire il testo di esempio con i nomi delle directory principali dei tuoi siti Web WordPress.)</em></p>
<h3 id="gestione-di-temi-e-plugin">GESTIONE DI TEMI E PLUGIN</h3>
<p>Una delle cose migliori di WP-CLI è che collega il tuo server web alle directory ufficiali di WordPress <a href="https://wordpress.org/themes/">Theme</a> e <a href="https://wordpress.org/plugins/">Plugin</a>. Ciò significa che puoi gestire le installazioni di temi e plug-in utilizzando solo la riga di comando.</p>
<p><strong>Comandi del tema WordPress:</strong></p>
<ul>
<li>
<p><strong>Per installare un tema:</strong> <strong>wp theme install theme_name</strong></p>
</li>
<li>
<p><strong>Per attivare un tema installato:</strong> <strong>wp theme activate theme_name</strong></p>
</li>
<li>
<p><strong>Per aggiornare un tema installato:</strong> <strong>wp theme update theme_name</strong></p>
</li>
<li>
<p><strong>Per aggiornare tutti i temi installati:</strong> <strong>wp theme update –all</strong></p>
</li>
</ul>
<p><strong>Comandi del plugin di WordPress:</strong></p>
<ul>
<li>
<p><strong>Per installare un plugin:</strong> <strong>wp plugin install plugin_name</strong></p>
</li>
<li>
<p><strong>Per attivare un plugin installato:</strong> <strong>wp plugin activate plugin_name</strong></p>
</li>
<li>
<p><strong>Per aggiornare un plugin installato:</strong> <strong>wp plugin update plugin_name</strong></p>
</li>
<li>
<p><strong>Per aggiornare tutti i plugin installati:</strong> <strong>wp plugin update –all</strong></p>
</li>
</ul>
<p><em>(Ricordati di sostituire il testo di esempio con il nome del tema o del plugin con cui desideri interagire.)</em></p>
<h3 id="creazione-di-custom-post-personalizzati">CREAZIONE DI CUSTOM POST PERSONALIZZATI</h3>
<p>WP-CLI elimina il lavoro pesante dalla creazione di custom post type in WordPress e lo riduce a una semplice riga di codice. Invece di scaricare un plug-in per aiutarti a portare a termine il lavoro, perché non provare la seguente riga di codice:</p>
<pre tabindex="0"><code>$ wp scaffold post-type cpt_slug --label=CPT_Label --theme=theme_name
</code></pre><p>Tutto quello che devi fare è sostituire il testo di esempio con lo slug, l&rsquo;etichetta e il nome del tema del tuo custom post type e voilà!</p>
<h3 id="creazione-di-temi-child">CREAZIONE DI TEMI CHILD</h3>
<p>Se ti è già capitato di creare un tema child, avrai dovuto accedere al pannello di controllo e creareti cartella e file relativi dentro al sito. WP-CLI ti consente di creare un tema child con una singola riga di codice:</p>
<pre tabindex="0"><code>$ wp scaffold child-theme name-of-child-theme --parent_theme=name_of_parent_theme --theme_name=&#39;My Child Theme&#39; --author=&#39;Your Name&#39; --author_uri=http://www.yoursite.com --theme_uri=http://www.themesite.com --activate
</code></pre><p><em>(Come sempre, ricorda di sostituire il testo di esempio con il tema child e le informazioni sul tema genitore.)</em></p>
<h2 id="conclusione">CONCLUSIONE</h2>
<p>Con WP-CLI puoi ottenere di più facendo di meno. Se desideri aumentare la tua produttività accelerando le operazioni di routine di sviluppo e manutenzione di WordPress, allora vale sicuramente la pena provare WP-CLI.</p>
<p>Ti ho mostrato come installare lo strumento nel tuo ambiente di hosting e abbiamo visto alcuni scenari in cui WP-CLI batte la GUI di WordPress in termini di efficienza. Ora non ti resta che provarlo!</p>
<p>Ah, sembra scontato, ma NON FARE MAI TEST IN AMBIENTE DI PRODUZIONE, usa lo STAGING o falli in LOCALE.</p>
<p>Buon codice!</p>
]]></content>
		</item>
		
		<item>
			<title>Come installare una LAMP stack (Linux, Apache, MySQL, PHP) su Ubuntu</title>
			<link>https://albertoreineri.it/en/blog/come-installare-una-lamp-stack-linux-apache-mysql-php-su-ubuntu/</link>
			<pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/come-installare-una-lamp-stack-linux-apache-mysql-php-su-ubuntu/</guid>
			<description>Introduzione Uno stack &amp;ldquo;LAMP&amp;rdquo; è un gruppo di software open source che viene generalmente installato insieme per consentire a un server di ospitare siti Web dinamici e app Web. Questo termine è in realtà un acronimo che rappresenta il sistema operativo Linux, con il web server Apache**.** I dati del sito vengono archiviati in un database MySQL e il contenuto dinamico viene elaborato da PHP.
In questa guida, installeremo uno stack LAMP su un server Ubuntu.</description>
			<content type="html"><![CDATA[<h2 id="introduzione">Introduzione</h2>
<p>Uno stack &ldquo;LAMP&rdquo; è un gruppo di software open source che viene generalmente installato insieme per consentire a un server di ospitare siti Web dinamici e app Web. Questo termine è in realtà un acronimo che rappresenta il sistema operativo <strong>L</strong>inux, con il web server <strong>A</strong>pache**.** I dati del sito vengono archiviati in un database <strong>M</strong>ySQL e il contenuto dinamico viene elaborato da <strong>P</strong>HP.</p>
<p>In questa guida, installeremo uno stack LAMP su un server Ubuntu.</p>
<h2 id="prerequisiti">Prerequisiti</h2>
<p>Questo tutorial è creato su Ubuntu, ma funziona su tutte le distro basate su Debian, come Pop!_OS, Elementary OS, Linux Mint etc.</p>
<h2 id="passaggio-1-installazione-di-apache">Passaggio 1: installazione di Apache</h2>
<p>Il server Web Apache è un popolare server Web open source che può essere utilizzato insieme a <a href="/blog/le-basi-di-php/">PHP</a> per ospitare siti Web dinamici. È ben documentato ed è stato ampiamente utilizzato per gran parte della storia del web.</p>
<p>Innanzitutto, assicurati che la tua <code>apt</code> cache sia aggiornata con:</p>
<pre tabindex="0"><code>sudo apt update
</code></pre><p>Se è la prima volta che lo utilizzi <code>sudo</code> in questa sessione, ti verrà chiesto di fornire la password dell&rsquo;utente per convalidare le tue autorizzazioni.</p>
<p>Una volta aggiornata la cache, puoi installare Apache lanciando:</p>
<pre tabindex="0"><code>sudo apt install apache2
</code></pre><p>Dopo aver inserito questo comando, <code>apt</code> ti dirà quali pacchetti intende installare e quanto spazio su disco occuperà. Premi S (o Y se hai configurati il sistema in lingua inglese) e poi premi <code>ENTER</code> per confermare e l&rsquo;installazione procederà.</p>
<hr>
<p>N.B.: in questa guida utilizzerò &lsquo;<em>Y</em>&rsquo; per procedere con l&rsquo;installazione, perché ho l&rsquo;abitudine di installare sempre Linux in inglese&hellip; Se usi l&rsquo;italiano ricordati di premere &lsquo;<em>S</em>&rsquo;</p>
<hr>
<p>E voilà! Apache è bello che installato!</p>
<p>Puoi fare subito un controllo a campione per verificare che tutto sia andato come previsto visitando l&rsquo;indirizzo IP pubblico del tuo server nel tuo browser web. Se sei il locale ti basterà aprire il browser e scrivere nella barra degli indirizzi:</p>
<pre tabindex="0"><code>http://localhost
</code></pre><p>Se invece stai configurando un web server remoto, allora dovrai inserire il tuo indirizzo IP</p>
<pre tabindex="0"><code>http://your_server_ip
</code></pre><p>Dovresti ora vedere nel browser la pagina Web predefinita di Apache, che è disponibile a scopo informativo e di test. Dovrebbe assomigliare a qualcosa di simile a questo:</p>
<p><img src="images/small_apache_default_1804-728x1024.png" alt=""></p>
<p>Se vedi questa pagina, allora il tuo server web è ora installato correttamente e accessibile attraverso il tuo firewall.</p>
<h3 id="come-trovare-lindirizzo-ip-pubblico-del-tuo-server">Come trovare l&rsquo;indirizzo IP pubblico del tuo server</h3>
<p>Se stai configurando un web server remoto e non sai qual è l&rsquo;indirizzo IP pubblico del tuo server, ci sono diversi modi per trovarlo. Di solito è l&rsquo;indirizzo che usi per connetterti al tuo server tramite SSH.</p>
<p>Esistono diversi modi per farlo dalla riga di comando. Innanzitutto, puoi utilizzare gli strumenti <em>iproute2</em> per ottenere il tuo indirizzo IP digitando questo:</p>
<pre tabindex="0"><code>ip addr show eth0 | grep inet | awk &#39;{ print $2; }&#39; | sed &#39;s/\/.*$//&#39;
</code></pre><p>Questo ti restituirà due o tre righe. Sono tutti indirizzi corretti, ma il tuo computer potrebbe essere in grado di utilizzarne solo uno, quindi sentiti libero di provarli.</p>
<p>Un metodo alternativo consiste nell&rsquo;utilizzare l&rsquo;utility <code>curl</code> per contattare una parte esterna per dirti come <em>vede</em> il tuo server. Questo viene fatto chiedendo a un server specifico qual è il tuo indirizzo IP:</p>
<pre tabindex="0"><code>sudo apt install curl
curl http://icanhazip.com
</code></pre><p>Indipendentemente dal metodo utilizzato per ottenere il tuo indirizzo IP, digitalo nella barra degli indirizzi del tuo browser web per visualizzare la pagina Apache predefinita.</p>
<h2 id="passaggio-2-installazione-di-mysql">Passaggio 2: installazione di MySQL</h2>
<p>Ora che hai il tuo server web attivo e funzionante, è il momento di installare MySQL. MySQL è un sistema di gestione di database. Fondamentalmente, organizzerà e fornirà l&rsquo;accesso ai database in cui il tuo sito può archiviare informazioni.</p>
<p>Ancora una volta, utilizziamo <code>apt</code> per acquisire e installare questo software:</p>
<pre tabindex="0"><code>sudo apt install mysql-server
</code></pre><p><strong>Nota</strong> : in questo caso, non è necessario eseguire <code>sudo apt update</code> prima del comando. Questo perché di recente l&rsquo;hai eseguito nei comandi sopra per installare Apache. L&rsquo;indice del pacchetto sul tuo computer dovrebbe essere già aggiornato.</p>
<p>Anche questo comando ti mostrerà un elenco dei pacchetti che verranno installati, insieme alla quantità di spazio su disco che occuperanno. Entra <code>Y</code> (o <em>S</em>) per continuare.</p>
<p>Al termine dell&rsquo;installazione, esegui un semplice script di sicurezza preinstallato con MySQL che rimuoverà alcune pericolose impostazioni predefinite e bloccherà l&rsquo;accesso al tuo sistema di database (Se sei in locale non è necessario). Avvia lo script interattivo eseguendo:</p>
<pre tabindex="0"><code>sudo mysql_secure_installation
</code></pre><p>Questo ti chiederà se vuoi configurare il <code>VALIDATE PASSWORD PLUGIN</code>.</p>
<p><strong>Nota:</strong> l&rsquo;abilitazione di questa funzione è una sorta di chiamata di giudizio. Se abilitato, le password che non corrispondono ai criteri specificati verranno rifiutate da MySQL con un errore. Ciò causerà problemi se si utilizza una password debole insieme al software che configura automaticamente le credenziali utente di MySQL, come i pacchetti Ubuntu per phpMyAdmin. È sicuro lasciare la convalida disabilitata, ma dovresti sempre usare password complesse e univoche per le credenziali del database.</p>
<p>Rispondi <code>Y</code> per sì o per qualsiasi altra cosa per continuare senza abilitare.</p>
<pre tabindex="0"><code>VALIDATE PASSWORD PLUGIN can be used to test passwords
and improve security. It checks the strength of password
and allows the users to set only those passwords which are
secure enough. Would you like to setup VALIDATE PASSWORD plugin?

Press y|Y for Yes, any other key for No:
</code></pre><p>Se rispondi &ldquo;sì&rdquo;, ti verrà chiesto di selezionare un livello di convalida della password. Tieni presente che se inserisci <code>2</code>, il livello più forte, riceverai errori quando tenti di impostare una password che non contenga numeri, lettere maiuscole e minuscole e caratteri speciali o che sia basata su parole comuni del dizionario.</p>
<pre tabindex="0"><code>There are three levels of password validation policy:

LOW    Length &gt;= 8
MEDIUM Length &gt;= 8, numeric, mixed case, and special characters
STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  file

Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 1
</code></pre><p>Indipendentemente dal fatto che tu abbia scelto di impostare <code>VALIDATE PASSWORD PLUGIN</code>, il tuo server ti chiederà successivamente di selezionare e confermare una password per l&rsquo; utente <strong>root</strong> MySQL. Questo non deve essere confuso con il <strong>root di sistema</strong>. L&rsquo; utente <strong>root del database</strong> è un utente amministrativo con privilegi completi sul sistema del database. Anche se il metodo di autenticazione predefinito per l&rsquo;utente root MySQL dispensa l&rsquo;uso di una password, <strong>anche quando ne è impostata una</strong> , dovresti definire qui una password complessa come misura di sicurezza aggiuntiva. Ne parleremo tra un momento.</p>
<p>Se hai abilitato la convalida della password, ti verrà mostrata la sicurezza della password per la password di root che hai appena inserito e il tuo server ti chiederà se vuoi cambiare quella password. Se sei soddisfatto della tua password attuale, digita <code>N</code>:</p>
<pre tabindex="0"><code>Using existing password for root.

Estimated strength of the password: 100
Change the password for root ? ((Press y|Y for Yes, any other key for No) : n
</code></pre><p>Per il resto delle domande, premere <code>Y</code> e premere <code>ENTER</code> ad ogni prompt. Ciò rimuoverà alcuni utenti anonimi e il database di test, disabiliterà gli accessi root remoti e caricherà queste nuove regole in modo che MySQL rispetti immediatamente le modifiche apportate.</p>
<p>Al termine, verifica se riesci ad accedere alla console MySQL digitando:</p>
<pre tabindex="0"><code>sudo mysql
</code></pre><p>Questo si collegherà al server MySQL come utente <strong>root</strong> del database amministrativo, che viene dedotto dall&rsquo;uso di <code>sudo</code> quando si esegue questo comando. Dovresti vedere un output come questo:</p>
<pre tabindex="0"><code>OutputWelcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 5
Server version: 5.7.34-0ubuntu0.18.04.1 (Ubuntu)

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&gt;
</code></pre><p>Per uscire dalla console MySQL, digita:</p>
<pre tabindex="0"><code>exit
</code></pre><p>Tieni presente che non è necessario fornire una password per connettersi come utente <strong>root</strong> , anche se ne è stata definita una durante l&rsquo;esecuzione dello  <code>mysql_secure_installation</code>. Questo perché il metodo di autenticazione predefinito per l&rsquo;utente MySQL amministrativo è <code>unix_socket</code> invece di <code>password</code>. Anche se all&rsquo;inizio potrebbe sembrare un problema di sicurezza, rende il server del database più sicuro perché gli unici utenti autorizzati ad accedere come utente <strong>root</strong> MySQL sono gli utenti del sistema con privilegi sudo che si connettono dalla console o tramite un&rsquo;applicazione in esecuzione con gli stessi privilegi. In termini pratici, ciò significa che non sarai in grado di utilizzare l&rsquo;utente <strong>root</strong> del database amministrativo per connetterti dalla tua applicazione PHP. L&rsquo;account MySQL funge da salvaguardia, nel caso in cui il metodo di autenticazione predefinito venga modificato da <code>unix_socket</code> a <code>password</code>.</p>
<p>Per una maggiore sicurezza, è meglio disporre di account utente dedicati con privilegi meno estesi impostati per ogni database, soprattutto se prevedi di avere più database ospitati sul tuo server, ma su questo creerò altre guide più dettagliate in futuro.</p>
<p>Il tuo server MySQL è ora installato e protetto. Vediamo ora come installare PHP, il componente finale nello stack LAMP.</p>
<h2 id="passaggio-3-installazione-di-php">Passaggio 3: installazione di PHP</h2>
<p>PHP è il componente della configurazione che elaborerà il codice per visualizzare il contenuto dinamico. Può eseguire script, connettersi ai tuoi database MySQL per ottenere informazioni e consegnare il contenuto elaborato al tuo server web in modo che possa mostrare i risultati ai tuoi visitatori.</p>
<p>Ancora una volta, sfrutta il sistema apt per installare PHP. Oltre al pacchetto php, dovrai anche integrare libapache2-mod-php in Apache e il pacchetto php-mysql per consentire a PHP di connettersi ai database MySQL. Esegui il comando seguente per installare tutti e tre i pacchetti e le relative dipendenze:</p>
<pre tabindex="0"><code>sudo apt install php libapache2-mod-php php-mysql
</code></pre><p>Questo dovrebbe installare PHP senza problemi. Lo testeremo tra un momento.</p>
<h3 id="modifica-dellindice-della-directory-di-apache-opzionale">Modifica dell&rsquo;indice della directory di Apache (opzionale)</h3>
<p>In alcuni casi, vorrai modificare il modo in cui Apache serve i file quando viene richiesta una directory. Di default, se un utente richiede una directory dal server, Apache cercherà prima un file chiamato <code>index.html</code>. Ma noi vogliamo dire al server web di preferire i file PHP rispetto ad altri, per fare in modo che Apache cerchi <code>index.php</code> come primoo file. In caso contrario, un <code>index.html</code> inserito nella radice del documento dell&rsquo;applicazione avrà sempre la precedenza su un <code>index.php</code>.</p>
<p>Per apportare questa modifica, apri il file di configurazione <code>dir.conf</code> in un editor di testo a tua scelta. Qui useremo <code>nano</code>:</p>
<pre tabindex="0"><code>sudo nano /etc/apache2/mods-enabled/dir.conf
</code></pre><p>Dovresti vedere una cosa del genere:</p>
<pre tabindex="0"><code>&lt;IfModule mod_dir.c&gt;
    DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm
&lt;/IfModule&gt;
</code></pre><p>Sposta il file di indice PHP (evidenziato sopra) nella prima posizione dopo la <code>DirectoryIndex</code>, in questo modo:</p>
<pre tabindex="0"><code>&lt;IfModule mod_dir.c&gt;
    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
&lt;/IfModule&gt;
</code></pre><p>Al termine, salva e chiudi il file premendo <code>CTRL+X</code>. Conferma il salvataggio digitando <code>Y</code> e quindi premi <code>ENTER</code> per verificare la posizione di salvataggio del file.</p>
<p>Successivamente, riavvia il server Web Apache in modo che le modifiche vengano riconosciute. Puoi farlo con il seguente comando:</p>
<pre tabindex="0"><code>sudo systemctl restart apache2
</code></pre><p>Puoi anche controllare lo stato del <code>apache2</code>servizio utilizzando <code>systemctl</code>:</p>
<pre tabindex="0"><code>sudo systemctl status apache2
</code></pre><pre tabindex="0"><code>Sample Output● apache2.service - The Apache HTTP Server
   Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)
  Drop-In: /lib/systemd/system/apache2.service.d
           └─apache2-systemd.conf
   Active: active (running) since Thu 2021-07-15 09:22:59 UTC; 1h 3min ago
 Main PID: 3719 (apache2)
    Tasks: 55 (limit: 2361)
   CGroup: /system.slice/apache2.service
           ├─3719 /usr/sbin/apache2 -k start
           ├─3721 /usr/sbin/apache2 -k start
           └─3722 /usr/sbin/apache2 -k start

Jul 15 09:22:59 ubuntu1804 systemd[1]: Starting The Apache HTTP Server...
Jul 15 09:22:59 ubuntu1804 apachectl[3694]: AH00558: apache2: Could not reliably determine the server&#39;s fully qualified domain name, using 127.0.1.1. Set the &#39;ServerName&#39; di
Jul 15 09:22:59 ubuntu1804 systemd[1]: Started The Apache HTTP Server.
</code></pre><p>Premi <code>Q</code> per uscire da questo stato.</p>
<h2 id="passaggio-4-configurazione-di-un-host-virtuale-consigliato">Passaggio 4: configurazione di un host virtuale (consigliato)</h2>
<p>Quando si utilizza il server Web Apache, è possibile utilizzare <em>host virtuali</em> per incapsulare i dettagli di configurazione e ospitare più di un dominio da un singolo server. Imposteremo ora un dominio di esempio chiamato <strong><strong>il_mio_dominio</strong></strong>, potrai sostituirlo con il nome del dominio che desideri utilizzare.</p>
<p>Apache su ha un blocco server abilitato per impostazione predefinita che è configurato per servire i documenti dalla cartella <code>/var/www/html</code>. Sebbene funzioni bene per un singolo sito, può diventare ingombrante se ospiti più siti. Invece di modificare <code>/var/www/html</code>, creiamo una struttura di directory all&rsquo;interno <code>/var/www</code> per <strong>il sito il_mio_dominio</strong>, lasciando <code>/var/www/html</code> come directory predefinita da servire se una richiesta del client non corrisponde a nessun altro sito.</p>
<p>Crea la directory per <strong><strong>il_mio_dominio</strong></strong> come segue:</p>
<pre tabindex="0"><code>sudo mkdir /var/www/il_mio_dominio
</code></pre><p>Quindi, assegna la proprietà della directory con la variabile di ambiente <code>$USER</code>, che fa riferimento all&rsquo;utente registrato corrente:</p>
<pre tabindex="0"><code>sudo chown -R $USER:$USER /var/www/il_mio_dominio
</code></pre><p>I permessi della tua directory principale web dovrebbero essere corretti se non hai modificato il suo valore umask, ma puoi comunque digitare:</p>
<pre tabindex="0"><code>sudo chmod -R 755 /var/www/il_mio_dominio
</code></pre><p>Ora crea una pagina di esempio <code>index.html</code> utilizzando <code>nano</code> o il tuo editor preferito:</p>
<pre tabindex="0"><code>nano /var/www/il_mio_dominio/index.html
</code></pre><p>All&rsquo;interno, aggiungi il seguente codice HTML di esempio:</p>
<pre tabindex="0"><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Il Mio Dominio&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Il mio dominio FUNZIONA!!!&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Salva e chiudi il file quando hai finito.</p>
<p>Affinché Apache possa servire questo contenuto, è necessario creare un file host virtuale con le direttive corrette. Invece di modificare il file di configurazione predefinito che si trova <code>/etc/apache2/sites-available/000-default.conf</code> direttamente in, creiamone uno nuovo in :<code>/etc/apache2/sites-available/il_mio_dominio.conf</code></p>
<pre tabindex="0"><code>sudo nano /etc/apache2/sites-available/il_mio_dominio.conf
</code></pre><p>Incolla il seguente blocco di configurazione, che è simile a quello predefinito, ma aggiornato per la nostra nuova directory e nome di dominio:/etc/apache2/sites-available/il_mio_dominio.conf</p>
<pre tabindex="0"><code>&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@localhost
    ServerName il_mio_dominio
    ServerAlias www.il_mio_dominio
    DocumentRoot /var/www/il_mio_dominio
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
&lt;/VirtualHost&gt;
</code></pre><p>Nota che abbiamo aggiornato il <code>DocumentRoot</code> alla nostra nuova directory e <code>ServerAdmin</code> a un&rsquo;e-mail a cui l&rsquo; amministratore del sito <strong><strong>il_mio_dominio</strong></strong> può accedere. Abbiamo anche aggiunto due direttive: <code>ServerName</code>, che stabilisce il dominio di base che dovrebbe corrispondere a questa definizione di host virtuale e <code>ServerAlias</code>, che definisce altri nomi che dovrebbero corrispondere come se fossero il nome di base.</p>
<p>Salva e chiudi il file quando hai finito.</p>
<p>Abilitiamo ora il file con lo strumento <code>a2ensite</code>:</p>
<pre tabindex="0"><code>sudo a2ensite il_mio_dominio.conf
</code></pre><p>Disabilita infine il sito predefinito definito in <code>000-default.conf</code>:</p>
<pre tabindex="0"><code>sudo a2dissite 000-default.conf
</code></pre><p>Quindi, testiamo gli errori di configurazione:</p>
<pre tabindex="0"><code>sudo apache2ctl configtest
</code></pre><p>Dovresti vedere il seguente output:</p>
<pre tabindex="0"><code>OutputSyntax OK
</code></pre><p>Riavvia Apache per implementare le modifiche:</p>
<pre tabindex="0"><code>sudo systemctl restart apache2
</code></pre><p>Apache dovrebbe ora servire il tuo nome di dominio. Puoi testarlo navigando su <code>http://il_mio_dominio</code>, dovresti vedere la pagina HTML creata poco fa funzionare correttamente.</p>
<p>Con ciò, il tuo host virtuale è completamente configurato. Prima di apportare ulteriori modifiche o distribuire un&rsquo;applicazione, tuttavia, sarebbe utile testare in modo proattivo la configurazione PHP nel caso in cui ci siano problemi che dovrebbero essere risolti.</p>
<h2 id="passaggio-5-testare-lelaborazione-php-sul-server-web">Passaggio 5: testare l&rsquo;elaborazione PHP sul server Web</h2>
<p>Per verificare che il tuo sistema sia configurato correttamente per PHP, crea uno script PHP chiamato <code>info.php</code>. Affinché Apache possa trovare questo file e servirlo correttamente, deve essere salvato nella directory principale del Web.</p>
<p>Crea il file nella radice web che hai creato nel passaggio precedente eseguendo:</p>
<pre tabindex="0"><code>sudo nano /var/www/il_mio_dominio/info.php
</code></pre><p>Questo aprirà un file vuoto. Aggiungi il seguente testo, che è un codice PHP valido, all&rsquo;interno del file:</p>
<pre tabindex="0"><code>&lt;?php
phpinfo();
</code></pre><p>Al termine, salva e chiudi il file.</p>
<p>Ora puoi verificare se il tuo server web è in grado di visualizzare correttamente il contenuto generato da questo script PHP. Per provarlo, visita questa pagina nel tuo browser web. Avrai bisogno di nuovo dell&rsquo;indirizzo IP pubblico o del nome di dominio del tuo server.</p>
<p>L&rsquo;indirizzo che vorrai visitare è:</p>
<pre tabindex="0"><code>http://il_mio_dominio/info.php
</code></pre><p>La pagina a cui vieni dovrebbe assomigliare a questa:</p>
<p><img src="images/small_php_info_1804-796x1024.png" alt=""></p>
<p>Questa pagina fornisce alcune informazioni di base sul tuo server dal punto di vista di PHP. È utile per il debug e per garantire che le impostazioni vengano applicate correttamente.</p>
<p>Se riesci a vedere questa pagina nel tuo browser, il tuo PHP funziona come previsto.</p>
<p>Probabilmente vorrai rimuovere questo file dopo questo test perché potrebbe effettivamente fornire informazioni sul tuo server a utenti non autorizzati. Per fare ciò, esegui il seguente comando:</p>
<pre tabindex="0"><code>sudo rm /var/www/il_mio_dominio/info.php
</code></pre><p>Puoi sempre ricreare questa pagina se hai bisogno di accedere nuovamente alle informazioni in un secondo momento.</p>
<h2 id="conclusione">Conclusione</h2>
<p>Ora che hai installato uno stack LAMP, hai molte scelte su cosa fare dopo. Hai installato una piattaforma che ti consentirà di installare la maggior parte dei tipi di siti Web e software Web sul tuo server.</p>
<p>Non ti resta che iniziare a installare o sviluppare i tuoi siti in PHP sul tuo nuovo LAMP stack!</p>
<p>Buon codice!</p>
]]></content>
		</item>
		
		<item>
			<title>Usare il browser senza mouse – Hacker Style</title>
			<link>https://albertoreineri.it/en/blog/usare-il-browser-senza-mouse-hacker-style/</link>
			<pubDate>Mon, 06 Jun 2022 09:34:22 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/usare-il-browser-senza-mouse-hacker-style/</guid>
			<description>Passiamo molto, moltissimo tempo sul browser ormai, e usare il mouse per la navigazione può essere frustranete per noi sviluppatori… Ma è possibile farne a meno e muoversi solamente utilizzando la tastiera, come un vero hacker! Vediamo come si fa.
Vimium Extension Per prima cosa devi scaricare l&amp;rsquo;estensione Vimium. Io uso Google Chrome, ma è presente anche per Firefox e Safari (se usi Brave o Edge non preoccuparti, puoi installare l&amp;rsquo;estensione per Google Chrome, funzionerà perfettamente perché questi browser condividono la stessa base).</description>
			<content type="html"><![CDATA[<p>Passiamo molto, moltissimo tempo sul browser ormai, e usare il mouse per la navigazione può essere frustranete per noi sviluppatori… Ma è possibile farne a meno e muoversi solamente utilizzando la tastiera, come un vero hacker! Vediamo come si fa.</p>
<h2 id="vimium-extension">Vimium Extension</h2>
<p>Per prima cosa devi scaricare l&rsquo;estensione <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="noreferrer noopener">Vimium</a>. Io uso Google Chrome, ma è presente anche per <a href="https://addons.mozilla.org/it/firefox/addon/vimium-ff/" target="_blank" rel="noreferrer noopener">Firefox</a> e <a href="https://apps.apple.com/us/app/vimari/id1480933944?mt=12" target="_blank" rel="noreferrer noopener">Safari</a> (se usi Brave o Edge non preoccuparti, puoi installare l&rsquo;estensione per Google Chrome, funzionerà perfettamente perché questi browser condividono la stessa base).</p>
<p>Dopo averla installata potrete iniziare ad utilizzare il vostro browser direttamente dalla tasitera.</p>
<p>La base dei comandi è quella del software Vim, quindi se siete su Linux probabilmente vi troverete già a vostro agio, altrimenti non preoccupatevi, basterà qualche minuti di pratica per abbandonare il mouse per sempre!</p>
<p>Ecco i comandi principali per utilizzarlo:</p>
<h2 id="navigare-nella-pagina-corrente">Navigare nella pagina corrente:</h2>
<pre class="wp-block-code"><code>?       mostra l'elenco dei comandi disponibili (molto utile all'inizio)
h       scroll verso sinistra
j       scroll verso il basso
k       scroll verso l'alto
l       scroll verso destra
gg      scroll in cima alla pagina
G       scroll in fondo alla pagina
d       scroll in basso di metà pagina
u       scroll in alto di metà pagina
f       apri un link nella tab corrente
F       apri link in nuova tab
r       ricarica
gs      visualizza codice sorgente</code></pre>
<h2 id="navigare-in-altre-pagina">Navigare in altre pagina:</h2>
<pre class="wp-block-code"><code>o       Apri URL
O       Apri URL in nuova tab
b       Apri preferiti
B       Apri preferiti in nuova tab</code></pre>
<h2 id="cronologia">Cronologia:</h2>
<pre class="wp-block-code"><code>H       Vai a pagina precedente
L       Vai a pagina successiva</code></pre>
<h2 id="manipolazione-tabs">Manipolazione tabs:</h2>
<pre class="wp-block-code"><code>J, gT      Vai un tab verso sinistra
K, gt      Vai un tab verso destra
g0         Vai alla prima tab
g$         Vai all'ultima tab
t          Crea tab
x          Chiudi tab corrente
X          Riapri tab chiusa
T          Cerca fra le tab</code></pre>
<p>Ecco qua, questi sono solamente i comandi principali, ne esistono altri che puoi leggere qua: <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="noreferrer noopener"><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb">https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb</a></a></p>
<p>E questo è tutto! Non ti resta che provare ad utilizzarli e vedrai che in breve tempo potrai usare il browser totalmente in hacker style ?‍?</p>
<p>Come sempre <em>buon codice!</em></p>
]]></content>
		</item>
		
		<item>
			<title>Amo Linux, ma sono ancora su Mac…</title>
			<link>https://albertoreineri.it/en/blog/amo-linux-ma-sono-ancora-su-mac/</link>
			<pubDate>Mon, 21 Mar 2022 22:19:04 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/amo-linux-ma-sono-ancora-su-mac/</guid>
			<description>Se mi segui da un po&amp;rsquo; di tempo saprai sicuramente quanto ami il mondo Linux! È un ambiente che talvolta mi fa venire il mal di testa, mi fa arrabbiare, mi costringe a bloccarmi sulle cose per capire come funzionano, ma ha anche la bellezza di sentirsi maggiormente padroni dei nostri pc, capire come funzionano sotto la scocca e poterli gestire meglio a nostro piacimento!
Ah, prima che qualcuno inizi ad insultarmi, in questo articolo parlo di Linux Desktop!</description>
			<content type="html"><![CDATA[<p>Se mi segui da un po&rsquo; di tempo saprai sicuramente quanto ami il mondo <a href="/blog/perche-dovremmo-tutti-passare-a-linux-e-perche-non-lo-facciamo/">Linux</a>! È un ambiente che talvolta mi fa venire il mal di testa, mi fa arrabbiare, mi costringe a bloccarmi sulle cose per capire come funzionano, ma ha anche la bellezza di sentirsi maggiormente padroni dei nostri pc, capire come funzionano sotto la scocca e poterli gestire meglio a nostro piacimento!</p>
<p>Ah, prima che qualcuno inizi ad insultarmi, in questo articolo parlo di Linux Desktop! Sui miei server utilizzo solamente linux da anni e gira tutto a meraviglia! (Anche sul server però non è tutto così automatico, bisogna studiare a capirne le basi, però poi una volta montato il tutto funziona alla grande!)</p>
<p>Bene, fatte le dovute spiegazioni entriamo in argomento!</p>
<h2 id="sono-ancora-su-mac-os8230">Sono ancora su Mac Os…</h2>
<p>Se avete guardato i miei ultimi video avrete notato sicuramente che ho filmato tutto quanto su <a href="/blog/nuovo-macbook-pro-2020-per-sviluppo-web/">Mac OS</a>. Ebbene si, dopo aver ripetutamente affermato di amare Linux sono ancora qua che utilizzo il mio MacBook Pro… Che razza di incoerente che sono…..</p>
<p>Non ho paura di ammetterlo, spesso me lo dico da solo, sono un incoerente e la cosa non mi piace affatto… Ma non è così semplice purtroppo.</p>
<p>Ho provato più volte a spostarmi definitivamente su Linux ma ho sempre dovuto fare marcia indietro, e ora credo di aver trovato la causa definitiva, ma da buon narratore te la rivelerò solamente alla fine di questo articolo. (certo se proprio sei impaziente puoi scorrere al volo alla conclusione…)</p>
<h2 id="perché-amo-linux">Perché amo Linux</h2>
<p>Ci sono molti motivi per cui amo il mondo di Linux, ma la cosa che preferisco è che si sgancia da ogni meccanismo di marketing che oggi ci affligge costantemente. Non abbiamo il tempo di acquistare qualcosa che questa è già stata rimpiazzata da un modello più performante. E infine i prodotti hanno una durata prefissata, l&rsquo;obsolescenza programmata ormai è un dato di fatto!</p>
<p>Questo non mi piace per niente…. Non ho voglia di perdere tempo guardando fantastiche presentazioni di prodotti che mi fanno venire voglia di sprecare i miei soldi per acquistare attrezzature spesso superflue…</p>
<p>Inoltre Linux è meritocratico! Più ne sai meno fatichi, tutto qua. Se sei alle prime armi lo odi con tutto il cuore, poi quando inizi a smanettarci a dovere allora non puoi più farne a meno! Sei padrone della tua macchina e puoi usarla esattamente come vuoi tu!</p>
<p>Infine in un mondo in cui la nostra privacy non ha più gran valore, i nostri meta dati sono sotto gli occhi di tutti e la sicurezza informatica sta diventando sempre più importante, l&rsquo;open source può garantire un buon livello di protezione! Non sono un fanatico della privacy, ho anche io un account gmail, però credo che bisogna avere la giusta consapevolezza, cercare di stare in una giusta via di mezzo fra l&rsquo;accedere a qualsivoglia contenuto con i nostri dati personali e il criptare ogni singolo file sul PC… Niente paranoie ma nemmeno troppo lassismo.</p>
<h2 id="perché-non-sono-ancora-passato-definitivamente-a-linux">Perché non sono ancora passato definitivamente a Linux</h2>
<p>Come dicevo all&rsquo;inizio però sono ancora sul Mac, anche se non sono pienamente soddisfatto… E tutto questo a causa dell&rsquo;hardware che ho a disposizione, almeno è quello che sto dicendo a me stesso in questo momento.</p>
<p>Tempo fa ho visto un video molto interessante di uno dei miei creator preferiti: Riccardo Palombo. In un video su YouTube diceva che “Non ci serve nuovo hardware, ma nuovo software”, o qualcosa di molto simile. Che titolo meraviglioso! Però nel mio caso non funziona purtroppo….</p>
<p>Fermi un attimo, Riccardo ha ragione e sono daccordo con lui sulla questione software, però ho notato che, almeno per me, l&rsquo;hardware è anche molto molto importante!</p>
<p>Se sto scrivendo dal mio MacBook Pro non è di certo per Mac Os, né per i software al suo interno. Non mi importa nemmeno più di Photoshop ultimamente, ma è per l&rsquo;hardware!</p>
<p>Tastiera, touchpad, schermo, batteria, microfono, ventole e tempi di ricarica sono buoni sul mio Mac, e sto parlando ancora della versione con Intel. Non c&rsquo;è niente di eccezzionale, ma tutto funziona alla grande, non ho mai avuto crash ed è un computer ben bilanciato e tutto sommato silenzioso (a parte quando lavoro con Docker…)</p>
<p>Oltre al Mac ho un notebook ASUS su cui utilizzo Linux, e sono arrivato alla conclusione che il punto più debole del pc è proprio l&rsquo;hardware… In particolare ho uno schermo penoso, delle ventole rumorosissime e una batteria ridicola…</p>
<p>Certo non è il notebook giusto da utilizzare con Linux, ma quando l&rsquo;ho comprato non pensavo che sarei diventato pinguino dipendente ? ?.</p>
<p>Col Mac invece posso lavorare serenamente senza paura di finire la batteria senza accorgermene, potendo registrare il mio podcast direttamente dal microfono del laptop senza attaccare niente di esterno (anche perché non ha grandi porte ?) e posso arrivare a sera con gli occhi ancora sani e non lacrimanti come quando uso l&rsquo;ASUS….</p>
<p>L&rsquo;unico modo con cui lavoro bene con l&rsquo;ASUS è usandolo come se fosse un pc fisso. Ci attacco tastiera, mouse e schermo esterni, lo chiudo e mi scordo di avere un notebook, allora devo dire che gira molto bene.</p>
<p>Purtroppo però per il mio stile di vita è fondamentale avere un laptop su cui potermi fidare. Spesso mi sposto per qualche giorno in montagna dove non ho grosso spazio disponibile, e per il momento il Mac è veramente comodo!</p>
<p>Vantaggi: con un solo caricatore posso caricare Mac, Smartphone e iPad (con connettore usbc-lightning), posso usare l&rsquo;iPad come secondo schermo senza collegare nessun cavo e posso fare a meno del mouse perché il touchpad è una vera bomba!</p>
<h2 id="conclusione">Conclusione</h2>
<p>E voilà, tutto qua! Perciò ora sono ancora imprigionato nel mondo Apple. Per carità, se mettessi da parte i concetti ideologici allora potrei rimanere così a vita, ma il marketing pompante, l&rsquo;overpricing e il fattore “moda” non mi fanno sentire del tutto a mio agio…</p>
<p>Come posso risolvere? Dovrei provare a mettere le mani su un bel ThinkPad oppure un XPS e vedere come mi trovo, ma al momento non ho il budget disponibile per fare questo test…</p>
<p>C&rsquo;è anche da dire che scegliere un laptop per Linux non è così facile…. Stanno nascendo aziende specializzate in notebook Linux, come la spagnola Slimbook, ma devo studiare meglio i loro prodotti prima di lanciarmi nell&rsquo;acquisto.</p>
<p>Alla fine mi basterebbe un notebook con 4 pezzi di qualità: tastiera, touchpad, batteria e schermo. Purtroppo però capita spesso che i laptop windows pompino molto su processore e ram e meno sull&rsquo;esperienza d&rsquo;uso dell&rsquo;utente, che per noi programmatori è importantissima, almeno per me.</p>
<p>Se devo passare dieci ore al giorno al PC, deve almeno essere carino e piacevole da usare!</p>
<p>Questo è quanto per ora, appena metterò le mani su un ThinkPad vi farò sapere di più!</p>
<p>Keep Coding ?</p>
]]></content>
		</item>
		
		<item>
			<title>Come creare un effetto Overlay in CSS</title>
			<link>https://albertoreineri.it/en/blog/come-creare-un-effetto-overlay-in-css/</link>
			<pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/come-creare-un-effetto-overlay-in-css/</guid>
			<description>Personalmente utilizzo moltissimo gli overlay per migliorare la leggibilità del testo sopra un&amp;rsquo;immagine, ma che cos&amp;rsquo;è questo overlay?
In poche parole non è nient&amp;rsquo;altro che un livello intermedio fra l&amp;rsquo;immagine e il testo, un livello che va &amp;lsquo;opacizzare&amp;rsquo; l&amp;rsquo;immagine per rendere più leggibile il testo.
Logicamente con l&amp;rsquo;overlay il testo risulta molto più leggibile, e secondo me l&amp;rsquo;immagnie è anche meno impattante, meno fastidiosa.
Farlo non è affatto difficile.
Come si fa Basterà recarci all&amp;rsquo;interno del contenitore dell&amp;rsquo;immagine, in questo caso nel div con classe sidebar e aggiungere un elemento chiamato &amp;ldquo;overlay&amp;rdquo;</description>
			<content type="html"><![CDATA[<p>Personalmente utilizzo moltissimo gli overlay per migliorare la leggibilità del testo sopra un&rsquo;immagine, <strong>ma che cos&rsquo;è questo overlay?</strong></p>
<p>In poche parole non è nient&rsquo;altro che un <strong>livello intermedio fra l&rsquo;immagine e il testo</strong>, un livello che va &lsquo;opacizzare&rsquo; l&rsquo;immagine per rendere più leggibile il testo.</p>
<p>Logicamente <strong>con l&rsquo;overlay il testo risulta molto più leggibile</strong>, e secondo me l&rsquo;immagnie è anche meno impattante, meno fastidiosa.</p>
<p>Farlo non è affatto difficile.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/KiZMQCs0SSg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="come-si-fa">Come si fa</h2>
<p>Basterà recarci all&rsquo;interno del contenitore dell&rsquo;immagine, in questo caso nel <em>div</em> con classe <em>sidebar</em> e aggiungere un elemento chiamato &ldquo;<em>overlay</em>&rdquo;</p>
<pre tabindex="0"><code> &lt;div class=&#34;sidebar&#34; style=&#34;background:url(&#39;https://images.unsplash.com/photo-1534067783941-51c9c23ecefd?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=774&amp;q=80&#39;)&#34;&gt;
        &lt;div class=&#34;overlay&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;sidebar-inner&#34;&gt;
            &lt;div class=&#34;site-header&#34;&gt;
                &lt;h2&gt;Nome Sito Web&lt;/h2&gt;
                &lt;i&gt;Lorem ipsum dolor sit amet&lt;/i&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
</code></pre><p>Con l&rsquo;html siamo a posto, ora spostiamoci nel nostro file <strong>CSS</strong> e dobbiamo solamente creare questa classe:</p>
<pre tabindex="0"><code>.overlay{
    position: absolute;
    top:0;
    left: 0;
    right: 0;
    bottom:0;
    background-color: rgba(0, 0, 0, 0.4);
    z-index: 2;
    width: 100%;
    height: 100%;
}
</code></pre><p><em><strong>E Voilà! Tutto finito!</strong></em></p>
<p>Ora non resta che personalizzarla a piacere, cambiando il colore e il livello di opacità.</p>
<p><em>Buon codice!</em></p>
]]></content>
		</item>
		
		<item>
			<title>Hide the extension at the end of the URL</title>
			<link>https://albertoreineri.it/en/blog/hide-the-extension-at-the-end-of-the-url/</link>
			<pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/hide-the-extension-at-the-end-of-the-url/</guid>
			<description>Today, having the extension at the end of the URL is not ideal, both for SEO and for the overall impression the site makes on the end user. It would be better to hide it.
The ability to choose our URLs is crucial for creating a good website. By using PHP pages correctly, you can easily achieve this result by simply hiding the extension from the URL.
In this guide, we will see how to &amp;ldquo;remove&amp;rdquo; the .</description>
			<content type="html"><![CDATA[<p>Today, having the extension at the end of the URL is not ideal, both for SEO and for the overall impression the site makes on the end user. It would be better to hide it.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/VWqwsKL2-mM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>The <strong>ability to choose our URLs</strong> is crucial for creating a good website. By using PHP pages correctly, you can easily achieve this result by simply hiding the extension from the URL.</p>
<p>In this guide, we will see how to <strong>&ldquo;remove&rdquo; the .php</strong> at the end of the URL.</p>
<p>To do this, simply <strong>insert the following code into the .htaccess file</strong> in the root of the site. If the .htaccess file does not exist, create it using a text editor.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span>RewriteEngine <span style="color:#66d9ef">on</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RewriteCond %{THE_REQUEST} /([^.]+)\.php [NC]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RewriteRule ^ /%1 [NC,L,R]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RewriteCond %{REQUEST_FILENAME}.php -f
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RewriteRule ^ %{REQUEST_URI}.php [NC,L]
</span></span></code></pre></div><p>This way, all your &ldquo;.php&rdquo; files will be displayed without an extension.</p>
<p>By doing this, the entire site will be better. The addresses will be much more &ldquo;SEO friendly,&rdquo; and the website&rsquo;s security will also benefit.</p>
<p>If you look at the modern websites of large companies, hardly anyone uses the extension at the end of the URL anymore.</p>
<p>Today, we can also use frameworks that allow us to manage URLs in a completely customized and optimal way, but we don&rsquo;t always need an entire framework. Often, for small projects, it&rsquo;s worth doing things from scratch, and in these cases, just a few lines of code in the .htaccess file can easily hide the extension from the URL.</p>
<p>If you want to learn how to use a simple routing system to organize the website in the best way and manage your URLs effectively, read this <a href="/en/blog/simple-routing-system-in-php/">article</a>. It&rsquo;s very basic and simple but can be used for small projects without big demands. Of course, it has nothing to do with the routing of <a href="https://laravel.com/">Laravel</a>, for example, but it can be a good starting point to improve your skills.</p>
]]></content>
		</item>
		
		<item>
			<title>WordPress Starter Theme</title>
			<link>https://albertoreineri.it/en/blog/wordpress-starter-theme/</link>
			<pubDate>Wed, 18 Dec 2019 21:44:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/wordpress-starter-theme/</guid>
			<description>After using WordPress for various projects, I decided to create and share my starter theme.
With this project, you can start from a pre-made base and speed up the development time for a new theme from scratch.
The theme already includes:
bootstrap font awesome back on top Developing themes from scratch allows for highly customized results, providing almost total customization, optimization of loading times, and increased site security, provided you know what you&amp;rsquo;re doing.</description>
			<content type="html"><![CDATA[<p>After using WordPress for various projects, I decided to create and share my starter theme.</p>
<p>With this project, you can start from a pre-made base and speed up the development time for a new theme from scratch.</p>
<p>The theme already includes:</p>
<ul>
<li>bootstrap</li>
<li>font awesome</li>
<li>back on top</li>
</ul>
<p>Developing themes from scratch allows for highly customized results, providing almost total customization, optimization of loading times, and increased site security, provided you know what you&rsquo;re doing.</p>
<h2 id="no-pre-made-themes">No pre-made themes</h2>
<p>This is entirely my personal opinion, and it may be shared or not.</p>
<p>Personally, I have never felt comfortable with pre-made themes available on platforms like Themeforest or similar. There&rsquo;s always something I want to do but can&rsquo;t&hellip;</p>
<p>I prefer to start from scratch and have complete control over everything, be able to move as I want, take charge of problems, and solve them in what I think is the best way.</p>
<p>After all, I&rsquo;m a developer, and I don&rsquo;t like drag and drop much&hellip; I prefer code!</p>
<p>But starting from scratch every time can be heavy, boring, and a waste of time. So I created a starter theme, a basic WordPress theme that already includes all the necessary layouts, some libraries, the search form, and other small things that allow me to start working on the fun part of the site immediately.</p>
<p>This way, I don&rsquo;t have to start from scratch every time; I already have a working skeleton ready to be used.</p>
<h2 id="open-source-starter-theme-for-wordpress">Open Source Starter Theme for WordPress</h2>
<p>After creating the Orange Starter Theme for WordPress and successfully using it on many websites, I decided to make it <a href="https://github.com/albertoreineri/orange-starter-theme">open source</a>, so it can be used and expanded by anyone.</p>
<p>Any possible bugs can be reported to me via <a href="https://github.com/albertoreineri/orange-starter-theme">GitHub</a> or directly through the contact form on this site; I will take care of the problem and solve it as quickly as possible.</p>
]]></content>
		</item>
		
		<item>
			<title>How to use GIT</title>
			<link>https://albertoreineri.it/en/blog/how-to-use-git/</link>
			<pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/how-to-use-git/</guid>
			<description>Not long ago, I wrote an article praising Git, a version control software I can&amp;rsquo;t live without. So, I decided to create a guide to explain how to use GIT!
BUT HOW DO YOU ACTUALLY USE GIT? IS IT HARD TO USE? Let&amp;rsquo;s start with the fact that &amp;ldquo;Git&amp;rdquo; can be translated as &amp;ldquo;idiot,&amp;rdquo; almost suggesting that it&amp;rsquo;s foolproof&amp;hellip;
Jokes aside, it&amp;rsquo;s very simple to use, and it can also be a good starting point to learn the Command Line Interface (CLI)!</description>
			<content type="html"><![CDATA[<p>Not long ago, I wrote an <a href="/en/blog/git-what-is-it/">article</a> praising <strong>Git</strong>, a version control software I can&rsquo;t live without. So, I decided to create a guide to explain how to use GIT!</p>
<h2 id="but-how-do-you-actually-use-git-is-it-hard-to-use">BUT HOW DO YOU ACTUALLY USE GIT? IS IT HARD TO USE?</h2>
<p>Let&rsquo;s start with the fact that &ldquo;Git&rdquo; can be translated as &ldquo;<em>idiot</em>,&rdquo; almost suggesting that it&rsquo;s foolproof&hellip;</p>
<p>Jokes aside, it&rsquo;s <strong>very simple</strong> to use, and it can also be a good <strong>starting point to learn the Command Line Interface (CLI)</strong>!</p>
<h2 id="installation">INSTALLATION</h2>
<p>To <strong>download</strong> Git, simply visit this site: <a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p>Once you open the link, click on &ldquo;Download,&rdquo; select your operating system, and proceed with the installation.</p>
<p>If you&rsquo;re using Windows, I recommend installing Git Bash, a nice CLI that I use for many tasks.</p>
<h2 id="usage">USAGE</h2>
<p>Once Git is installed, open Git Bash and navigate to your project folder (use the <code>cd</code> command. E.g., <code>cd C:/Users/alby/projects/app</code>).</p>
<p>Here, enter the command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init
</span></span></code></pre></div><p>Git will now be present in your project with a hidden folder called .git. Never open this folder; just leave it where it is; it won&rsquo;t hurt.</p>
<p>Now, on Git Bash, type the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add .
</span></span></code></pre></div><p>This <strong>adds</strong> all project files to the staging area, waiting to be approved.</p>
<p>Then, simply write:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;commit name&#34;</span>
</span></span></code></pre></div><p>This command <strong>commits</strong> your files, creating a version of your project. In quotes, you can write something like &ldquo;First commit,&rdquo; and in subsequent commits, you&rsquo;ll specify the changes made (e.g., &ldquo;Added login&rdquo;).</p>
<h2 id="github">GITHUB</h2>
<p>It&rsquo;s also possible to save commits on GitHub, allowing you to view and download them from anywhere. It also enables other developers to view and improve your code!</p>
<p>To do this, you need a GitHub account and create a new repository.</p>
<p>After creating a new GitHub repository, GitHub already provides the commands to &ldquo;fill&rdquo; it with your local project.</p>
<p>To do this, you need to enter:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git remote add origin https://github.com<span style="color:#f92672">[</span>repository link<span style="color:#f92672">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git push -u origin master
</span></span></code></pre></div><p>This way, your project is now on GitHub. To download it, use the command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git pull https://github.com<span style="color:#f92672">[</span>repository link<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>These are the <strong>basic commands</strong>. Once a commit is created, you can make further changes to the project and re-run the add and commit commands.</p>
<p>There are <strong>many other commands</strong> to use this software. <strong>The best way to learn them all is to use them</strong>, so get your hands dirty and try them! <strong>You won&rsquo;t be able to do without them</strong>.</p>
<p>Below, I list some of the <strong>most used commands</strong>, explained briefly.</p>
<h2 id="git-commands">GIT COMMANDS</h2>
<h3 id="git-config">git config</h3>
<p><em>Usage:</em> <code>git config --global user.name &quot;[name]&quot;</code></p>
<p><em>Usage:</em> <code>git config --global user.email &quot;[email address]&quot;</code></p>
<p>This command sets the author&rsquo;s name and email address to be used for your commits.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git config --global user.name <span style="color:#e6db74">&#34;alberto&#34;</span>
</span></span><span style="display:flex;"><span>git config --global user.email <span style="color:#e6db74">&#34;alberto@alberto.it&#34;</span>
</span></span></code></pre></div><h3 id="git-init">git init</h3>
<p><em>Usage:</em> <code>git init [repository name]</code></p>
<p>This command is used to start a new repository (project).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init DEMO
</span></span></code></pre></div><h3 id="git-clone">git clone</h3>
<p><em>Usage:</em> <code>git clone [url]</code></p>
<p>This command is used to clone a repository from an existing URL.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/albertoreineri/Simple-Header-and-Footer.git
</span></span></code></pre></div><h3 id="git-add">git add</h3>
<p><em>Usage:</em> <code>git add [file]</code></p>
<p>This command adds a file to the staging area.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add file.php
</span></span></code></pre></div><p><em>Usage:</em> <code>git add *</code></p>
<p>This command adds one or more files to the staging area.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add *
</span></span></code></pre></div><h3 id="git-commit">git commit</h3>
<p><em>Usage:</em> <code>git commit -m &quot;[Type in the commit message]&quot;</code></p>
<p>This command records or snapshots the file changes permanently in the version history.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Modified file.php&#34;</span>
</span></span></code></pre></div><h3 id="git-status">git status</h3>
<p><em>Usage:</em> <code>git status</code></p>
<p>This command lists all the files that need to be committed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git status
</span></span></code></pre></div><h3 id="git-rm">git rm</h3>
<p><em>Usage:</em> <code>git rm [file]</code></p>
<p>This command deletes the file from the working directory and stages the deletion.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git rm file.php
</span></span></code></pre></div><h3 id="git-log">git log</h3>
<p><em>Usage:</em> <code>git log</code></p>
<p>This command is used to list the version history for the current branch.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git log
</span></span></code></pre></div><h3 id="git-branch">git branch</h3>
<p><em>Usage:</em> <code>git branch</code></p>
<p>This command lists all local branches in the current repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git branch
</span></span></code></pre></div><p><em>Usage:</em> <code>git branch [branch name]</code></p>
<p>This command creates a new branch.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git branch branch-name
</span></span></code></pre></div><p><em>Usage:</em> <code>git branch -d [branch name]</code></p>
<p>This command deletes the branch.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git branch -d branch-name
</span></span></code></pre></div><h3 id="git-checkout">git checkout</h3>
<p><em>Usage:</em> <code>git checkout [branch name]</code></p>
<p>This command is used to switch from one branch to another.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout branch-name
</span></span></code></pre></div><p><em>Usage:</em> <code>git checkout -b [branch name]</code></p>
<p>This command creates a new branch and also switches to it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout -b branch-name
</span></span></code></pre></div><h3 id="git-merge">git merge</h3>
<p><em>Usage:</em> <code>git merge [branch name]</code></p>
<p>This command merges the specified branch&rsquo;s history into the current branch.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git merge branch-name
</span></span></code></pre></div><h3 id="git-remote">git remote</h3>
<p><em>Usage:</em> <code>git remote add [variable name] [Remote Server Link]</code></p>
<p>This command is used to connect a local repository to a remote server.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git remote add origin https://github.com/githubUser/repoName.git
</span></span></code></pre></div><h3 id="git-push">git push</h3>
<p><em>Usage:</em> <code>git push [variable name] master</code></p>
<p>This command sends changes from local to the remote repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git push origin master
</span></span></code></pre></div><p><em>Usage:</em> <code>git push [variable name] [branch]</code></p>
<p>This command sends branch commits to the remote repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git push origin branch-name
</span></span></code></pre></div><p><em>Usage:</em> <code>git push --all [variable name]</code></p>
<p>This command sends all branches to the remote repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git push --all origin
</span></span></code></pre></div><p><em>Usage:</em> <code>git push [variable name] :[branch name]</code></p>
<p>This command deletes a branch on the remote repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git push --all origin : branch-name
</span></span></code></pre></div><h3 id="git-pull">git pull</h3>
<p><em>Usage:</em> <code>git pull [Repository Link]</code></p>
<p>This command retrieves and merges changes from the remote server into the working directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git pull https://github.com/GitHubUser/GitHubRepo.git
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Windows VS Mac for Web Development: My Experience</title>
			<link>https://albertoreineri.it/en/blog/windows-vs-mac-for-web-development-my-experience/</link>
			<pubDate>Sun, 08 Dec 2019 21:40:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/windows-vs-mac-for-web-development-my-experience/</guid>
			<description>Today, I want to share my experience using these two operating systems, the eternal battle between Windows and Mac. I&amp;rsquo;ll discuss it from both a developer&amp;rsquo;s and an average user&amp;rsquo;s perspective since I use the computer for work and leisure, for programming, answering emails, writing documents, scheduling appointments, and more.
During my ten years of programming, I&amp;rsquo;ve had the opportunity to use both Windows and Mac, each for several years. I&amp;rsquo;ve reached my conclusion, which is somewhat contrary to the usual discussions on various forums and social media in the industry.</description>
			<content type="html"><![CDATA[<p>Today, I want to share <strong>my experience</strong> using these two operating systems, the eternal battle between Windows and Mac. I&rsquo;ll discuss it from both a developer&rsquo;s and an average user&rsquo;s perspective since I use the computer for work and leisure, for programming, answering emails, writing documents, scheduling appointments, and more.</p>
<p>During my ten years of programming, I&rsquo;ve had the opportunity to use <strong>both Windows and Mac</strong>, each for several years. I&rsquo;ve reached <strong>my conclusion</strong>, which is somewhat contrary to the usual discussions on various forums and social media in the industry.</p>
<h2 id="my-early-years">MY EARLY YEARS</h2>
<p>I <strong>started</strong> my career as a <strong>vb.net programmer</strong>, so I was using a <strong>Windows</strong> PC by necessity. It was a somewhat worn-out desktop running Windows <strong>XP</strong>. I must say, <strong>I didn&rsquo;t find it bad at all</strong>. Developing management software, the clients in 99.9% of cases had a Windows PC (there were very few Apple products around at that time, at least in my area), and thus the program had to run on that operating system. Those first four years of programming made me appreciate the operating system of good old Bill Gates. I got to <strong>know practically all keyboard shortcuts</strong> and customization options available. I could be very fast with my PC, and <strong>I knew my work environment perfectly</strong>.</p>
<h2 id="macbook-white">MACBOOK WHITE</h2>
<p>Then, more out of curiosity, I <strong>bought</strong> a Mac, specifically the <strong>Macbook White</strong>. Beautiful! <strong>Aesthetically, it had no comparison</strong> with the competition. A completely white PC, without designs, patterns, without anything superfluous.</p>
<p><strong>That&rsquo;s when my journey into the Apple world began</strong>. And it went well.</p>
<p>From a design perspective, Mac easily won, plus it had a program I loved and used a lot: Garageband! The simplicity of that software was terrific! I could record decently even without an audio interface, without any lag, and the default effects were fantastic! Unfortunately, I never found anything like it on Windows&hellip;</p>
<p>But there was always <strong>something that didn&rsquo;t sit right with me&hellip;</strong></p>
<p>It was beautiful, the battery seemed infinite, it was smooth and fast, but <strong>too closed!</strong> Perhaps it&rsquo;s predictable, but being a closed system didn&rsquo;t appeal to me at all!</p>
<p><strong>I&rsquo;ve always been a tinkerer.</strong> As soon as I get my hands on any machine, I have to understand how it works, how to make it work better, and how to play around with it. And with the Mac, I couldn&rsquo;t do much&hellip;</p>
<h2 id="issues">ISSUES</h2>
<p>And here we come to the heart of the Windows VS Mac battle.</p>
<p>The first problem was the <strong>Office suite</strong>. At that time, the only alternative was OpenOffice, but compatibility was not 100%. Sometimes, opening a Word file would result in completely messed-up formatting&hellip; and that bothered me a lot. Of course, I could have bought Office for Mac, but I didn&rsquo;t want to&hellip; (OK? :))</p>
<p>Then, on the <strong>programming</strong> side, I felt a bit stuck. While Visual Basic is a very basic language, it was the one I knew at the time, and I couldn&rsquo;t do anything with my Mac. I had installed Windows on a virtual machine, but it was very slow, and I couldn&rsquo;t work properly&hellip;</p>
<p>Even web development wasn&rsquo;t that straightforward for me! I used <strong>XAMPP</strong>, and at that time, I remember there was no XAMPP for Mac. So, I had downloaded MAMP, but I didn&rsquo;t like it much&hellip;</p>
<p>Finally, <strong>I couldn&rsquo;t play games</strong>&hellip; and even though I was never a hardcore gamer, occasionally launching a simple game to relax wasn&rsquo;t bad.</p>
<p>Let&rsquo;s say I felt restricted. If with Windows, I could do whatever I wanted, install anything, modify, experiment until I had to format the computer because of all the mess I had created, with the Mac, I could do almost nothing&hellip; Sure, I avoided creating messes, but I liked it!</p>
<h2 id="back-to-windows">BACK TO WINDOWS</h2>
<p>After 6 years, I had to change the PC; <strong>the little Macbook White couldn&rsquo;t take it anymore</strong>, and I returned to Windows.</p>
<p>That time in the Windows Vs Mac battle, Windows won.</p>
<p>Today, <strong>Mac prices are truly prohibitive</strong>&hellip; My Macbook White started at a price of €1000, and I remember getting it on sale at Euronics for €800. Those were still acceptable figures for a PC with 500GB HDD and 4GB RAM at that time.</p>
<p>Now, if you want a base model, you have to spend <strong>almost twice as much</strong>, for just 128GB of storage, a truly ridiculous amount, and without having USB, SD, and HDMI ports, which I still find fundamentally important.</p>
<p><strong>So, I went back to Windows, and I must say I&rsquo;m thrilled!</strong></p>
<p><strong>I can truly do everything!</strong> I immediately started tinkering again, and after two weeks, I had to format the PC because I had installed a bunch of nonsense, but I was happy! That&rsquo;s how I like to live with my PC; I want to be the one deciding how to make it work!</p>
<p>Now I can <strong>program</strong>, <strong>record</strong> music, <strong>play games</strong>, <strong>write</strong>, <strong>edit</strong> videos, use <strong>virtual machines</strong>, etc., without any slowdowns. Spending less than on a Macbook, I got a Core i7 with 16GB of RAM, 128GB SSD, 1TB HDD, and a 4GB graphics card! Basically, a powerhouse, for less than €100</p>
]]></content>
		</item>
		
		<item>
			<title>Never stop learning...</title>
			<link>https://albertoreineri.it/en/blog/never-stop-learning.../</link>
			<pubDate>Sun, 01 Dec 2019 21:35:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/never-stop-learning.../</guid>
			<description>I began writing code almost ten years ago, using different languages, libraries, and frameworks, but the desire to always learn something new has not yet left me, fortunately.
For the past couple of years, a little word has been wandering in my mind that I can&amp;rsquo;t seem to shake off: Python.
If you do a quick search online about programming languages, you&amp;rsquo;ll inevitably come across a flood of articles related to this language.</description>
			<content type="html"><![CDATA[<p>I began writing code almost ten years ago, using different languages, libraries, and frameworks, but the desire to always learn something new has not yet left me, fortunately.</p>
<p>For the past couple of years, a little word has been wandering in my mind that I can&rsquo;t seem to shake off: <strong><a href="/en/blog/organizing-work-with-python/">Python</a></strong>.</p>
<p>If you do a quick search online about programming languages, you&rsquo;ll inevitably come across a flood of articles related to this language. Almost all discussions and articles revolve around Python and Javascript.</p>
<p>What attracts people to this language is undoubtedly its simple syntax and its use in artificial intelligence and machine learning. So, I think it&rsquo;s time to take a closer look.</p>
<p><strong>I&rsquo;ve never developed anything in Python</strong> and, therefore, don&rsquo;t know how to use it. I&rsquo;ve read a few things in the documentation, learned the syntax, but I can&rsquo;t say I know how to use it until I create something with this language.</p>
<p>I started with good old Visual Basic, then moved on to ASP, PHP, and Javascript (let&rsquo;s not count HTML and CSS for now&hellip;), and now I believe it&rsquo;s time to learn how to create something with Python too.</p>
<h2 id="where-to-start">WHERE TO START?</h2>
<p>As always when approaching a new language, you never know where to <strong>start</strong>&hellip; And with Python, the possibilities are truly <strong>endless</strong>.</p>
<p>You can create <strong>websites</strong> and web apps, but also <strong>desktop and mobile applications</strong>! Virtually anything.</p>
<p>In theory, I should lean towards web development, so towards using <strong><a href="https://www.djangoproject.com/#:~:text=Django%20is%20a%20high%2Dlevel,It's%20free%20and%20open%20source." target="_blank" rel="noreferrer noopener">Django</a></strong>, but I must say that desktop and mobile frameworks also attract me quite a bit.</p>
<p>I&rsquo;ve already installed Django, and from what little I&rsquo;ve seen, I really like it, but <strong>Kivy</strong> also catches my attention&hellip;</p>
<h2 id="im-torn-by-indecision">I&rsquo;M TORN BY INDECISION&hellip;</h2>
<p>For now, I&rsquo;ve already created <strong>a couple of scripts</strong> with Python and <strong>Selenium</strong>, and it was really simple and fast. I was impressed by the <strong>few lines</strong> of code and the <strong>online community</strong>. I found everything I was looking for in a short time and managed to do what I wanted! <strong>What more could I ask for?</strong></p>
<p>I hope that next week I can make up my mind and choose the framework to rely on, which will probably be Django. Maybe I could try to bring some of my PHP projects to <strong>Django</strong> and see how it goes.</p>
<p>Any suggestions you have will be greatly appreciated.</p>
<p>See you soon</p>
<p><em>Happy coding!</em></p>
]]></content>
		</item>
		
		<item>
			<title>Redirect http to https</title>
			<link>https://albertoreineri.it/en/blog/redirect-http-to-https/</link>
			<pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/redirect-http-to-https/</guid>
			<description>Let&amp;rsquo;s see how to install an SSL certificate on our website and switch from HTTP to HTTPS.
Do you want to remove the &amp;ldquo;not secure&amp;rdquo; label that appears next to your site&amp;rsquo;s URL? Then this article is for you!
We won&amp;rsquo;t delve into what HTTPS is, but we&amp;rsquo;ll simply see how to make your site work securely.
The procedure is very simple; you just need to follow these two steps:</description>
			<content type="html"><![CDATA[<p>Let&rsquo;s see how to install an SSL certificate on our website and switch from HTTP to HTTPS.</p>
<p>Do you want to remove the &ldquo;not secure&rdquo; label that appears next to your site&rsquo;s URL? Then this article is for you!</p>
<p>We won&rsquo;t delve into what HTTPS is, but we&rsquo;ll simply see how to make your site work securely.</p>
<p>The procedure is very simple; you just need to follow these two steps:</p>
<h2 id="1-enable-ssl-on-your-web-space">1. Enable SSL on your web space</h2>
<p>Access the control panel of your hosting service and look for &ldquo;Enable HTTPS,&rdquo; &ldquo;Enable SSL,&rdquo; or something similar (varies depending on the service).</p>
<p>Once you find the right section, activate the service. It may take a few hours before it becomes active.</p>
<p>After a few hours, try accessing your site by typing <a href="https://www.yourwebsite.com">https://www.yourwebsite.com</a>. If everything works correctly, proceed to step 2.</p>
<p>If you encounter any errors, it&rsquo;s likely because you have HTTP links for stylesheets, images, and JS files. Try replacing &ldquo;http&rdquo; with &ldquo;https&rdquo; in all references to images, CSS, and JS; this should fix everything.</p>
<p>If you use <a href="/blog/how-to-install-and-customize-a-wordpress-theme-2/">WordPress</a>, you can use plugins that address the issue, such as <a href="https://wordpress.org/plugins/really-simple-ssl/">Really Simple SSL</a> or <a href="https://wordpress.org/plugins/wp-force-ssl/">WP Force SSL</a>. By using these plugins, you can skip step 2, as the plugins handle everything automatically.</p>
<h2 id="2-redirect-traffic-to-https">2. REDIRECT TRAFFIC TO HTTPS</h2>
<p>If you have completed step one correctly, you can now open the .htaccess file in the root of your site (create it if it doesn&rsquo;t exist) and insert the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span>RewriteEngine <span style="color:#66d9ef">on</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RewriteCond %{HTTP:X-Forwarded-Proto} !https
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RewriteRule ^.*$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R=301]
</span></span></code></pre></div><p>This way, all server calls will be redirected to HTTPS.</p>
<p>If this code creates an error regarding redirects, you can replace:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span>RewriteCond %{HTTP:X-Forwarded-Proto} !https
</span></span></code></pre></div><p>with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span>RewriteCond %{HTTPS} !=on
</span></span></code></pre></div><p>With these simple steps, you can install an SSL certificate and redirect traffic from HTTP to HTTPS, making your website more secure.</p>
]]></content>
		</item>
		
		<item>
			<title>SSL Certificate: How to Redirect HTTP to HTTPS</title>
			<link>https://albertoreineri.it/en/blog/ssl-certificate-how-to-redirect-http-to-https/</link>
			<pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/ssl-certificate-how-to-redirect-http-to-https/</guid>
			<description>Let&amp;rsquo;s see how to install an SSL certificate on our website and switch from HTTP to HTTPS.
Do you want to remove the &amp;ldquo;not secure&amp;rdquo; label that appears next to the URL of your site? Then, this article is for you!
We won&amp;rsquo;t delve into what HTTPS is, but we will simply see how to make your site work securely.
The process is straightforward; just follow these two steps:
1. Activate SSL on Your Web Space Access the control panel of your hosting service and look for &amp;ldquo;Enable HTTPS,&amp;rdquo; &amp;ldquo;Enable SSL,&amp;rdquo; or something similar (varies depending on the service).</description>
			<content type="html"><![CDATA[<p>Let&rsquo;s see how to install an SSL certificate on our website and switch from HTTP to HTTPS.</p>
<p>Do you want to remove the &ldquo;<strong>not secure</strong>&rdquo; label that appears <strong>next to the URL</strong> of your site? Then, this article is for you!</p>
<p>We won&rsquo;t delve into what <strong>HTTPS</strong> is, but we will simply see how to make your site work securely.</p>
<p>The process is straightforward; just follow these two steps:</p>
<h2 id="1-activate-ssl-on-your-web-space">1. Activate SSL on Your Web Space</h2>
<p>Access the <strong>control panel</strong> of your hosting service and look for &ldquo;<strong>Enable HTTPS</strong>,&rdquo; &ldquo;<strong>Enable SSL</strong>,&rdquo; or something similar (varies depending on the service).</p>
<p>Once you find the right section, <strong>activate the service</strong>. It may take a few hours before it is active.</p>
<p>After a few hours, try to connect to your site by typing <a href="https://www.yourwebsite.com">https://www.yourwebsite.com</a>. If everything works correctly, proceed to step 2.</p>
<p>If you see any <strong>errors</strong>, it&rsquo;s probably because you have HTTP links for stylesheets, images, and JS files. Try to <strong>replace HTTP with HTTPS</strong> in all references to images, CSS, and JS; it should fix everything.</p>
<p>If you use <strong><a href="/blog/how-to-install-and-customize-a-wordpress-theme-2/">WordPress</a></strong>, you can use <strong>plugins</strong> that handle the issue, such as <a href="https://wordpress.org/plugins/really-simple-ssl/">Really Simple SSL</a> or <a href="https://wordpress.org/plugins/wp-force-ssl/">WP Force SSL</a>. By using these plugins, you can skip step 2; the plugins take care of everything.</p>
<h2 id="2-redirect-traffic-to-https">2. REDIRECT TRAFFIC TO HTTPS</h2>
<p>If you have successfully completed step one, you can now open the <strong>.htaccess</strong> file in the root of your site (create it if it doesn&rsquo;t exist) and insert this code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span>RewriteEngine <span style="color:#66d9ef">on</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RewriteCond %{HTTP:X-Forwarded-Proto} !https
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RewriteRule ^.*$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R=301]
</span></span></code></pre></div><p>This way, all server calls will be redirected to HTTPS.</p>
<p>If this code produces an error regarding redirects, you can replace:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span>RewriteCond %{HTTP:X-Forwarded-Proto} !https
</span></span></code></pre></div><p>with</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span>RewriteCond %{HTTPS} !=on.
</span></span></code></pre></div><p>With these simple steps, you can install an SSL certificate and redirect traffic from HTTP to HTTPS, making your website more secure.</p>
]]></content>
		</item>
		
		<item>
			<title>SASS Tutorial - What is it and why you won&#39;t be able to do without it</title>
			<link>https://albertoreineri.it/en/blog/sass-tutorial-what-is-it-and-why-you-wont-be-able-to-do-without-it/</link>
			<pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/sass-tutorial-what-is-it-and-why-you-wont-be-able-to-do-without-it/</guid>
			<description>&amp;ldquo;If you live in the world of web development, then you have probably heard of SASS, the most famous CSS preprocessor! This is a fantastic tool that allows you to significantly extend the capabilities of CSS and create and manage stylesheets in a fast and organized manner.
SASS is a CSS preprocessor that adds special features such as variables, nesting, mixins, and much more to regular CSS. The goal is to make the process of creating CSS simple and effective, both to write and to read in the future.</description>
			<content type="html"><![CDATA[<p>&ldquo;If you live in the world of web development, then you have probably heard of SASS, the most famous CSS preprocessor! This is a fantastic tool that allows you to significantly extend the capabilities of CSS and create and manage stylesheets in a fast and organized manner.</p>
<p>SASS is a CSS preprocessor that adds special features such as variables, nesting, mixins, and much more to regular CSS. The goal is to make the process of creating CSS simple and effective, both to write and to read in the future.</p>
<p>But let&rsquo;s delve a bit deeper!</p>
<h2 id="what-is-a-css-preprocessor">What is a CSS Preprocessor?</h2>
<p>A CSS preprocessor is a scripting language that extends CSS, allowing developers to write code in a specific language and then compile it into CSS. Sass is perhaps the most popular preprocessor currently in use, but other well-known examples include Less and Stylus.</p>
<p>Before we proceed, a quick note is needed: most web designers would say that if you are new to CSS, it&rsquo;s better to avoid Sass (or any preprocessors, extensions, or frameworks) while you are still learning. Although these tools offer many advantages in terms of speed and efficiency, it&rsquo;s important to thoroughly understand the basics of CSS before exploring various tools. Make sure to learn the key concepts before delving into the available tools. This applies to every technology and framework; it&rsquo;s always a good practice to learn the base language thoroughly before moving on to the built tools!</p>
<p>Now, back to Sass!</p>
<h2 id="what-is-sass">What is Sass?</h2>
<p>Sass (which stands for &ldquo;Syntactically Awesome Stylesheets&rdquo;) is an extension of CSS that allows you to use things like variables, nested rules, inline imports, and more. It also helps keep code organized and enables you to create stylesheets much faster.</p>
<p>Sass is compatible with all versions of CSS. The only requirement to use it is to have Ruby installed. Developers using it are also encouraged to follow the <a href="https://sass-lang.com/community-guidelines">Sass Community Guidelines</a>, it&rsquo;s always good to take a look.</p>
<h2 id="how-to-use-sass">How to Use Sass?</h2>
<p>In the following section, we&rsquo;ll look at some basic tips for using Sass, using examples from the official Sass website. Check the <a href="https://sass-lang.com/documentation">official documentation</a> for further references and examples.</p>
<h3 id="syntax">Syntax</h3>
<p>Sass includes two syntax options:</p>
<ul>
<li><strong>SCSS (Sassy CSS):</strong> Uses the .scss file extension and is fully compliant with CSS syntax. (My favorite!)</li>
<li><strong>SASS:</strong> Uses indentation instead of braces and has the .sass extension; it&rsquo;s not entirely compliant with CSS syntax, but it&rsquo;s faster to write. (For Python lovers)</li>
</ul>
<p>Files can be converted from one syntax to another using the <code>sass-convert</code> command.</p>
<h3 id="variables">Variables</h3>
<p>Just like other programming languages, Sass allows the use of variables that can store information used throughout the stylesheet.</p>
<p>For example, you can store a color value in a variable at the top of the file and then use this variable when setting the color of your elements. This allows you to quickly change colors without modifying each line separately.</p>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scss" data-lang="scss"><span style="display:flex;"><span>$font-stack<span style="color:#f92672">:</span> Helvetica<span style="color:#f92672">,</span> sans-serif;
</span></span><span style="display:flex;"><span>$primary-color<span style="color:#f92672">:</span> <span style="color:#ae81ff">#333</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">font</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span> $font-stack;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">color</span><span style="color:#f92672">:</span> $primary-color;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This code will generate the following CSS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">font</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span> Helvetica, <span style="color:#66d9ef">sans-serif</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#333</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="nesting">Nesting</h3>
<p>Nesting is a double-edged sword. While it provides an excellent method to reduce the amount of code to write, it can also lead to overly messy CSS if not done carefully.</p>
<p>The idea is to nest CSS selectors to mimic HTML hierarchy.</p>
<p>Here&rsquo;s an example of a navigation menu using nesting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scss" data-lang="scss"><span style="display:flex;"><span><span style="color:#f92672">nav</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ul</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">margin</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">padding</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">list-style</span><span style="color:#f92672">:</span> none;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">li</span> { <span style="color:#a6e22e">display</span><span style="color:#f92672">:</span> inline-block; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">a</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">display</span><span style="color:#f92672">:</span> block;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">padding</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">6</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">12</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">text-decoration</span><span style="color:#f92672">:</span> none;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The output CSS will be:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">nav</span> <span style="color:#f92672">ul</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">list-style</span>: <span style="color:#66d9ef">none</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">nav</span> <span style="color:#f92672">li</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">inline-block</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">nav</span> <span style="color:#f92672">a</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">block</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">6</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">12</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">text-decoration</span>: <span style="color:#66d9ef">none</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="partials">Partials</h3>
<p>Partials are smaller Sass files that can be imported (see the next section) into other Sass files. They act like code snippets. With these snippets, CSS can be modular and easier to maintain. A partial is designated as such by naming it with an initial underscore: <code>_partial.scss</code>.</p>
<h3 id="import">Import</h3>
<p>Used with partials (see the previous section), the <code>@import</code> command allows you to import partial files into the current file, creating a single CSS file. This way, during development, you can divide the code into sections, while during site loading, there will be only one CSS file to load, reducing the server request.</p>
<p>Here&rsquo;s an example:</p>
<p><strong>_reset.scss</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scss" data-lang="scss"><span style="display:flex;"><span><span style="color:#f92672">html</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">body</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">ul</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">ol</span> {
</span></span><span style="display:flex;"><span>   <span style="color:#a6e22e">margin</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">padding</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>basefile.scss</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scss" data-lang="scss"><span style="display:flex;"><span><span style="color:#66d9ef">@import</span> <span style="color:#e6db74">&#39;reset&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">font</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span> Helvetica<span style="color:#f92672">,</span> sans-serif;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">background-color</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">#efefef</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Output CSS:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">html</span><span style="color:#f92672">,</span> <span style="color:#f92672">body</span><span style="color:#f92672">,</span> <span style="color:#f92672">ul</span><span style="color:#f92672">,</span> <span style="color:#f92672">ol</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">font</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span> Helvetica, <span style="color:#66d9ef">sans-serif</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#efefef</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Important:</strong> When importing partials, there is no need to include the file extension or the underscore.</p>
<h3 id="mixins">Mixins</h3>
<p>One of the advantages of using preprocessors is the ability to take complex and complicated code and simplify it. This is where</p>
<p>mixins come in handy!</p>
<p>For example, if you need to include vendor prefixes, you can use a mixin. Take a look at this example for border-radius:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scss" data-lang="scss"><span style="display:flex;"><span><span style="color:#66d9ef">@mixin</span><span style="color:#a6e22e"> border-radius</span>($radius) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">-webkit-border-radius</span><span style="color:#f92672">:</span> $radius;
</span></span><span style="display:flex;"><span>     <span style="color:#a6e22e">-moz-border-radius</span><span style="color:#f92672">:</span> $radius;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">-ms-border-radius</span><span style="color:#f92672">:</span> $radius;
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">border-radius</span><span style="color:#f92672">:</span> $radius;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.box</span> { <span style="color:#66d9ef">@include</span><span style="color:#a6e22e"> border-radius</span>(<span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>); }
</span></span></code></pre></div><p>Note: The <code>@mixin</code> command is at the top. It is named &ldquo;border-radius&rdquo; and the variable &ldquo;$radius&rdquo; is given as a parameter. This variable is used to set the radius value for each element.</p>
<p>Then, the <code>@include</code> command is called, along with the mixin name (&ldquo;border-radius&rdquo;) and a parameter (10px). Therefore, <code>.box {@include border-radius (10px);}</code>.</p>
<p><strong>It produces the following CSS:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">box</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-webkit-</span><span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-moz-</span><span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">-ms-</span><span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="extend">Extend</h3>
<p>The <code>@extend</code> command has been defined as one of the most powerful features of Sass. After seeing it in action, it&rsquo;s clear why.</p>
<p>The idea is that with this directive, you won&rsquo;t have to include more class names in your HTML elements, and you can keep your code DRY (Don&rsquo;t repeat yourself). Selectors can inherit styles from other selectors and thus be easily extended when needed.</p>
<h3 id="operators">Operators</h3>
<p>The ability to perform calculations in CSS allows for expanded possibilities, such as converting pixel values to percentages. You can access standard mathematical functions such as addition, subtraction, multiplication, and division. Of course, these functions can be combined to create complex calculations.</p>
<p>Additionally, Sass includes some built-in functions to help manipulate numbers. Functions like <code>percentage()</code>, <code>floor()</code>, and <code>round()</code> to name a few.</p>
<p>If you didn&rsquo;t know about this tool before, start using it in your current project; you&rsquo;ll surely not regret it!</p>
<p>If you already knew about it, I hope I may have revealed some additional features of this fantastic tool!</p>
<p>Happy coding!&rdquo;</p>
]]></content>
		</item>
		
		<item>
			<title>I have developed my own CMS</title>
			<link>https://albertoreineri.it/en/blog/i-have-developed-my-own-cms/</link>
			<pubDate>Sat, 02 Nov 2019 21:29:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/i-have-developed-my-own-cms/</guid>
			<description>WordPress is a fantastic platform, a great CMS that allows managing website content relatively easily and quickly. It offers a vast range of plugins and enables the rapid and effective development of projects.
However, there are a few things in WordPress that I&amp;rsquo;ve never liked&amp;hellip; Two, in particular:
1. SLOWNESS Firstly, the slowness. Even when developing a custom WordPress theme, WordPress introduces dependencies that are inevitable and slow down page loading.</description>
			<content type="html"><![CDATA[<p><strong>WordPress</strong> is a fantastic platform, a great CMS that allows managing website content relatively easily and quickly. It offers a vast range of plugins and enables the rapid and effective development of projects.</p>
<p>However, there are a few things in WordPress that <strong>I&rsquo;ve never liked</strong>&hellip; Two, in particular:</p>
<h2 id="1-slowness">1. SLOWNESS</h2>
<p>Firstly, the slowness. Even when developing a <strong>custom WordPress theme</strong>, WordPress introduces <strong>dependencies</strong> that are <strong>inevitable</strong> and slow down page loading.</p>
<p>Additionally, every plugin adds its CSS and JS files to all pages of the site, regardless of whether they are needed only on the homepage or a specific internal page. (This can be mitigated by forgoing plugins and using a completely custom solution, but this extends development time&hellip;)</p>
<p>The same website created with or without WordPress has significantly faster loading times! If you want to run some tests, use these two services, and you&rsquo;ll see that WordPress-developed sites will be slower, even when using more expensive and performant hosting:</p>
<ul>
<li><a href="https://tools.pingdom.com/">https://tools.pingdom.com/</a></li>
<li><a href="https://developers.google.com/speed/pagespeed/insights/?hl=IT">https://developers.google.com/speed/pagespeed/insights/?hl=IT</a></li>
</ul>
<p>For a more comprehensive website test, you can use the tool developed by <a href="https://www.digitale.co/">Digitale.co</a>, allowing scanning multiple pages at once. This way, you can save time and have a better and broader overview of a website&rsquo;s performance! Here&rsquo;s the link to the tool!</p>
<ul>
<li><a href="https://www.digitale.co/pagespeed" target="_blank" rel="noreferrer noopener nofollow"><a href="https://www.digitale.co/pagespeed">https://www.digitale.co/pagespeed</a></a></li>
</ul>
<h2 id="2-the-backend">2. THE BACKEND</h2>
<p>Secondly, the backend is nice and simple, but not always. <strong>The inability to make invasive changes</strong> to the backend has always frustrated me a lot.</p>
<p>Sure, we can create custom posts, custom fields with Advanced Custom Fields, change the backend&rsquo;s color scheme, create a custom login, etc., but we don&rsquo;t have the freedoms of a platform created entirely from scratch, where we can decide everything we want.</p>
<p>I&rsquo;ve never liked feeling like a &ldquo;slave&rdquo; to software, having to obey its laws without the possibility of intervening wherever I want.</p>
<h2 id="my-cms">MY CMS</h2>
<p>For this reason, I created <strong><a href="/orange" target="_blank" rel="noreferrer noopener">Orange CMS</a>.</strong></p>
<p>I have always loved programming, and using code written by others has never appealed to me. I am a developer, and I want to develop; that&rsquo;s the only way to learn and move forward!</p>
<p>Let&rsquo;s be clear, <strong>I haven&rsquo;t reinvented the wheel</strong>. I used a series of scripts developed in the past and some online libraries, and little by little, I created this platform.</p>
<p>I used:</p>
<ul>
<li><a href="https://getbootstrap.com/" target="_blank" rel="noreferrer noopener">Bootstrap</a></li>
<li><a href="https://ckeditor.com/" target="_blank" rel="noreferrer noopener">CKEditor</a></li>
<li><a href="https://ckeditor.com/ckfinder/" target="_blank" rel="noreferrer noopener">CKFinder</a></li>
<li><a href="https://datatables.net/" target="_blank" rel="noreferrer noopener">DataTables</a></li>
<li><a href="https://fengyuanchen.github.io/datepicker/" target="_blank" rel="noreferrer noopener">DatePicker</a></li>
</ul>
<p>If I could be effective with WordPress, with Orange CMS, I can say that I am efficient!</p>
<p>Development times are more or less the same, but with Orange CMS, I can:</p>
<ul>
<li>create a data loading system developed specifically for the project&rsquo;s needs, significantly reducing content loading times</li>
<li>create completely customizable and SEO-friendly URLs using a practical <a href="/en/blog/simple-routing-system-in-php">routing system</a></li>
<li>create specific sections for website content</li>
<li>achieve very short loading times</li>
<li>have a secure login with encrypted passwords</li>
</ul>
<p><strong>Some websites</strong> created with Orange CMS:</p>
<ul>
<li><a href="http://danzeoccitane.altervista.org/" target="_blank" rel="noreferrer noopener">danzeoccitane.altervista.org</a></li>
<li><a href="http://eventicuneo.it/" target="_blank" rel="noreferrer noopener">eventicuneo.it</a></li>
<li><a href="http://studiomacdesign.it/" target="_blank" rel="noreferrer noopener">studiomacdesign.it</a></li>
<li><a href="http://associazionefedercasa.it/" target="_blank" rel="noreferrer noopener">associazionefedercasa.it</a></li>
</ul>
<p>This <strong>doesn&rsquo;t mean I&rsquo;ll stop using WordPress</strong>; for a blog, I believe it&rsquo;s still the best solution, but I think I&rsquo;ll use it less frequently.</p>
<p>Thanks for reading this article.</p>
<p>Happy coding!</p>
]]></content>
		</item>
		
		<item>
			<title>Slow WordPress Site? Here&#39;s How to Increase Performance!</title>
			<link>https://albertoreineri.it/en/blog/slow-wordpress-site-heres-how-to-increase-performance/</link>
			<pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/slow-wordpress-site-heres-how-to-increase-performance/</guid>
			<description>&amp;ldquo;Do you have a slow WordPress site? Does it frequently freeze, leaving you frustrated just by looking at it? Let&amp;rsquo;s see how to improve it!
WordPress is the world&amp;rsquo;s most widely used platform for creating websites, but it often happens that it is used in a non-optimal way.
This can cause serious slowdowns on the site.
WordPress, while fantastic, comes with a somewhat heavy core of its own, and if you install themes and plugins left and right, it will soon become extremely slow, not only damaging the user experience but also affecting SEO indexing.</description>
			<content type="html"><![CDATA[<p>&ldquo;Do you have a slow WordPress site? Does it frequently freeze, leaving you frustrated just by looking at it? Let&rsquo;s see how to improve it!</p>
<p>WordPress is <strong>the world&rsquo;s most widely used platform</strong> for creating websites, but it often happens that it is used in a non-optimal way.</p>
<p>This can cause <strong>serious slowdowns</strong> on the site.</p>
<p>WordPress, while fantastic, comes with a somewhat <strong>heavy core</strong> of its own, and if you install themes and plugins <strong>left and right</strong>, it will soon become <strong>extremely slow</strong>, not only damaging the user experience but also affecting SEO indexing.</p>
<h2 id="what-slows-down-your-wordpress-site">What Slows Down Your WordPress Site?</h2>
<p>The reasons your WordPress site is slow can be <strong>varied</strong>. Here are the main causes listed:</p>
<ul>
<li><strong>Web Hosting</strong>: If the web hosting server is not configured correctly or is of poor quality, the site will undoubtedly be affected. You can have a perfectly developed site, but if the server it runs on is not optimized, the results will be poor.</li>
<li><strong>WordPress Configuration</strong>: If your site does not offer cache storage, it can overload the server, causing slowdowns or site crashes.</li>
<li><strong>Image Size</strong>: One of the major causes of slowdowns is huge images. Many large images on the same page will significantly slow down loading times.</li>
<li><strong>Low-Quality Plugins</strong>: Using plugins with errors, incorrect code, or unnecessary features will undoubtedly result in slowdowns, if not security issues.</li>
<li><strong>External Scripts</strong>: All various scripts external to the site, such as ads, fonts, tracking systems, etc., will slow down the site.</li>
</ul>
<p>But let&rsquo;s go into more detail.</p>
<h2 id="having-good-hosting-makes-a-difference">Having Good Hosting Makes a Difference</h2>
<p>Hosting is <strong>the foundation on which your site is built</strong>. If the foundations are not of quality, no matter how perfect what is built on them is, it will undoubtedly be destined to <strong>collapse</strong>.</p>
<p>Having good hosting service, with <strong>state-of-the-art features</strong> and 24/7 support, allows you to sleep soundly, have everything under control, and be <strong>sure</strong> that the site will run correctly at all times.</p>
<p>As mentioned earlier, you can have a perfectly developed site, fully optimized, with images of the right size, scripts loaded correctly, everything perfect. <strong>But if the hosting is not good, this site will still perform poorly.</strong></p>
<p>I have already created a custom theme from scratch, spending many hours optimizing each server request so as not to overload it as much as possible, and then get poor results in performance tests. This is very frustrating and <strong>harmful</strong> to the website.</p>
<p>You need to rely on true professionals who can <strong>choose the best service based on your needs</strong>.</p>
<p>There is no perfect hosting always; you need to <strong>evaluate the needs</strong> and choose accordingly.</p>
<h2 id="wordpress-configuration">WordPress Configuration</h2>
<h3 id="cache">Cache</h3>
<p>It is possible to speed up a slow WordPress site quickly and easily by installing a plugin for <strong>cache management</strong>.</p>
<p>There are many, even free ones, but it is necessary to know how to <strong>configure them correctly</strong>.</p>
<p>You can get good results by using the default configurations of the plugin, but by setting <strong>each parameter individually</strong> based on the site, <strong>performance will increase significantly</strong>.</p>
<h3 id="updates">Updates</h3>
<p>Another best practice is always to keep the site updated. Not updating is also risky from a security standpoint, so <strong>always ensure that your site is up to date, as well as various plugins.</strong></p>
<h2 id="optimize-images">Optimize Images</h2>
<p>Having many images is one of the first causes of a slow WordPress site.</p>
<p>However, the solution is not to remove them all and have pages with only text. Fortunately, there are many tools that can <strong>optimize images</strong> for the web.</p>
<p>The best software to optimize an image for the web is <strong><a href="https://www.adobe.com/it/products/photoshop.html">Photoshop</a></strong>, but you can also do it for free with online tools like <strong><a href="https://pixlr.com/e/">Pixlr</a></strong>.</p>
<p>Images must be saved in the <strong>correct dimensions</strong>; it is useless to have a 5000x5000 image. Exceeding 1920 px in width is almost always unnecessary, so make sure to load images in the correct and <strong>lightest possible format</strong>.</p>
<h3 id="formats">Formats</h3>
<p>Use only two types of formats: <strong>JPG and PNG</strong>.</p>
<p><strong>PNG</strong> should only be used when the image has <strong>transparencies</strong>, for example, a logo.</p>
<p>For all <strong>photos</strong>, I recommend using <strong>JPG</strong> because it is lighter.</p>
<h2 id="be-careful-with-plugins">Be Careful with Plugins</h2>
<p>Plugins are very useful for a WordPress site, but you should <strong>never install them too lightly</strong>.</p>
<p>Before installing a new plugin, always check the <strong>update log</strong>, see if it is still <strong>maintained</strong> by the developers, and take a look at the <strong>reviews</strong>.</p>
<p>Also, it is important to <strong>always update them</strong> to the latest version.</p>
<p>Having too many poorly developed plugins causes <strong>huge problems</strong> for WordPress sites, both for <strong>performance</strong> and <strong>security</strong>.</p>
<h2 id="external-scripts">External Scripts</h2>
<p>Many times it is essential to include external scripts, such as Google Ads. However, these have a <strong>negative impact on performance</strong>. It is necessary to take this into account and <strong>optimize elsewhere if absolutely necessary</strong>.</p>
<h2 id="conclusion">Conclusion</h2>
<p><strong>Having a fast and efficient WordPress site is possible; you just need to develop it properly.</strong></p>
<p>The best solution is always to <strong>use a professionally developed theme from scratch</strong>, built based on the site&rsquo;s needs.</p>
<p><strong>Generic themes</strong>, free or paid, are created to be used for various types of websites and therefore have many <strong>features that often prove useless</strong> and slow down the site.</p>
<p>The same goes for <strong>plugins</strong>. Where possible, it is always better to use a <strong>plugin developed from scratch</strong> specifically for the functionality it needs to perform.</p>
<p>The best solution for having a high-performance WordPress site is, therefore, to <strong>rely on a WordPress expert</strong> who can understand the site&rsquo;s needs and <strong>create the best solution</strong>. This ensures <strong>high performance</strong> and also a higher level of <strong>security</strong>.&rdquo;</p>
]]></content>
		</item>
		
		<item>
			<title>How to choose the right technology for your website?</title>
			<link>https://albertoreineri.it/en/blog/how-to-choose-the-right-technology-for-your-website/</link>
			<pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/how-to-choose-the-right-technology-for-your-website/</guid>
			<description>Choosing the right technology for your website is a crucial step.
Being online is essential today!
A website allows you to be easily found by everyone worldwide, creates a corporate image, enables fast communication with your customers, and much more&amp;hellip; In short, it undoubtedly brings benefits to businesses of all types, whether large or small.
But not all websites are the same!
There are various types of websites (showcase, blog, e-commerce, etc.</description>
			<content type="html"><![CDATA[<p>Choosing the right technology for your website is a crucial step.</p>
<p><strong>Being online is essential today</strong>!</p>
<p>A <strong>website</strong> allows you to be <strong>easily found</strong> by everyone worldwide, creates a <strong>corporate image</strong>, enables <strong>fast communication</strong> with your customers, and much more&hellip; In short, it undoubtedly brings <strong>benefits</strong> to businesses <strong>of all types</strong>, whether large or small.</p>
<p><strong><em>But not all websites are the same!</em></strong></p>
<p>There are various <strong>types of websites</strong> (showcase, blog, e-commerce, etc.), but, above all, there are <strong>many technologies with which to build them.</strong></p>
<p>For the <strong>non-professionals</strong>, knowing how their website was created might not matter; what&rsquo;s important is that it works! <strong>But knowing a bit more can make a big difference.</strong></p>
<p><em>When building a house, we always ensure that the best materials are used!</em></p>
<p>This should also be the case for websites. It&rsquo;s good to rely on experts in the field, web developers, or web agencies, but <strong>it&rsquo;s better not to blindly trust</strong> and insist on understanding how the project will be executed.</p>
<p>For example, much is said about <strong>WordPress</strong>, a fantastic platform (this site is built on WordPress) when used correctly, but it&rsquo;s not the only or always the best option.</p>
<h2 id="wordpress-yes-but-how-is-it-used">WordPress, yes, but how is it used?</h2>
<p>WordPress is the <strong>most widely used platform worldwide</strong> for website development. It allows for very good results with a low time investment, thus <strong>lower costs</strong> compared to other solutions.</p>
<p><strong><em>But there&rsquo;s a right and wrong way to use it.</em></strong></p>
<p>WordPress is so widespread that there are <strong>thousands of free and paid themes</strong> to create a website, and developers often take advantage of it.</p>
<p>Selling a WordPress site for €2,000 &ldquo;developed&rdquo; by purchasing a €50 theme and slightly configuring it is borderline fraud&hellip; Yet it happens, and quite often.</p>
<p>For this reason, it&rsquo;s <strong>better to investigate a bit</strong> about what you&rsquo;re having built, ask questions, and be persistent in knowing how the final product will be realized.</p>
<p>Personally, when I choose to use WordPress, I <strong>develop the theme and plugins dedicated to the project entirely from scratch</strong>. This allows for having a <strong>unique, performant, and secure</strong> site without significantly impacting the final cost. An experienced developer, with the right skills, can create a complete WordPress theme from scratch in a few weeks, not more.</p>
<p>In addition to this site you are reading, I can give you the example of <strong><a href="http://bikeitalia.it/">Bikeitalia.it</a></strong>, a truly enormous site, with peaks of <strong>users exceeding 4,000 at the same time.</strong> Well, that site is based on <strong>WordPress</strong>, but the theme was <strong>built from scratch.</strong></p>
<p><strong>So, WordPress is not bad at all, provided it&rsquo;s used correctly.</strong> This will prevent unpleasant surprises like performance drops or, worse, security vulnerabilities.</p>
<h2 id="javascript">Javascript</h2>
<p>Today there are also many <strong>Javascript frameworks</strong> that allow for creating modern, <strong>lightweight, and very fast websites!</strong></p>
<p>You can use React, Angular, or Vue, or even <strong>Gatsby</strong>, a framework based on React that allows for creating beautiful websites in a short time. In this case, however, the <strong>content management will be completely different, often more complicated.</strong></p>
<p>But if you want to <strong>focus on performance</strong>, this is undoubtedly the best choice.</p>
<h2 id="proprietary-cms">Proprietary CMS</h2>
<p>A third option is proprietary CMS. Many web agencies and developers <strong>have their own website creation systems.</strong></p>
<p>These can be <strong>good</strong> or <strong>bad</strong> solutions, depending on the developers. In any case, <strong>since they are developed from scratch, they usually allow for maximum configuration.</strong></p>
<p>You can do whatever you want without having to adhere to the laws of CMS and frameworks.</p>
<p>However, it&rsquo;s necessary to <strong>ensure that these frameworks are up-to-date</strong>, not stuck in the past.</p>
<p>Here are some <strong>tips</strong> to understand if they are up to today&rsquo;s standards:</p>
<h3 id="seo-friendly-urls">SEO-Friendly URLs</h3>
<p>If the <strong>page URL ends with &ldquo;.php&rdquo;, &ldquo;.asp&rdquo;, &ldquo;.html&rdquo;</strong>, or something similar, it means that there is no real routing system on the site, and this does not allow for good URLs, which are more appreciated by Google.</p>
<p><strong>Good URL example</strong>: &ldquo;<a href="http://www.yoursite.com/contact/%22">http://www.yoursite.com/contact/&quot;</a></p>
<p><strong>Not-so-good URL example</strong>: &ldquo;<a href="http://www.yoursite.com/contact.asp%22">http://www.yoursite.com/contact.asp&quot;</a></p>
<h3 id="indices-in-urls">Indices in URLs</h3>
<p>If you see codes and mathematical symbols in the URL, <strong>the security of the site may be at risk</strong>. Many systems &ldquo;pass&rdquo; database indices in the URL, but this can be <strong>used by hackers for a direct attack on the database.</strong> So, if you see a URL like &ldquo;<a href="http://www.yoursite.com/article.php?id=45%22">http://www.yoursite.com/article.php?id=45&quot;</a>, then the system is <strong>not very secure.</strong></p>
<h2 id="404-errors">404 Errors</h2>
<p>Another characteristic of systems developed from scratch is that they often don&rsquo;t have a <strong>management for errors</strong>, such as the classic 404 Page Not Found. To find out, simply go to a site and enter random text after the domain, for example, &ldquo;<a href="http://yoursite.com/goodbye%22">http://yoursite.com/goodbye&quot;</a>. If there is a 404 page in the site, great, if you see the server error on a blank and ugly page, then it&rsquo;s not ideal.</p>
<p>All these little things can <strong>make your efforts to create a functional website fail</strong>, affecting <strong>Google indexing</strong>, <strong>performance</strong>, and <strong>security</strong>.</p>
<h2 id="orange-cms">Orange CMS</h2>
<p>An example of a proprietary CMS is <strong><a href="/orange">Orange CMS</a></strong>, my solution developed entirely from scratch.</p>
<p>If you want, <strong><a href="/orange">you can take a look</a></strong>, enter the backend, and <strong>create and view articles and pages.</strong> I have already used it for many sites, and the results have always been very good, superior to WordPress in terms of <strong>performance</strong>, but it all depends on the features you</p>
<p>want.</p>
<p>I hope this article has helped you <strong>understand how to approach the creation of your new website.</strong> Remember that the choice of technology is crucial, and <strong>you will carry it with you for a long time</strong>, so it must be done with method and professionalism.</p>
]]></content>
		</item>
		
		<item>
			<title>Web development on Linux</title>
			<link>https://albertoreineri.it/en/blog/web-development-on-linux/</link>
			<pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/web-development-on-linux/</guid>
			<description>Development on Linux I have been developing software and websites for more than ten years now (with a break in between), and I have had the opportunity to use both Windows and Mac as well as Linux.
While I have primarily used Windows and Mac, during the last period where I worked closely with system administrators and did much more backend development than frontend, I felt the need to switch to something more performance-oriented for these activities.</description>
			<content type="html"><![CDATA[<h1 id="development-on-linux">Development on Linux</h1>
<p>I have been developing software and websites for more than ten years now (with a break in between), and I have had the opportunity to use both <a href="/blog/miglior-pc-per-sviluppatori-la-mia-esperienza/"><strong>Windows</strong></a> and <strong>Mac</strong> as well as <strong>Linux</strong>.</p>
<p>While I have primarily used <strong>Windows</strong> and <strong>Mac</strong>, during the last period where I worked closely with <strong>system administrators</strong> and did much more <strong>backend development</strong> than frontend, I felt the need to switch to something more <strong>performance-oriented</strong> for these activities.</p>
<h2 id="beginnings">Beginnings</h2>
<p>I started my career as a <strong>.NET developer.</strong> I used a PC with the marvelous <strong>Windows XP</strong>.</p>
<p>It truly was wonderful—<strong>stable</strong>, fast, capable of doing everything.</p>
<p>At that time, I used Visual Studio and developed <strong>management and CRM</strong> software for the <strong>Windows</strong> platform, so I was obliged to remain in the <strong>Microsoft</strong> environment.</p>
<p>Then I started developing some <strong>websites</strong>, always for the same company. Being proficient in .NET, we began developing with <strong>ASP</strong>, a language very similar to Visual Basic.</p>
<p>I remember that at the time, <strong>changing the operating system never even crossed my mind.</strong> Linux was still quite challenging, Mac was expensive, and neither allowed for developing software for Windows, so the matter ended there.</p>
<h2 id="my-first-mac">My first Mac</h2>
<p>With the first money I saved, I decided to buy my first Mac: a <strong>MacBook White</strong>.</p>
<p>I was fascinated by the Apple environment.</p>
<p>I made the purchase mainly to use it for <strong>recording music</strong>; I had no intention of using it for development.</p>
<p>I tried it at the beginning, but everything I was used to using didn&rsquo;t exist for Mac. Visual Studio wasn&rsquo;t available for Mac, and our sites ran on Windows servers, so there was nothing to be done.</p>
<p>I contented myself with the fantastic <strong>artistic department</strong> of the bitten apple. There was no comparison; drawing, video, and music software were decidedly on another level.</p>
<h2 id="a-period-of-pause">A period of pause</h2>
<p><strong>Then I stopped programming for a few years.</strong> I did something completely different; I graduated in a humanities subject and completely disconnected from computers.</p>
<p>I continued to use the <strong>Mac as a personal laptop</strong>, but I only used it for <strong>university</strong> and <strong>free time</strong>, and here I began to <strong>miss Windows</strong>.</p>
<p>The <strong>Office suite</strong>, the possibility of finding thousands of software for any type of problem, <strong>games</strong>, and much more were missing on the Mac&hellip;</p>
<p>So when the MacBook White finally died of old age (7 years of good service), <strong>I bought a Windows laptop.</strong></p>
<h2 id="return-to-windows">Return to Windows</h2>
<p>When I bought my current laptop, <strong>I was still studying</strong> and had not yet resumed my career as a developer, but <strong>I wanted to return to programming,</strong> to write some code, to develop something from scratch.</p>
<p>So I went to Unieuro and bought <strong>the laptop with the best value for money.</strong></p>
<h2 id="resuming-development">Resuming development</h2>
<p><strong>A year later, I started developing seriously again,</strong> and I felt great on <strong>Windows</strong>; after all, that&rsquo;s where I had started, and I felt at home.</p>
<p>Thanks to <strong>XAMPP</strong>, I could set up my own lamp stack in 5 minutes and start tinkering with <strong>WordPress</strong>, <strong>Laravel</strong>, and create my projects the way I prefer: using <strong>core PHP</strong>.</p>
<p>As I caught up with the times and learned to use the new tools, I increasingly realized that <strong>Windows was no longer the ideal choice for me.</strong></p>
<p>I was no longer creating management software but web applications, and <strong>the web runs on Linux.</strong></p>
<p>I started using <strong>Node.js</strong> and various <strong>JavaScript</strong> tools that work from the command line, and gradually, I began to discover how <strong>limiting PowerShell</strong> could be&hellip;</p>
<p>Then I expanded my skills as a backend developer, and here I had to make the leap to a <strong>more performant terminal</strong>, and that&rsquo;s when I discovered Linux.</p>
<p>I started using <strong>WSL</strong>, but it was all a bit <strong>too messy</strong> for my taste, so I switched to Linux proper.</p>
<h2 id="arrival-at-linux">Arrival at Linux</h2>
<p><strong>It wasn&rsquo;t love at first sight.</strong></p>
<p>I started installing Ubuntu as a virtual machine with <strong>VirtualBox</strong> to try to tinker a bit with the penguin.</p>
<p>The <strong>first impact</strong>, perhaps also due to a lifetime spent on other systems, was <strong>quite tragic</strong>&hellip;</p>
<p>Everything I wanted to do, I had to <strong>configure</strong>; there was very little that worked right away, and for a while, I abandoned the idea of Linux.</p>
<p>Then little by little, I <strong>reapproached it</strong>, trying to <strong>adapt my way of thinking to this system</strong>, and everything changed.</p>
<p>The trick is to <strong>stop wanting Linux to resemble Windows or Mac OS,</strong> but to try to understand what it really is; then you can appreciate its infinite qualities.</p>
<p>Installing libraries, managing components, using command-line software, <strong>everything is much easier on Linux</strong>, everything works on the first try.</p>
<p>Configuring Vagrant correctly on Windows took much more time than on Ubuntu, and so much more.</p>
<p>Most of the time, all you need to do is <strong>run a command from the terminal, and voilà</strong>, everything works perfectly.</p>
<p>As a developer from now on, I think I will only use Linux distros, leaving a partition with Windows in case I have to do specific work with Photoshop (currently happily replaced with Pixlr) or other software available only for Windows.</p>
<p>In addition to being better from a developer&rsquo;s perspective, there is also the whole issue of <strong>open source</strong> behind it, the largest community project in history, the <strong>opposition to multinational corporations</strong>, the <strong>fight against planned obsolescence of laptops</strong>, and much more, but this is not the time to address these issues.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As a developer, I would suggest that anyone <strong>switch to Linux</strong> (except those developing for iOS or specifically for Windows). Certainly, <strong>the beginning is not easy</strong>; you need to tinker a bit, bump your head a few times, but once you get into the right <strong>mood</strong>, everything flows smoothly and quickly.</p>
<p>For now, I&rsquo;m getting along very well with <strong><a href="https://www.ubuntu-it.org/">Ubuntu</a></strong> because I like <strong>Gnome</strong>. I tried other distros, but in the end, there isn&rsquo;t much difference; everything can be installed on any distro. So I went for Ubuntu for its <strong>stability</strong>.</p>
<p>I have been using it as a <strong>primary system for a couple of months</strong> now, and I think it will remain so for a long time. This way, I can <strong>finally free myself from Apple&rsquo;s pressing marketing</strong>, which, to be honest, is a constant temptation but would end up making me a slave to the apple&hellip; You know that if you buy a Mac, you want an iPhone, then an iPad, and an Apple Watch, and in the end, you always use the same three apps&hellip;</p>
<p>Even <strong>Windows laptops</strong> are becoming increasingly <strong>beautiful</strong> and tempting, with hardware that seems to age faster and faster. Of course, if you put an i7 in an ultrabook without a cooling system, you either melt the PC or castrate it and turn it into an i3. In the end, it&rsquo;s all marketing&hellip;</p>
<p>With <strong>Linux</strong>, on the other hand, you can take an <strong>i5</strong> from any generation, throw in an **SSD</p>
<p>** and <strong>8GB</strong> of RAM, and you&rsquo;re good for years without performance issues and more.</p>
<p>Of course, there&rsquo;s the problem of <strong>battery life</strong>, which is not as well optimized on Linux&hellip; But in the end, I use <strong>Linux for work</strong>, connected to the power, and when I want to chill on the couch, I can use Windows and enjoy a few more hours away from the cables.</p>
]]></content>
		</item>
		
		<item>
			<title>CMS, Framework or Core Language?</title>
			<link>https://albertoreineri.it/en/blog/cms-framework-or-core-language/</link>
			<pubDate>Wed, 09 Oct 2019 21:26:11 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/cms-framework-or-core-language/</guid>
			<description>CMS, Framework, Core Language… Nowadays, when approaching a new project, we have the opportunity to use highly advanced tools that allow us to speed up and facilitate the work.
CMS systems are increasingly successful; it is said that half of the world&amp;rsquo;s websites are created with WordPress (although this data changes frequently&amp;hellip;). Frameworks are also thriving today, becoming more advanced and sophisticated.
And what about good old handwritten code? Does it still exist?</description>
			<content type="html"><![CDATA[<p>CMS, Framework, Core Language… Nowadays, when approaching a new project, we have the opportunity to use highly advanced tools that allow us to speed up and facilitate the work.</p>
<p><strong>CMS</strong> systems are increasingly successful; it is said that half of the world&rsquo;s websites are created with WordPress (although this data changes frequently&hellip;). <strong>Frameworks</strong> are also thriving today, becoming more advanced and sophisticated.</p>
<p>And what about good old <strong>handwritten code</strong>? Does it still exist?</p>
<p>But let&rsquo;s go step by step. I will try to analyze each of these three options, highlighting strengths and weaknesses, and finally, I will share my opinion.</p>
<h2 id="1-cms">1. CMS</h2>
<p><strong>Content Management Systems (CMS)</strong> allow managing a site&rsquo;s content without having programming knowledge. In practice, they offer an interface to write articles and pages almost as if you were using Word. The CMS translates this page into <strong>HTML</strong> so that it can be viewed by a browser.</p>
<p>Modern CMS, especially <strong><a href="https://en.wordpress.org/">WordPress</a></strong>, can greatly speed up website creation. There are even <strong>plugins</strong> to create the site&rsquo;s graphics without writing a single line of HTML.</p>
<p>They are the perfect solution for <strong>creating blogs</strong> (the reason they were created), but they can also be used for showcase sites, landing pages, and <strong>low-budget</strong> projects.</p>
<p>They boast a <strong>huge number of plugins</strong>, simplifying developers&rsquo; lives by providing pre-packaged services to configure.</p>
<p>On the downside, they may carry a lot of <strong>not always useful dependencies</strong>. Especially when using <strong>plugins, you need to be very careful</strong>; otherwise, you may make the page very heavy and significantly <strong>slow down</strong> the site&rsquo;s performance.</p>
<p><em>Personally, I&rsquo;m not a big fan of CMS, but I recognize that if used for the purpose for which they were created, they are fantastic. For a blog, in my opinion, there is no better solution. Creating a theme from scratch is not very difficult, and you can quickly build an updatable platform.</em></p>
<h2 id="2-framework">2. Framework</h2>
<p>Frameworks are very different from CMS and should never be compared. <strong>If a CMS delivers ready-made solutions, a framework just sets the table.</strong></p>
<p>Frameworks <strong>offer a series of libraries</strong> that speed up project development but <strong>do not replace the programmer&rsquo;s work</strong>. To use a framework, <strong>in-depth knowledge</strong> of the language it is written in is required.</p>
<p>This is an excellent solution for <strong>medium/large projects</strong>. All frameworks offer a <strong>well-organized working environment</strong>, reducing the chance of writing bad code and increasing the speed at which code is written.</p>
<p>They also <strong>manage many security issues</strong>, removing them from the developer&rsquo;s mind, who can focus solely on project development.</p>
<p>I personally really like <strong>Laravel</strong>. Fast, secure, and tidy. Plus, it&rsquo;s written in PHP, which is the language I use the most at the moment.</p>
<p>In the near future, however, I plan to thoroughly study <strong>Django</strong>, which seems to be doing great and is much faster than Laravel, but we&rsquo;ll see what the future holds&hellip;</p>
<h2 id="3-pure-language">3. Pure Language</h2>
<p>A third way to develop your projects online is to <strong>build everything from scratch.</strong></p>
<p>Of course, it may seem <strong>stupid</strong> to start from scratch when the above tools already exist, <strong>but it can have its advantages.</strong></p>
<p>If a developer knows a language <strong>very well</strong>, they can <strong>build their own framework and personal CMS.</strong> This is not about &ldquo;reinventing the wheel&rdquo; every time, but doing it only once and reusing it later. Of course, <strong>this has its disadvantages in terms of security and scalability, but it also has many advantages, especially speed.</strong></p>
<p>Well-written core PHP is much faster than Laravel.</p>
<p>Certainly, in this way, you will need to handle all the problems yourself, without thinking that there is already a ready-made program. But a developer is still a developer, and this is his job.</p>
<p>Time and budget are always a problem, which is why the pure language is often disparaged in favor of CMS or frameworks, but where possible, it can also be a solution.</p>
<h2 id="my-opinion">MY OPINION</h2>
<p>Among CMS, Framework, and Core language, I use all three methods. Over the years, I created my own framework and personal CMS, allowing me to <strong>manage projects 100%</strong>, <strong>customizing every tiny part of the back-end, front-end, and UX very quickly.</strong> Certainly, <strong>it took some time</strong> to create them, and it takes time from time to time to update them and keep up with the times, but this way, I can handle everything I do, <strong>I am the real &ldquo;owner&rdquo; of my project.</strong></p>
<p>Sometimes, however, it is simpler to use a CMS or a framework, <strong>depending on the type of project you want to create.</strong></p>
<p>In terms of <strong>speed</strong>, if you write good code, nothing beats the <strong>core language</strong>. In terms of <strong>scalability</strong>, if many people work on the same project, if a high level of security is required, and if complicated database relationships need to be managed, then a good solution may be to use a <strong>framework</strong>.</p>
<p>Finally, for a <strong>blog</strong> or for simple sites with a low budget, a <strong>CMS</strong> can be used, which will surely be slower than the previous solutions but will take care of many problems, removing a burden from the developer.</p>
<p>This is what I have noticed using these tools. What do you think? Are you a huge fan of WordPress and therefore snub the other options, or do you still write code?</p>
<p>How do you choose between CMS, Framework, and core language?</p>
<p>Let me know in the comments.</p>
<p>Happy coding to everyone!</p>
]]></content>
		</item>
		
		<item>
			<title>Gulp.js in WordPress Theme</title>
			<link>https://albertoreineri.it/en/blog/gulp.js-in-wordpress-theme/</link>
			<pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/gulp.js-in-wordpress-theme/</guid>
			<description>For some time, I&amp;rsquo;ve been working on fairly large projects, and it&amp;rsquo;s not always easy to manage everything without getting lost in the thousands of files and folders within the project.
Code organization is a fundamental part of software development, be it web, desktop, or mobile.
Fortunately, today we can use tools that help us in the development and project management process.
One of these tools is Gulp.js!
What is Gulp.</description>
			<content type="html"><![CDATA[<p>For some time, I&rsquo;ve been working on <strong>fairly large projects</strong>, and it&rsquo;s not always easy to manage everything without getting lost in the <strong>thousands of files and folders</strong> within the project.</p>
<p><strong>Code organization</strong> is a fundamental part of software development, be it web, desktop, or mobile.</p>
<p>Fortunately, today we can use tools that help us in the <strong>development and project management process</strong>.</p>
<p>One of these tools is <strong>Gulp.js!</strong></p>
<h2 id="what-is-gulpjs">What is Gulp.js</h2>
<p>Gulp is a <strong>task runner</strong>, a program that allows you to <strong>automate a series of repetitive and constant tasks</strong>, such as minifying CSS and JS code, refreshing on every save, synchronizing web pages, optimizing images, and much more.</p>
<p><em><strong>To simplify</strong></em>, once Gulp is correctly set up within my project, every time I save a file, Gulp automatically checks the operation just performed (saving) and acts accordingly. In this case, it refreshes the browser.</p>
<p>If I modify a CSS file, on saving, Gulp will minify the file and refresh the browser!</p>
<p>Imagine a project that takes months to develop; being able to avoid <strong>refreshing the browser every time</strong>, compiling SASS files, optimizing images, etc., allows developers to <strong>save a lot of time</strong> or, at the very least, focus on something other than mundane and repetitive actions!</p>
<h2 id="gulp-and-wordpress">Gulp and WordPress</h2>
<p>The beauty of Gulp is that it can be used in <strong>any type of project</strong>, even during the development of a <strong>theme</strong> or <strong>plugin</strong> for <strong>WordPress</strong>, greatly <strong>speeding up</strong> programming times!</p>
<p>If you want to install and <strong>start using</strong> Gulp, I recommend this article: <a href="https://css-tricks.com/gulp-for-beginners/">https://css-tricks.com/gulp-for-beginners/</a>. That&rsquo;s where I started!</p>
<h2 id="my-gulp-for-wordpress">My Gulp for WordPress!</h2>
<p>If you want a <strong>starting point</strong> to configure <strong>Gulp</strong> in your project, you can look on <a href="https://github.com/albertoreineri/">my GitHub profile</a>. I have included <a href="https://github.com/albertoreineri/gulp-for-wordpress">my file</a> for <strong>basic Gulp configuration in WordPress.</strong></p>
<p>In my latest project using <strong>Gulp</strong>, I automated the following tasks:</p>
<ul>
<li>Refresh on every modification of any file</li>
<li>Optimize <strong>images</strong></li>
<li>Combine all <strong>SCSS</strong> files into one, compile it, and minify it</li>
<li>Combine all <strong>JS</strong> files into one and minify it</li>
</ul>
<p>To use <strong>Gulp</strong>, you need to split the folder with the site&rsquo;s resources. One will be the development folder, aptly named &ldquo;<strong>src</strong>&rdquo;, and the other will be the one that will be published, called &ldquo;<strong>assets</strong>.&rdquo;</p>
<p>On GitHub, you can find my configuration file to handle <strong>Gulp tasks within a WordPress theme.</strong></p>
<p>To <strong>get started</strong>, you just need to copy my gulpfile.js into your theme and run this command from the CLI:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npm install --save-dev gulp gulp-imagemin gulp-uglify gulp-sass browser-sync del gulp-concat gulp-clean
</span></span></code></pre></div><p>Now all you have to do is <strong>modify line 3</strong> of the file by entering the path to your WordPress project.</p>
<p>I hope I&rsquo;ve encouraged you to <strong>use this tool.</strong> Although it&rsquo;s a bit complicated to set up, I&rsquo;m sure that once you&rsquo;ve understood it thoroughly, you <strong>won&rsquo;t be able to do without it!</strong></p>
<p>Let me know what you think in the <strong>comments</strong>, and <strong>happy coding!</strong></p>
]]></content>
		</item>
		
		<item>
			<title>How to choose a Framework</title>
			<link>https://albertoreineri.it/en/blog/how-to-choose-a-framework/</link>
			<pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/how-to-choose-a-framework/</guid>
			<description>Today, &amp;ldquo;from scratch&amp;rdquo; development is becoming less common. Lower budgets and tighter timelines have forced most developers to start from an existing foundation when creating their projects.
I still personally love developing &amp;ldquo;from scratch,&amp;rdquo; but living in today&amp;rsquo;s world and unable to spend nights writing code, I had to adapt to the current environment and start using some frameworks myself.
For some, these may be simple tips, but many times when faced with the choice between angular, vue, react, or laravel or codeigniter, the decision can be challenging.</description>
			<content type="html"><![CDATA[<p>Today, &ldquo;from scratch&rdquo; development is becoming less common. Lower budgets and tighter timelines have forced most developers to start from an existing foundation when creating their projects.</p>
<p>I still personally love developing &ldquo;from scratch,&rdquo; but living in today&rsquo;s world and unable to spend nights writing code, I had to adapt to the current environment and start using some frameworks myself.</p>
<p>For some, these may be simple tips, but many times when faced with the choice between <a href="https://angular.io/">angular</a>, <a href="https://vuejs.org/">vue</a>, <a href="https://reactjs.org/">react</a>, or <a href="https://laravel.com/">laravel</a> or <a href="https://codeigniter.com/">codeigniter</a>, the decision can be challenging.</p>
<h2 id="premise">Premise</h2>
<p>Before delving into the various points of the article, I&rsquo;d like to remind you of a general maxim: <strong>you cannot use a framework well without knowing the language in which it is written.</strong></p>
<p>You cannot use Bootstrap well without knowing CSS, Laravel without knowing PHP, or React without knowing JavaScript. In this profession, having solid foundations truly makes a difference between copying code from Stack Overflow and writing it knowing exactly what you are doing, why, and the general repercussions on the project.</p>
<h2 id="what-is-the-purpose-of-a-framework">What is the purpose of a framework?</h2>
<p>The first and most obvious question should be: &ldquo;<strong>What should the framework do?</strong>&rdquo; Unfortunately, this question is often ignored.</p>
<p>Using a <strong>framework created to fulfill a specific purpose</strong> is simpler than adapting another one to our needs. Using jQuery to manipulate data structures is certainly not the best choice. Therefore, you must have a clear goal in mind to make the right choice.</p>
<h2 id="4-characteristics-to-choose-a-framework">4 characteristics to choose a framework</h2>
<p>I want to highlight <strong>4 important characteristics</strong> to keep in mind when choosing a new framework:</p>
<ul>
<li>Time</li>
<li>Properties and technical features</li>
<li>Community involvement</li>
<li>Consequences of the choice</li>
</ul>
<p>These are <strong>the four keys</strong> to make a good choice.</p>
<p>Of course, there are <strong>advantages and disadvantages</strong> to each framework, but keeping these four points in mind can help make a correct decision.</p>
<h3 id="time">Time</h3>
<p><em>In a constantly rushing world, time is crucial.</em></p>
<p>The <strong>time factor</strong> is crucial in choosing a framework. Why? Because without <strong>time to study, test, and develop it,</strong> it is useless to think of using it.</p>
<p>Often we have <strong>little time to deliver a project,</strong> and introducing a new framework will almost certainly cause delays. Therefore, in terms of planning ahead, we need to check the <strong>amount of code</strong> that this framework will make us write. Not just the <strong>actual time</strong> it will take to write it, but also <strong>how complex</strong> the code you and your team will have to write will be, as it will also cause a significant loss of time.</p>
<p>The level of complexity also affects how <strong>manageable</strong> it will be. So, <strong>the more code you write, the more difficult it becomes to support it later.</strong> Thus, more code leads to more errors.</p>
<p>I found this simple programming rule online: <em>e = mc² (errors = more code^2)</em></p>
<h3 id="properties-and-technical-features">Properties and technical features</h3>
<p>The choice of a framework can be influenced by <strong>technical aspects</strong>, community opinions, and what can be found in the framework&rsquo;s documentation.</p>
<p>Do not be deceived by what you read in forums. The best way to know if what is being talked about is real is simple: <strong>test it.</strong></p>
<p>However, as mentioned earlier, due to <strong>limited time</strong>, testing a framework might be a luxury we cannot afford. Therefore, try to <strong>extrapolate the most important technical feature</strong> from the available information.</p>
<p>Is the framework suitable for the structure of the project we have or want to implement? <strong>Using a framework designed for a specific task is easier than adapting one to our needs.</strong></p>
<p>Will it be better in terms of <strong>performance</strong>? There&rsquo;s no point in opting for a slow framework during development that will also be slow in execution.</p>
<p>If we are choosing a front-end framework, it is important to check <strong>browser compatibility.</strong></p>
<p>Lastly, as I mentioned in the introduction to this article, you must <strong>know the basics:</strong> to be able to correctly choose a structure, you need to have the basics and requirements to fully understand it. When you choose a framework, you must <strong>know what you are talking about.</strong> By this, I mean you need to know the purpose of a framework. If you do not have basic knowledge, learning a framework will be useless as you will not be able to fully understand it.</p>
<p><em>If you are not prepared, learn the basics first.</em></p>
<h3 id="community-involvement">Community involvement</h3>
<p>What makes a framework worth considering? <strong>The people who use it.</strong> Okay, but how can we <strong>understand if a framework has an active community?</strong></p>
<p>There are <strong>several factors</strong> that can help us understand the community involvement for a particular technology:</p>
<ul>
<li>How many people talk about it on the web?</li>
<li>How many people continue to use it?</li>
<li>How often do developers respond to bug reports?</li>
<li>How many pull requests?</li>
</ul>
<p>These are just some of the questions that can give you some information about community involvement.</p>
<h3 id="what-are-the-advantages-of-a-crowded-framework">What are the advantages of a &ldquo;crowded&rdquo; framework?</h3>
<p>An active community considerably increases <strong>documentation</strong> on a particular technology, thus <strong>reducing the time</strong> required for research and learning.</p>
<p>Moreover, if the company you work for is growing, it will be much easier to <strong>find collaborators</strong> familiar with the framework due to its popularity.</p>
<p>However, not always an active community is enough to direct our choice. After ascertaining the existence of a good community, you need to check <strong>how many of these people</strong> (preferably large companies) <strong>actually use this technology in a production environment!</strong></p>
<p>Discovering who uses a particular technology is far from easy, but creators often <strong>mention the companies</strong> that use the framework and, in that case, check how they implement this technology and for what purpose.</p>
<p>Usually, development teams of these technologies release a <strong>roadmap on their future plans,</strong> so check what <strong>they have in mind.</strong></p>
<h3 id="consequences-of-the-choice">Consequences of the choice</h3>
<p>Before finalizing the choice, we should take a moment to think about the <strong>possible consequences</strong> of what choosing the new framework could entail in the development environment.</p>
<p>Remember that if you work <strong>in a team,</strong> it might be more difficult for others to learn a new framework. <strong>How much do you think they could take to get familiar with it</strong> and how much time do you think they can dedicate to learning it? Should they know something else before studying?</p>
<p><strong>The choice must be weighed and discussed</strong> multiple times to see especially what <strong>the team thinks</strong> about it.</p>
<h2 id="conclusions">Conclusions</h2>
<p>There is no golden rule that guarantees a 100% right choice. Only practice and time will allow us to understand this.</p>
<p>In this article, I hope I managed to give you ideas to start facing your choice, <strong>but remember:</strong></p>
<p><em>It&rsquo;s not about finding the best framework; it&rsquo;s about finding the</em> <strong>right</strong> <em>framework.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Configuring the PC for Web Development with Free Software</title>
			<link>https://albertoreineri.it/en/blog/configuring-the-pc-for-web-development-with-free-software/</link>
			<pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/configuring-the-pc-for-web-development-with-free-software/</guid>
			<description>Let&amp;rsquo;s see which free software we can use for web development.
Are you getting into the programming world and want to start developing some websites or a small web app? Congratulations! Welcome to the fantastic world of Web Development!
To start, you&amp;rsquo;ll need to install the necessary programs to write your first code and make what you&amp;rsquo;ve written &amp;ldquo;run.&amp;rdquo; In this article, we&amp;rsquo;ll quickly go over the software you&amp;rsquo;ll need.</description>
			<content type="html"><![CDATA[<p>Let&rsquo;s see which free software we can use for web development.</p>
<p>Are you getting into the programming world and want to start developing some websites or a small web app? Congratulations! Welcome to the fantastic world of Web Development!</p>
<p>To start, you&rsquo;ll need to install the necessary programs to write your first code and make what you&rsquo;ve written &ldquo;run.&rdquo; In this article, we&rsquo;ll quickly go over the software you&rsquo;ll need.</p>
<p>Let&rsquo;s set aside the eternal debate about which operating system is better for a particular thing, the trends that lead to choosing one PC over another, and things like that. All the software mentioned in this article is available for Windows, Mac, and Linux.</p>
<p>So, let&rsquo;s see what we need to develop websites and web apps.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/243UeRVMtFI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="1-browser">1. BROWSER</h2>
<p>If we intend to do some web development, the fundamental software we need is a browser. All operating systems come with a pre-installed browser, but my recommendation is to use <a href="https://www.google.com/intl/en/chrome/"><strong>Google Chrome</strong></a>. This browser is very fast and offers a set of very useful <strong>developer tools</strong>.</p>
<p>I won&rsquo;t dwell on this point because you&rsquo;re probably already using Chrome or know perfectly well what it is. Let&rsquo;s move on and see other free software for web development.</p>
<h2 id="2-text-editor">2. TEXT EDITOR</h2>
<p>To do web development, you need to write code, and to write code, you need a text editor. It&rsquo;s possible to write code even with Notepad, but it&rsquo;s certainly not an optimal solution.</p>
<p>My recommendation is to use <a href="https://code.visualstudio.com/">Visual Studio Code</a>, a fantastic free software from Microsoft!</p>
<p>Rich in features and extensions, it allows you to manage projects very well, also thanks to the internal <strong>terminal</strong> in the interface.</p>
<p>This is definitely the essential program for any programmer.</p>
<h2 id="3-local-server">3. LOCAL SERVER</h2>
<p>To &ldquo;make&rdquo; our projects run on our computer, it&rsquo;s necessary to install a local server to make them work.</p>
<p>I&rsquo;ve been using <a href="https://www.apachefriends.org/index.html">XAMPP</a> for years, also free software that includes <strong>MySQL</strong>. Incredibly useful and easy to use, it allows you to configure a local server and start your project in <strong>PHP</strong> in just a few minutes.</p>
<p>Essential for creating sites in <strong>WordPress</strong>, for projects in PHP frameworks like <strong>Laravel</strong> or <strong>CodeIgniter</strong>, or even for work in <strong>Core PHP</strong>.</p>
<h2 id="4-ftp-client">4. FTP CLIENT</h2>
<p>Once we&rsquo;ve finished our site, we need to <strong>upload it online</strong>!</p>
<p>To do this, you can use an <strong>FTP Client</strong> that allows you to <strong>connect to the hosting</strong> and upload the site&rsquo;s files.</p>
<p>The most commonly used software for this task is definitely <a href="https://filezilla-project.org/">FileZilla</a>. Free, simple, and intuitive, it&rsquo;s the right choice for setting up your site easily, quickly, and efficiently.</p>
<h2 id="5-graphics">5. GRAPHICS</h2>
<p>Finally, let&rsquo;s not forget that every project also has a graphic part!</p>
<p>To <strong>develop the layouts</strong> of your projects, I recommend using <a href="https://www.figma.com/">Figma</a>. I&rsquo;ve been using this software for a while, and I&rsquo;m really satisfied, plus it&rsquo;s <strong>completely free</strong>! Just sign up with your Google account, and voilà! You can start creating fantastic web layouts and more!</p>
<p>All these software are <strong>free</strong> and <strong>cross-platform</strong>, except for the next one, unfortunately.</p>
<p>I&rsquo;m talking about <a href="https://www.adobe.com/products/photoshop.html">Photoshop</a>, a fabulous Adobe software that allows you to do everything you want with photos and images. Although many of these things can also be done with Figma, <strong>I still can&rsquo;t completely detach myself from this software</strong>, which remains the only paid one in my setup&hellip;</p>
<p>If you want to try a valid alternative, there&rsquo;s <a href="https://www.gimp.org/">Gimp</a>, which they say should be very powerful. Unfortunately, having started with Photoshop and knowing it quite well by now, I don&rsquo;t feel like starting from scratch to learn a new program&hellip; I&rsquo;ll leave it up to you to judge!</p>
<p>That&rsquo;s <strong>all you need</strong>! Now you can start getting creative with <a href="https://open.spotify.com/show/546eUw3PsRI1HUGbBUeghC">code and design</a> and create your first projects!</p>
<p>Thanks for reading this article.</p>
<p><em>Happy coding!</em></p>
]]></content>
		</item>
		
		<item>
			<title>Remove Virus from WordPress</title>
			<link>https://albertoreineri.it/en/blog/remove-virus-from-wordpress/</link>
			<pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/remove-virus-from-wordpress/</guid>
			<description>WordPress is one of the most widely used platforms in the world for creating websites, but sometimes it can be easy to encounter a virus. But how can they be removed?
WordPress allows anyone to set up a functioning website in very little time and with very low costs.
However, this also means having many websites created by non-professionals who install themes and plugins randomly without really knowing what they are doing.</description>
			<content type="html"><![CDATA[<p>WordPress is one of the most widely used platforms in the world for creating websites, but sometimes it can be easy to encounter a virus. But how can they be removed?</p>
<p>WordPress allows anyone to set up a functioning website in very little time and with very low costs.</p>
<p>However, this also means having many websites created by non-professionals who install themes and plugins randomly without really knowing what they are doing. As long as the site is small and has a small number of users, there&rsquo;s no problem. However, when it reaches a larger audience, the probability of being targeted by hackers becomes higher.</p>
<p>It is estimated that at least 30% of WordPress websites have vulnerabilities. Considering that more than 75 million websites use this platform, the vulnerabilities are numerous.</p>
<p>Let&rsquo;s now see how to keep your WordPress site secure and how to eliminate any viruses.</p>
<h2 id="securing-wordpress">Securing WordPress</h2>
<p>WordPress uses a very intelligent system of themes and plugins, but it is necessary to be careful about what is installed.</p>
<p>There are some fundamental rules:</p>
<ul>
<li><strong>Check the source of themes and plugins</strong></li>
<li><strong>Install as few plugins as possible</strong></li>
<li><strong>Have good hosting</strong></li>
</ul>
<h3 id="1-check-the-source-of-themes-and-plugins">1. Check the Source of Themes and Plugins</h3>
<p>Every time something is installed on a WordPress site, code is added to the project. If the code is well written, it will bring useful functionality and improve the site. However, if it is poorly written or contains bugs, it can cause many problems.</p>
<p>When installing something on WordPress, it is crucial to pay very close attention to the source.</p>
<p><strong>NEVER</strong> install plugins or themes downloaded from unclear sources.</p>
<p>The best thing is to stick to the official WordPress repository or trusted large stores.</p>
<h3 id="2-install-as-few-plugins-as-possible">2. Install as Few Plugins as Possible</h3>
<p>There are plugins for everything nowadays, but each plugin is an additional object to manage and maintain.</p>
<p>Having plugins specific to almost useless functionalities risks bringing vulnerabilities to the system and unnecessarily burdening the site.</p>
<p>Installing 20 plugins managed by different developers significantly increases the risk of attacks. If one of these developers does not fix a bug or a vulnerability is discovered, the entire site is at risk.</p>
<p><strong>The trick is this: &ldquo;Few but good.&rdquo;</strong></p>
<h3 id="3-have-good-hosting">3. Have Good Hosting</h3>
<p>We are talking about hosting and not a server because the vast majority of websites are hosted on shared hosting. These services have improved a lot and offer services that were previously available only on dedicated servers, such as SSH access, caching, and security.</p>
<p>Being able to rely on a good service is very important to protect against attacks and manage them in the unfortunate event of an infection.</p>
<h2 id="removing-a-virus-from-a-wordpress-site">Removing a Virus from a WordPress Site</h2>
<p>There is no single way to remove a virus because they act very differently from each other.</p>
<p>This complicates things a little&hellip; So, it is difficult to explain how to remove a virus in a simple article, but I will try to indicate some ways to manage the problem.</p>
<h3 id="1-look-for-backups-before-the-attack">1. Look for Backups Before the Attack</h3>
<p>If you have good hosting, you will certainly have daily or at least weekly backups. The first thing to do is download one of these backups and keep it aside to have a &ldquo;pre-virus&rdquo; situation.</p>
<p>If the site is static, without updatable sections like a blog or portfolio, you can simply restore the backup to the pre-attack version, and the job is done.</p>
<p>If, on the other hand, the site has undergone updates that you do not want to lose, it is advisable to keep a pre-virus copy for safety and go look for infected files.</p>
<h3 id="2-scan-the-website-with-online-tools">2. Scan the Website with Online Tools</h3>
<p>There are many online tools capable of analyzing the site and identifying critical issues.</p>
<p>You can also use some plugins developed to manage security, such as WordFence or Sucuri, and use their scan to analyze all files on the site.</p>
<p>These do not guarantee a 100% optimal result, but it is still a good starting point.</p>
<p>Here are some useful links for scanning:</p>
<ul>
<li><a href="https://wpsec.com/">WPsec</a></li>
<li><a href="https://sitecheck.sucuri.net/">Sucuri SiteCheck</a></li>
<li><a href="https://hackertarget.com/wordpress-security-scan/">HackerTarget WordPress Security Scan</a></li>
<li><a href="https://wprecon.com/">WPrecon</a></li>
<li><a href="https://firstsiteguide.com/tools/free-fsg/wordpress-security-online-scanner/">FirstSiteGuide WordPress Security Online Scanner</a></li>
</ul>
<p>If you are comfortable with the CLI, you can also use <a href="https://wpscan.org/">WP Scan</a>, the software par excellence for testing the security of a WordPress site.</p>
<h3 id="disable-themes-and-plugins">Disable Themes and Plugins</h3>
<p>To try to isolate the virus, it can be useful to proceed with disabling themes and plugins.</p>
<p>If the site works without plugins and with the default WordPress theme, you can reactivate them one by one and figure out where the infection is.</p>
<h3 id="copy-original-theme-and-plugin-files">Copy Original Theme and Plugin Files</h3>
<p><strong>CAUTION!!!</strong> Be very careful when implementing this point. If you are not experienced, you could do more damage than what is already present! If a theme or a plugin has been infected, one solution to remove the virus from the WordPress site is to overwrite the folders containing the theme and plugins with versions downloaded from official sources.</p>
<p>In this case, if the virus was present in the folder, it will be overwritten.</p>
<h3 id="analyze-wordpress-structure">Analyze WordPress Structure</h3>
<p>Lastly, you can <strong>analyze the file and folder structure of WordPress</strong> to check that there are no strange files not present in the original installation.</p>
<p>If strange files are found, they should be deleted, always paying close attention to what is being done.</p>
<h2 id="conclusion">Conclusion</h2>
<p>These are some generic steps to check the status of a website.</p>
<p>Unfortunately, <strong>every virus is different</strong>, some act on the database, others directly on the system files, and still others in ways we cannot even imagine.</p>
<p>In this article, I have tried to give you <strong>some basic advice</strong> to try to remove a virus from WordPress. I hope this could be helpful to you!</p>
]]></content>
		</item>
		
		<item>
			<title>GIT! What is it???</title>
			<link>https://albertoreineri.it/en/blog/git-what-is-it/</link>
			<pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/en/blog/git-what-is-it/</guid>
			<description>Git is fantastic version control software created by a pretty good programmer: Linus Torvalds.
WHO IS LINUS TORVALDS? For the few who don&amp;rsquo;t know who this person is (I hope they are really very few&amp;hellip;), he is the creator of Linux. If we consider that more than half of the web and the majority of smartphones operate thanks to code written by him, we all owe him gratitude for his genius and generosity.</description>
			<content type="html"><![CDATA[<p><strong>Git</strong> is fantastic version control software created by a pretty good programmer: <strong>Linus Torvalds.</strong></p>
<h2 id="who-is-linus-torvalds">WHO IS LINUS TORVALDS?</h2>
<p>For the few who don&rsquo;t know who this person is (I hope they are really very few&hellip;), he is the creator of <strong>Linux</strong>. If we consider that more than half of the <strong>web</strong> and the majority of <strong>smartphones</strong> operate thanks to code written by him, we all <strong>owe him gratitude</strong> for his genius and generosity.</p>
<h2 id="but-lets-get-back-to-git">BUT LET&rsquo;S GET BACK TO GIT!</h2>
<p>There are thousands of articles about this software online, but truly understanding what it does for a <strong>newbie</strong> is not that simple.</p>
<p>I&rsquo;ll try to explain it easily and quickly.</p>
<h2 id="what-is-git">WHAT IS GIT?</h2>
<p>Git is software that allows you to <strong>track</strong> changes made to a project.</p>
<p>The simplest function is the one that allows you to <strong>go back</strong> to a previous version of the project you are working on.</p>
<p>Let&rsquo;s say you&rsquo;re implementing a feature, perhaps writing a couple of hours of code, but you realize you&rsquo;ve taken the wrong path. At this point, without version control software, you would have to hit <strong>ctrl+z</strong> indefinitely to find the exact point you want to return to. And what if, by chance, the cache of your IDE has stalled for some reason, and you find yourself stuck in a point where you can&rsquo;t go forward or backward?</p>
<p>Even if we were foresighted programmers and had created a backup folder for the software, we would still have to navigate through the file manager, find the folder, rename it, move and delete files, etc&hellip;</p>
<p><strong>With Git, you just enter a command</strong>, and your project magically returns to how it was before! Fantastic!</p>
<p>It is also possible to keep open <strong>different development paths</strong>, perhaps testing a feature from one base and another from the same base, and then decide which one is the best, all without creating thousands of folders and subfolders that will surely end up making everything very confusing.</p>
<p>With Git, it is also possible to <strong>upload our project online</strong>, on <strong>GitHub</strong>, a wonderful code-sharing platform.</p>
<p>This way, we can download our code from any computer anywhere in the world.</p>
<h2 id="git-for-small-projects">GIT FOR SMALL PROJECTS</h2>
<p>Certainly, Git was developed for very large projects, but it is such a <strong>fast and simple</strong> software (git in the US means <em>idiot</em>&hellip;) that it can also be used for small things, to keep track of our work, make small changes, or run tests. Furthermore, the ability to &ldquo;ship&rdquo; everything online is very useful in case we need to access the code from a new location!</p>
<h2 id="command-line">COMMAND LINE</h2>
<p>Git is software that works through the <strong>CLI</strong>, the command line.</p>
<p>If you are not familiar with this tool, <strong>it&rsquo;s time to start</strong> getting used to it. <strong>Don&rsquo;t be scared</strong> by the absence of icons, graphics, and a mouse; in reality, it is much faster than the interfaces we have been accustomed to in recent years!</p>
<p>And you are a programmer, right? The mouse is more of an embellishment for the desk; <strong>the work is done with ten fingers on the keyboard</strong>!!!</p>
<p>There is also a Desktop version of the software, but the classic one works so well that I have never thought of testing it.</p>
<p>If you work on <strong>Windows</strong> (like me!!!), you can also download <strong>Git Bash</strong>, a very nice command line created to facilitate Git operations.</p>
<p>Soon, I will <a href="/blog/come-usare-git/">write a brief guide on basic Git commands</a>, so you can start using it.</p>
<p>I&rsquo;m sure you won&rsquo;t be able to do without it anymore!</p>
<p><em>Happy coding! Bye!!!</em></p>
]]></content>
		</item>
		
	</channel>
</rss>
