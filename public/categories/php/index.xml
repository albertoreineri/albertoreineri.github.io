<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>PHP on Alberto Reineri</title>
		<link>https://albertoreineri.it/categories/php/</link>
		<description>Recent content in PHP on Alberto Reineri</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>it</language>
		<lastBuildDate>Tue, 25 Apr 2023 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://albertoreineri.it/categories/php/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Chiamata AJAX e PHP</title>
			<link>https://albertoreineri.it/blog/chiamata-ajax-e-php/</link>
			<pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/blog/chiamata-ajax-e-php/</guid>
			<description>Vorresti eseguire del codice php senza fare refresh della pagina? Con AJAX puoi farlo!
Una chiamata AJAX è una richiesta asincrona che viene inviata da un browser web a un server web, utilizzando il linguaggio JavaScript. Il server web può rispondere alla chiamata AJAX con dei dati in formato JSON, XML o HTML, che possono essere poi elaborati dal browser web per aggiornare dinamicamente una parte della pagina web, senza dover ricaricare tutta la pagina.</description>
			<content type="html"><![CDATA[<p>Vorresti eseguire del codice php senza fare refresh della pagina? Con AJAX puoi farlo!</p>
<p>Una chiamata AJAX è una richiesta asincrona che viene inviata da un browser web a un server web, utilizzando il linguaggio JavaScript. Il server web può rispondere alla chiamata AJAX con dei dati in formato JSON, XML o HTML, che possono essere poi elaborati dal browser web per aggiornare dinamicamente una parte della pagina web, senza dover ricaricare tutta la pagina.</p>
<p>Ho realizzato un video tutorial effettuando <a href="/blog/inviare-mail-in-php/">l&rsquo;invio mail di cui ho parlato nella precedente guida</a> tramite AJAX:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/tm2IFW1WFes" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Codice Sorgente: <a href="https://github.com/albertoreineri/Send-Mail-With-AJAX-in-PHP">https://github.com/albertoreineri/Send-Mail-With-AJAX-in-PHP</a></p>
]]></content>
		</item>
		
		<item>
			<title>Inviare Mail in PHP</title>
			<link>https://albertoreineri.it/blog/inviare-mail-in-php/</link>
			<pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/blog/inviare-mail-in-php/</guid>
			<description>In un&amp;rsquo;epoca di framework spesso ci scordiamo che si può anche utilizzare il linguaggio base, puro e semplice.
Oggi vediamo come inviare una mail utilizzando semplicemente il core PHP.
Creeremo un esempio di reale utilizzo in modo da rendere più chiara l&amp;rsquo;operazione, quindi realizzeremo un Modulo di Contatto utilizzando Bootstrap e poi invieremo una mail al submit del form.
Codice Sorgente: https://github.com/albertoreineri/PHP-Send-Mail
Buon Codice!!!</description>
			<content type="html"><![CDATA[<p>In un&rsquo;epoca di framework spesso ci scordiamo che si può anche utilizzare il linguaggio base, puro e semplice.</p>
<p>Oggi vediamo come inviare una mail utilizzando semplicemente il core PHP.</p>
<p>Creeremo un esempio di reale utilizzo in modo da rendere più chiara l&rsquo;operazione, quindi realizzeremo un Modulo di Contatto utilizzando Bootstrap e poi invieremo una mail al submit del form.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/Dp51P_L5juY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Codice Sorgente: <a href="https://github.com/albertoreineri/PHP-Send-Mail">https://github.com/albertoreineri/PHP-Send-Mail</a></p>
<p>Buon Codice!!!</p>
]]></content>
		</item>
		
		<item>
			<title>Laravel in locale su Local by Flywheel</title>
			<link>https://albertoreineri.it/blog/laravel-in-locale-su-local-by-flywheel/</link>
			<pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/blog/laravel-in-locale-su-local-by-flywheel/</guid>
			<description>Sebbene Local by Flywheel sia stato pensato principalmente per utilizzare WordPress in locale può funzionare molto bene anche con Laravel o progetti in Core PHP e MySQL.
Local è molto semplice da utilizzare, veloce e ben organizzato, perciò è la mia scelta di default fra i server locali.
Vediamo ora come installare Laravel in locale su Local by Flywheel.
Nota: cercherò di aggiornare questo articolo con le ultime versioni di Laravel.</description>
			<content type="html"><![CDATA[<p>Sebbene Local by Flywheel sia stato pensato principalmente per utilizzare WordPress in locale può funzionare molto bene anche con Laravel o progetti in Core PHP e MySQL.</p>
<p>Local è molto semplice da utilizzare, veloce e ben organizzato, perciò è la mia scelta di default fra i server locali.</p>
<p>Vediamo ora come installare Laravel in locale su Local by Flywheel.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/ko7kSkYRmss" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p><em>Nota: cercherò di aggiornare questo articolo con le ultime versioni di Laravel. (ultimo aggiornamento: 18 febbraio 2020)</em></p>
<h2 id="aggiungere-il-sito-in-locale">Aggiungere il sito in locale</h2>
<p>Innanzitutto bisogna aggiunge un sito normalemente su Local:</p>
<ol>
<li>Fare clic sul grande pulsante “+”</li>
<li>Assegnare un nome al sito (diciamo “Laravel”)</li>
<li>Selezionare l’ambiente che desideri (il nginx predefinito funzionerà perfettamente con Laravel)</li>
<li> Inserisci il tuo nome utente e password WP (questi verranno eliminati a breve)</li>
<li>Fare clic su aggiungi sito.</li>
</ol>
<p>Puoi anche aggiungere rapidamente un certificato SSL, se lo desideri. Ti consiglio di farlo, poiché tutti i siti Web e le app saranno protetti quando vengono avviati in produzione, in questo modo avrai un ambiente molto simile a quello online.</p>
<h2 id="installa-laravel-e-un-nuovo-progetto-laravel">Installa Laravel e un nuovo progetto Laravel</h2>
<p>Ora vediamo come installare Laravel in locale su Local by Flywheel.</p>
<p>Questo passaggio richiede che Composer sia installato globalmente sul tuo sistema. Puoi trovare le istruzioni per questo passaggio <a href="https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos"><strong>qui</strong></a> . </p>
<p>Una volta installato Composer, puoi seguire le istruzioni di installazione per installare anche Laravel a livello globale. Puoi trovare la documentazione <strong><a href="https://laravel.com/docs/5.7/installation">qui</a></strong> , ma il comando di base sarà: </p>
<pre tabindex="0"><code>composer global require laravel/installer
</code></pre><p>Una volta installato Larvel a livello globale, installiamolo nella nostra App in locale su Local:</p>
<ul>
<li>Apri “Site Shell”: fai click con il tasto destro sul sito “Laravel” e clicca su “Open site shell”.</li>
<li>In Site Shell Terminal, passa alla directory “Laravel” che hai appena creato ( <code>cd ../..</code> , dobbiamo andare indietro di due livelli).</li>
<li>Elimina la cartella “app” corrente (nella finestra Finder / Explorer o tramite riga di comando)</li>
<li>Quindi esegui il seguente comando dalla nuova directory del sito:</li>
</ul>
<pre tabindex="0"><code>laravel new app
</code></pre><p>Se questo comando vi dà “<em>zsh: command not found: laravel</em>” allora provate a dare questo da terminare:</p>
<pre tabindex="0"><code>export PATH=&#34;$HOME/.composer/vendor/bin:$PATH&#34;
</code></pre><p>Questo creerà un nuovo progetto Laravel all’interno della directory “app” e includerà la cartella “public”, utilizzata da Local di default.</p>
<p>A questo punto, dovresti essere in grado di fare clic su “Visualizza sito” nell’app locale e dovrebbe mostrarti la pagina di benvenuto di Laravel, su htts: //laravel.local, per esempio. Se ricevi un errore 502, 404 o qualche altro errore, potrebbe essere necessario riavviare il server:</p>
<p><img src="images/Laravel-on-Local_lbxrd9.jpeg" alt=""></p>
<h2 id="collegamento-del-database">Collegamento del database</h2>
<p>Nel tuo <code>.env</code>file, puoi sostituire le seguenti credenziali (supponendo che tu non abbia modificato le impostazioni predefinite Local by Flywheel):</p>
<pre tabindex="0"><code>DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_SOCKET=&#34;/Users/yourusername/Library/Application Support/Local/run/lkIEkdiowIEkmd/mysql/mysqld.sock&#34;
DB_DATABASE=local
DB_USERNAME=root
DB_PASSWORD=root
</code></pre><p>Il DB_SOCKET lo trovare nella scheda “Database” di Laravel.</p>
<p>Quanto sopra si collegherà al DB locale. Se apri il tuo database utilizzando Adminer, puoi entrare ed eliminare le tabelle di wordpress, quelle che cominciano con “wp_”. </p>
<p>Infine, puoi controllare il collegamento fra Laravel e il DB con questo:</p>
<pre tabindex="0"><code>php artisan migrate
</code></pre><p>Dopo aver eseguito il comando precedente, è possibile aggiornare Adminer e visualizzare il database con seed predefinito.</p>
<p>E voilà! Questo è tutto. In poco tempo abbiamo creato un’istanza Laravel pronta a funzionare!</p>
<p>Buon codice!</p>
]]></content>
		</item>
		
		<item>
			<title>Collegare PHP e MySQL con PDO</title>
			<link>https://albertoreineri.it/blog/collegare-php-e-mysql-con-pdo/</link>
			<pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/blog/collegare-php-e-mysql-con-pdo/</guid>
			<description>Collegare un database MySQL ad un progetto PHP è quasi sempre fondamentale, vediamo come farlo utilizzando PDO.
È possibile continuare ad utilizzare MySQLi, ma PDO garantisce livelli di sicurezza maggiori.
La procedura è molto semplice, vediamo come fare:
Per prima cosa definiamo le variabili di connessione al nostro database:
$servername = &amp;#34;localhost&amp;#34;; $username=&amp;#34;root&amp;#34;; $passworddb=&amp;#34;root&amp;#34;; $dbname=&amp;#34;dbname&amp;#34;; Ora non ci resta che effettuare la connessione vera e propria, in questo modo:
try{ $db = new PDO(&amp;#34;mysql:=$servername;dbname=$dbname&amp;#34;, $username, $passworddb); $db-&amp;gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); } catch (PDOException $e){ print &amp;#34;Errore!</description>
			<content type="html"><![CDATA[<p>Collegare un database MySQL ad un progetto <a href="/argomento/php/">PHP</a> è quasi sempre fondamentale, vediamo come farlo utilizzando PDO.</p>
<p>È possibile continuare ad utilizzare MySQLi, ma <a href="https://www.html.it/pag/63991/pdo-vs-mysqli/">PDO</a> garantisce livelli di sicurezza maggiori.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/x_2koTcxdDg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>La procedura è molto semplice, vediamo come fare:</p>
<p>Per prima cosa definiamo le variabili di connessione al nostro database:</p>
<pre tabindex="0"><code>$servername = &#34;localhost&#34;;
$username=&#34;root&#34;;
$passworddb=&#34;root&#34;;
$dbname=&#34;dbname&#34;;
</code></pre><p>Ora non ci resta che effettuare la connessione vera e propria, in questo modo:</p>
<pre tabindex="0"><code>try{
    $db = new PDO(&#34;mysql:=$servername;dbname=$dbname&#34;, $username, $passworddb);
    $db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e){
    print &#34;Errore! &#34;. $e-&gt;getMessage() .&#34; &lt;br/&gt;&#34;;
    die();
}
</code></pre><p>Con questo effettueremo la connessione al nostro DB e genereremo un messaggio in caso di errore, in modo da velocizzare il debug.</p>
<p>Ora non ci resta che testare la connessione. Aprendo il file contenente questo codice dovrete vedere una pagina completamente bianca, se è così allora la connessione funziona, altrimenti dovrete vedere un messaggio di errore.</p>
<p>Per essere ancora più sicuri della connessione proviamo a inserire dei dati nel nostro db e andarli a prendere e stampare sulla pagina PHP.</p>
<p>In questo esempio ho creato una tabella “Users” con all’interno un campo “Nome”. Ora andiamo a stampare tutti i dati all’interno di questa tabella:</p>
<pre tabindex="0"><code>// Seleziono da DB
$query = $db-&gt;prepare(&#34;SELECT * FROM Users&#34;);
$query-&gt;execute();
$query-&gt;setFetchMode(PDO::FETCH_ASSOC);
while($row = $query-&gt;fetch()){
    echo $row[&#39;nome&#39;]. &#34;&lt;br&gt;;
}
</code></pre><p>E Voilà! Se vi appare l’elenco dei nomi che avete inserito nel DB allora la connessione del php con MySQL attraverso PDO è fatta, non resta che svilupparci la web app intorno!</p>
<p><em>Buon codice!</em></p>
]]></content>
		</item>
		
		<item>
			<title>Semplice sistema di routing in PHP</title>
			<link>https://albertoreineri.it/blog/semplice-sistema-di-routing-in-php/</link>
			<pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/blog/semplice-sistema-di-routing-in-php/</guid>
			<description>Usare un sistema di routing in php può portare grandi vantaggi a un progetto.
Gli URL delle pagine web di un sito sono molto importanti, sia per i motori di ricerca, sia per gli utenti, che sempre di più li usano per navigare velocemente all’interno di un sito.
Se per esempio l’url di una pagina che elenca una serie di articoli è http://www.nomesito.it/2019/05/15 l’utente, se conosce minimamente come funziona un browser ed il web, saprà già che se cancella il “15” dall’URL vedrà l’elenco degli articoli del mese, se cancella “05” vedrà l’elenco degli articoli dell’anno e così via.</description>
			<content type="html"><![CDATA[<p>Usare un sistema di routing in php può portare grandi vantaggi a un progetto.</p>
<p>Gli <strong>URL</strong> delle pagine web di un sito sono <strong>molto importanti</strong>, sia per i motori di ricerca, sia per gli utenti, che sempre di più li usano per navigare velocemente all’interno di un sito.</p>
<p><em>Se per esempio l’url di una pagina che elenca una serie di articoli è <a href="http://www.nomesito.it/2019/05/15">http://www.nomesito.it/2019/05/15</a> l’utente, se conosce minimamente come funziona un browser ed il web, saprà già che se cancella il “15” dall’URL vedrà l’elenco degli articoli del mese, se cancella “05” vedrà l’elenco degli articoli dell’anno e così via.</em></p>
<p>Questo fa parte delle convenzioni che sono venute a crearsi nel corso di questi anni, e che è bene rispettare nella creazione di un sito web.</p>
<p>Una cosa che non mi è mai piaciuta dei primi siti web che realizzavo era vedere il “.php” alla fine dell’URL. Al giorno d’oggi sa veramente di poco professionale.</p>
<p><strong>Ma è possibile creare degli URL custom e SEO friendly senza utilizzare un CMS o un framework?</strong></p>
<p>La risposta è <strong>assolutamente SI!!!</strong></p>
<p>Se sei interessato ad una semplice soluzione per “nascondere” il “.php” alla fine dell’URL leggi questo <a href="/blog/nascondere-lestensione-alla-fine-dellurl/">articolo</a>.</p>
<p>Se vuoi imparare ad utilizzare un semplice sistema di routing in PHP ecco come puoi fare.</p>
<h2 id="creare-un-sistema-di-gestione-del-routing-del-sito">CREARE UN SISTEMA DI GESTIONE DEL ROUTING DEL SITO</h2>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/lFtPh9eoPrc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Andremo a <strong>dirigere tutto il traffico alla index.php e poi eseguiremo un “routing” alla pagina che vogliamo</strong>.</p>
<h3 id="dirigere-tutto-il-traffico-alla-indexphp">Dirigere tutto il traffico alla index.php</h3>
<p>Aprite il file .htaccess (se non esiste createlo) e inserite il seguente codice:</p>
<pre tabindex="0"><code>RewriteEngine On

RewriteBase /

RewriteCond %{REQUEST_FILENAME} !-d

RewriteCond %{REQUEST_FILENAME} !-f

RewriteRule ^(.+)$ index.php [QSA,L]
</code></pre><p>In questo modo qualsiasi richiesta verrà fatta al server questo aprirà il file “index.php”</p>
<h3 id="creare-un-sistema-di-routing">Creare un sistema di routing</h3>
<p>Nel file index.php inserisci il seguente codice:</p>
<pre tabindex="0"><code>&lt;?php

$request = $_SERVER[&#39;REQUEST_URI&#39;];

switch ($request) {
    case &#39;/&#39; :
        require __DIR__ . &#39;/views/index.php&#39;;
        break;
    case &#39;&#39; :
        require __DIR__ . &#39;/views/index.php&#39;;
        break;
    case &#39;/chi-siamoi&#39; :
        require __DIR__ . &#39;/views/chi-siamo.php&#39;;
        break;
    default:
        require __DIR__ . &#39;/views/404.php&#39;;
        break;
}
</code></pre><p>In questo modo si salverà nella variabile <strong>$request</strong> la richiesta inviata al server (la parte dell’url dopo “www.nomesito.it”).</p>
<p>Dopodiché effettuando una switch si può richiamare la pagina corrispondente alla richiesta nell’URL. </p>
<p>Nei casi in cui la richiesta sia vuota oppure uno “<strong>/</strong>” allora si rimanda alla <strong>homepage</strong>, altrimenti si può rimandare alla pagina corretta.</p>
<p>Nell’esempio ho creato una cartella “<strong>views</strong>” nella root del sito nella quale saranno presenti i file delle singole pagine. In questo modo il codice sarà anche più snello e capibile.</p>
<p>Infine è già presente anche la gestione dell’errore <strong>404</strong>, senza dover inserire altro codice nell’htaccess.</p>
<h3 id="creare-le-views">Creare le views</h3>
<p>A questo punto non ci resta che creare i file per le nostre <strong>views</strong>, cioè le pagine visualizzate dall’utente.</p>
<p>Potete creare semplicemente i seguenti file con il seguente codice in ognuno di essi:</p>
<p><strong>/views/index.php</strong></p>
<pre tabindex="0"><code>&lt;h1&gt;Home Page&lt;/h1&gt;
</code></pre><p><strong>/views/chi-siamo.php</strong></p>
<pre tabindex="0"><code>&lt;h1&gt;Chi siamo&lt;/h1&gt;
</code></pre><p><strong>/views/404.php</strong></p>
<pre tabindex="0"><code>&lt;h1&gt;Errore 404&lt;/h1&gt;
</code></pre><p>E voilà! Avrete un sistema di routing in PHP semplice da gestire ma funzionale.</p>
<p>Questo sistema è alla base di <a href="https://orange.albydev.net/">Orange CMS</a>, il mio CMS realizzato in php. Ampliandolo a dovere è possibile raggiungere risultati molto soddisfacenti.</p>
<p>Spero possa esservi di aiuto.</p>
<p><em>Buon codice!</em></p>
<p>Se l’articolo ti è stato <strong>utile</strong> lasciami un commento oppure condividilo sui social, lo <strong>apprezzerei</strong> molto!</p>
]]></content>
		</item>
		
		<item>
			<title>Semplice Backend Login in Core PHP</title>
			<link>https://albertoreineri.it/blog/semplice-backend-login-in-core-php/</link>
			<pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
			
			<guid>https://albertoreineri.it/blog/semplice-backend-login-in-core-php/</guid>
			<description>Ho effettuato un nuovo commit a questo progetto, aggiornandolo a PDO, inserendo i bindparam per aumentare la sicurezza e variando leggermente l’architettura software. Il codice aggiornato è nella repository github indicata nell’articolo.
È vero, oggi esistono una miriade di CMS e framework in giro già belli che pronti, basta installarli e voilà! Il gioco è fatto!
Tutti hanno un sistema di login per poter accedere ad un’area riservata!
Però io sono sempre stato uno di quelli che non si accontentano della pappa pronta ma vogliono imparare a cucinare.</description>
			<content type="html"><![CDATA[<p><em>Ho effettuato un nuovo commit a questo progetto, aggiornandolo a PDO, inserendo i bindparam per aumentare la sicurezza e variando leggermente l’architettura software. Il codice aggiornato è nella repository github indicata nell’articolo.</em></p>
<p>È vero, oggi esistono una <strong>miriade di CMS e framework</strong> in giro già belli che pronti, basta installarli e voilà! Il gioco è fatto!</p>
<p>Tutti hanno un sistema di login per poter accedere ad un’area riservata!</p>
<p>Però io sono sempre stato uno di quelli che non si accontentano della <em>pappa pronta</em> ma vogliono <em><strong>imparare</strong> a cucinare</em>.</p>
<p>Per questo ho deciso di <strong>creare un CMS tutto mio</strong>, partendo da zero e utilizzando solamente HTML, CSS, JS e PHP.</p>
<p>Una delle prime cose che ho dovuto realizzare con il mio CMS è stato proprio un <strong>sistema di login</strong> per accedere all’area riservata.</p>
<h2 id="sistema-di-login-in-core-php">Sistema di login in core PHP</h2>
<p>Ho deciso ora di rendere <strong>open source</strong> un piccolo sistema di accesso ad un’area riservata.</p>
<p>Puoi trovare il codice sorgente di questo progettino sul <a href="https://github.com/albertoreineri">mio profilo github</a> a questo indirizzo: <a href="https://github.com/albertoreineri/Simple-login-and-registration-in-php">ht</a><a href="https://github.com/albertoreineri/Simple-login-and-registration-in-php">tps://github.com/albertoreineri/Simple-login-and-registration-in-php</a></p>
<p>Tralasciamo sistemi di routing e architettura software e <strong>facciamola semplice,</strong> parliamo solo del login nudo e crudo.</p>
<h3 id="area-riservata">Area riservata</h3>
<p>Innanzitutto ho creato una cartella “<strong>login</strong>“, dentro la quale ci saranno i file dell’area riservata.</p>
<p>Se non ho ancora effettuato l’accesso allora vedrò il <strong>form di login.</strong></p>
<p><img src="images/image.png" alt=""></p>
<p>Nella <strong>index.php</strong> nella cartella login ho quindi inserito il <strong>form</strong> per effettuale l’accesso all’area riservata, con il form che rimanda al file <strong>access.php,</strong> contenente le funzioni di controllo dei dati di accesso.</p>
<pre tabindex="0"><code>      &lt;!-- Login form --&gt;
      &lt;form class=&#34;&#34; action=&#34;access.php&#34; method=&#34;POST&#34;&gt;
        &lt;!-- Action --&gt;
        &lt;input type=&#34;hidden&#34; name=&#34;action&#34; value=&#34;login&#34;&gt;
        &lt;!-- Email or Username --&gt;
        &lt;label for=&#34;email&#34;&gt;Email or Username&lt;/label&gt;
        &lt;input autofocus name=&#34;email&#34; type=&#34;text&#34;&gt;
        &lt;!-- Password --&gt;
        &lt;label for=&#34;password&#34;&gt;Password&lt;/label&gt;
        &lt;input name=&#34;password&#34; id=&#34;password&#34; placeholder=&#34;&#34; type=&#34;password&#34;&gt;
        &lt;!-- Login Button --&gt;
        &lt;button type=&#34;submit&#34;&gt;Login&lt;/button&gt;
      &lt;/form&gt;
      &lt;!-- /Login form --&gt;
</code></pre><p><strong>Access.php</strong> si occupa sia del <strong>login</strong> che della <strong>registrazione</strong> dei nuovi utenti. È un file che continene solo PHP, esegue i controlli e poi rimanda alla pagina corretta, in base al tipo di richiesta.</p>
<p>Se ho inserito i dati corretti allora rimanda nel <strong>backend</strong>.</p>
<p>Invece se ho inserito i dati sbagliati mi rimanda al form di login con messaggio di <strong>errore</strong>.</p>
<p>Se sto <strong>creando un nuovo utente segue la prassi della registrazione</strong>, inviando un’email di conferma con un link cliccando sul quale si confermerà il proprio account.</p>
<p><img src="images/image-1.png" alt=""></p>
<p><strong>access.php</strong></p>
<pre tabindex="0"><code>&lt;?php
//Config File
include(&#34;config.php&#34;);

//Control Action
if ($_POST[&#39;action&#39;] == &#34;login&#34;) {
    /*------------------------------------------------------
                        LOGIN
    -------------------------------------------------------*/
    ///$_Post variables
    $email = $_POST[&#39;email&#39;];
    $password = $_POST[&#39;password&#39;];


    //Query
    $sql = &#34;SELECT * FROM users WHERE email = &#39;&#34; . $email . &#34;&#39; OR username =&#39;&#34; . $email . &#34;&#39;&#34;;
    $result = $conn-&gt;query($sql);
    if ($result-&gt;num_rows &gt; 0) {
        while ($row = $result-&gt;fetch_assoc()) {

            //Password control
            if (!(password_verify($password, $row[&#34;password&#34;]))) {
                header(&#34;location: error.php?error=Wrong Password&#34;);
                die();
            }

            //Start Session
            session_start();

            //Save user id in session
            $_SESSION[&#39;id&#39;] = $row[&#34;id&#34;];

            //Redirect to backend homepage
            header(&#34;location: welcome.php&#34;);
            die();
        }
    } else {
        header(&#34;location: error.php?error=Wrong Email or Username&#34;);
        die();
    }
} elseif ($_POST[&#39;action&#39;] == &#34;register&#34;) {
     /*------------------------------------------------------
                        REGISTER
    -------------------------------------------------------*/
    $email = $_POST[&#39;email&#39;];
    $username = $_POST[&#39;username&#39;];
    $password = $_POST[&#39;password&#39;];

    //Control if the user or email are already in the database
    $sql = &#34;SELECT * FROM users WHERE email = &#39;&#34; . $email . &#34;&#39; OR username = &#39;&#34; . $username . &#34;&#39;&#34;;
    $result = $conn-&gt;query($sql);
    if ($result-&gt;num_rows &gt; 0) {
        while ($row = $result-&gt;fetch_assoc()) {
            header(&#34;location: error.php?error=Email or Username already register!&#34;);
        }
    }


    //Insert new user in DB
    $password = password_hash($password, PASSWORD_DEFAULT);
    $sql = &#34;INSERT INTO users (username,email,password)
    VALUES (
    &#39;&#34; . $username . &#34;&#39;,
    &#39;&#34; . $email . &#34;&#39;,
    &#39;&#34; . $password . &#34;&#39;
    )&#34;;
    if ($conn-&gt;query($sql) === TRUE) {
        header(&#34;location: index.php&#34;);
    } else {
        header(&#34;location: error.php?error=&#34; . $conn-&gt;error);
    }
}
$conn-&gt;close();
</code></pre><h3 id="database">Database</h3>
<p>Il database è un MySQL molto semplice, con una tabella “<strong>users</strong>” contenente i dati dell’utente e la <strong>password criptata.</strong></p>
<p>Per <strong>bloccare gli utenti non loggati</strong> e consentire l’accesso solamente ai loggati è possibile utilizzare le variabili <strong>session</strong>, da includere in ogni file del backend. In questo modo l’accesso viene consentito solamente a chi è passato tramite il form di login. Questo passaggio non è presente su github ma è molto semplice da integrare, forse lo aggiungerò quando avrò tempo!</p>
<p>Spero possa essere stato <strong>utile</strong> e <strong>interessante</strong>.</p>
<p>Se vuoi <strong>utilizzare</strong> questo form o provarelo e <strong>migliorarlo</strong> segui le <strong>istruzioni</strong> nel file readme.txt presente su github.</p>
<p><em>Buon codice!</em></p>
]]></content>
		</item>
		
	</channel>
</rss>
