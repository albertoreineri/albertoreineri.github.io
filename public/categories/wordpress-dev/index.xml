<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>WordPress DEV on Alberto Reineri</title>
		<link>https://albertoreineri.it/categories/wordpress-dev/</link>
		<description>Recent content in WordPress DEV on Alberto Reineri</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>it</language>
		<lastBuildDate>Mon, 27 Jun 2022 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://albertoreineri.it/categories/wordpress-dev/index.xml" rel="self" type="application/rss+xml" />

		<item>
			<title>Usare la riga di comando con WordPress grazie a WP-CLI</title>
			<link>https://albertoreineri.it/blog/usare-la-riga-di-comando-con-wordpress-grazie-a-wp-cli/</link>
			<pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/usare-la-riga-di-comando-con-wordpress-grazie-a-wp-cli/</guid>
			<description>Se sei uno sviluppatore WordPress, probabilmente hai installato il CMS, l&amp;rsquo;hai aggiornato e hai attivato temi e plugin centinaia di volte. E sebbene queste attività di routine di sviluppo e manutenzione siano abbastanza facili da eseguire con l&amp;rsquo;interfaccia utente grafica di WordPress, eseguirle più e più volte non è molto efficiente.
La buona notizia è che puoi velocizzare facilmente ed efficacemente lo sviluppo e la manutenzione di WordPress con l&amp;rsquo;interfaccia a riga di comando di WordPress (WP-CLI) .</description>
			<content type="html"><![CDATA[<p>Se sei uno sviluppatore WordPress, probabilmente hai installato il CMS, l&rsquo;hai aggiornato e hai attivato temi e plugin centinaia di volte. E sebbene queste attività di routine di sviluppo e manutenzione siano abbastanza facili da eseguire con l&rsquo;interfaccia utente grafica di WordPress, eseguirle più e più volte non è molto efficiente.</p>
<p>La buona notizia è che puoi velocizzare facilmente ed efficacemente lo sviluppo e la manutenzione di <a href="http://wp-cli.org/">WordPress con l&rsquo;interfaccia a riga di comando di WordPress (WP-CLI)</a> . In questo post esploreremo i diversi modi in cui puoi utilizzare WP-CLI e vedremo alcuni utili comandi WP-CLI per aiutarti a iniziare con un passo nella giusta direzione.</p>
<h2 id="unintroduzione-a-wp-cli">UN&rsquo;INTRODUZIONE A WP-CLI</h2>
<p>Se sei nello sviluppo web da un po&rsquo; di tempo, probabilmente hai familiarità con l&rsquo;interfaccia da riga di comando. WP-CLI è l&rsquo;interfaccia della riga di comando di WordPress. E per quelli di voi che non si sono dilettati molto nella programmazione, WP-CLI è uno strumento che consente di gestire le installazioni di WordPress senza utilizzare un browser web.</p>
<p>WP-CLI ti consente di fare qualsiasi cosa, dall&rsquo;installazione del CMS WordPress su un sito Web nuovo di zecca all&rsquo;esecuzione di operazioni a livello di sito su un sito Web WordPress esistente. E la parte migliore è che l&rsquo;insieme di passaggi che devi seguire per completare tali attività sarà, nella maggior parte dei casi, ridotto a una singola riga di codice .</p>
<p>Ora che abbiamo visto a grandi linee cos&rsquo;è WP-CLI e come può aiutarti ad accelerare lo sviluppo del tuo prossimo progetto, diamo un&rsquo;occhiata a come puoi iniziare con questo potente strumento.</p>
<h2 id="installazione-di-wp-cli-sul-tuo-ambiente-di-hosting">INSTALLAZIONE DI WP-CLI SUL TUO AMBIENTE DI HOSTING</h2>
<p>La prima cosa che devi fare per iniziare con WP-CLI è assicurarti che il tuo ambiente di hosting soddisfi i requisiti minimi:</p>
<ul>
<li>
<p>Ambiente UNIX.</p>
</li>
<li>
<p>PHP 5.3.29 (o successivo).</p>
</li>
<li>
<p>WordPress 3.7 (o successivo).</p>
</li>
<li>
<p>Secure Shell (SSH) abilitato sul tuo server web.</p>
</li>
</ul>
<p>Dopo aver verificato quegli elementi essenziali, vai avanti e scarica il file <em>wp-cli.phar</em> usando il seguente comando:</p>
<pre tabindex="0"><code>$ curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
</code></pre><p>E voilà! WP-CLI dovrebbe ora essere installato nel tuo ambiente di hosting. Se desideri assicurarti che funzioni correttamente, esegui semplicemente il seguente comando:</p>
<pre tabindex="0"><code>$ php wp-cli.phar -info
</code></pre><p>Se tutto va bene, dovresti vedere qualcosa di simile sulla riga di comando che specifica quale versione di WP-CLI è in esecuzione nel tuo ambiente di hosting:</p>
<pre tabindex="0"><code>PHP binary: /usr/bin/php5
PHP version: 5.5.9-1ubuntu4.14
php.ini used: /etc/php5/cli/php.ini
WP-CLI root dir: /home/wp-cli/.wp-cli
WP-CLI packages dir: /home/wp-cli/.wp-cli/packages/
WP-CLI global config: /home/wp-cli/.wp-cli/config.yml
WP-CLI project config:
WP-CLI version: 1.3.0
</code></pre><p>Tuttavia, se scopri che WP-CLI non è stato installato correttamente sul tuo sistema, ti consiglio di controllare alcuni metodi di <a href="https://make.wordpress.org/cli/handbook/installing/#alternative-installation-methods">installazione alternativi</a> per ulteriori informazioni su come configurarlo.</p>
<p>Infine, creeremo un file eseguibile per WP-CLI e lo sposteremo nella sua directory in modo da poterlo eseguire da qualsiasi luogo:</p>
<pre tabindex="0"><code>$ chmod +x wp-cli.phar
$ sudo mv wp-cli.phar /usr/local/bin/wp
</code></pre><p>Per semplicità, abbiamo chiamato la directory <em>wp</em> . Ora, ogni volta che devi usare WP-CLI, tutto ciò che devi fare è eseguire il comando <em>wp</em> dalla riga di comando.</p>
<h2 id="sviluppo-wordpress-e-manutenzione-del-sito-con-wp-cli">SVILUPPO WORDPRESS E MANUTENZIONE DEL SITO CON WP-CLI</h2>
<p>Ora che WP-CLI è installato e pronto per l&rsquo;uso, esaminiamo alcune delle cose più utili che puoi fare per accelerare le attività di routine di sviluppo e manutenzione di WordPress.</p>
<h3 id="installazione-di-wordpress">INSTALLAZIONE DI WORDPRESS</h3>
<p>Entra nella directory in cui desideri installare il CMS WordPress ed esegui la seguente riga di codice:</p>
<pre tabindex="0"><code>$ wp core download
</code></pre><p>Dovrai creare un file <em>wp-config.php</em> per proseguire con la tua installazione. Ecco come puoi farlo:</p>
<pre tabindex="0"><code>$ wp core config --dbname=databasename --dbuser=databaseuser --dbpass=databasepassword --dbhost=localhost --dbprefix=prfx_
</code></pre><p><em>(Ho utilizzato del testo di esempio per il nome del database e le credenziali dell&rsquo;utente del database. Assicurati di sostituirli con le informazioni del tuo database prima di eseguire il codice.)</em></p>
<p>Infine, puoi iniziare l&rsquo;installazione vera e propria eseguendo il comando di <em>installazione principale</em> indicato di seguito. Ricorda di sostituire i parametri di esempio con le informazioni del tuo sito prima di eseguire il codice.</p>
<pre tabindex="0"><code>$ wp core install –-url=yoursite.com -–title=&#34;Your WordPress Site&#39;s Title&#34; –-admin_user=admin_username –-admin_password=admin_password –-admin_email=admin@yoursite.com
</code></pre><h3 id="aggiornamento-di-wordpress">AGGIORNAMENTO DI WORDPRESS</h3>
<p>Prima o poi verrà lanciata una nuova versione di WordPress e dovrai aggiornare la tua installazione all&rsquo;ultima versione. Se non sei sicuro di quale versione di WordPress è attualmente in esecuzione sul tuo sito, esegui semplicemente il seguente comando:</p>
<pre tabindex="0"><code>$ wp core version
</code></pre><p>Se ritieni che il tuo sito abbia effettivamente bisogno di essere aggiornato, è meglio eseguire un backup completo del suo database prima di procedere. Ecco come puoi farlo con WP-CLI:</p>
<pre tabindex="0"><code>$ wp db export my-db-backup.sql
</code></pre><p>L&rsquo;esecuzione di questo comando creerà un backup completo del database del tuo sito e lo salverà nella directory principale in un file chiamato <em>my-db-backup.sql</em> .</p>
<p>Infine, puoi aggiornare i file core del tuo sito e il relativo database eseguendo le seguenti righe di codice:</p>
<pre tabindex="0"><code>$ wp core update
$ wp core update –db
</code></pre><p>Per quelli di voi che gestiscono più siti o reti multisito, eseguire il seguente script per aggiornare tutti i siti in una volta sola:</p>
<pre tabindex="0"><code>$ declare -a sites_to_update=(&#39;/var/www/wordpress_site_1&#39; &#39;/var/www/wordpress_site_2&#39; &#39;/var/www/wordpress_site_n&#39;)
for site in &#34;${sites_to_update[@]}&#34;;
do
wp --path=$site core update
done
</code></pre><p><em>(Ricordati di sostituire il testo di esempio con i nomi delle directory principali dei tuoi siti Web WordPress.)</em></p>
<h3 id="gestione-di-temi-e-plugin">GESTIONE DI TEMI E PLUGIN</h3>
<p>Una delle cose migliori di WP-CLI è che collega il tuo server web alle directory ufficiali di WordPress <a href="https://wordpress.org/themes/">Theme</a> e <a href="https://wordpress.org/plugins/">Plugin</a>. Ciò significa che puoi gestire le installazioni di temi e plug-in utilizzando solo la riga di comando.</p>
<p><strong>Comandi del tema WordPress:</strong></p>
<ul>
<li>
<p><strong>Per installare un tema:</strong> <strong>wp theme install theme_name</strong></p>
</li>
<li>
<p><strong>Per attivare un tema installato:</strong> <strong>wp theme activate theme_name</strong></p>
</li>
<li>
<p><strong>Per aggiornare un tema installato:</strong> <strong>wp theme update theme_name</strong></p>
</li>
<li>
<p><strong>Per aggiornare tutti i temi installati:</strong> <strong>wp theme update –all</strong></p>
</li>
</ul>
<p><strong>Comandi del plugin di WordPress:</strong></p>
<ul>
<li>
<p><strong>Per installare un plugin:</strong> <strong>wp plugin install plugin_name</strong></p>
</li>
<li>
<p><strong>Per attivare un plugin installato:</strong> <strong>wp plugin activate plugin_name</strong></p>
</li>
<li>
<p><strong>Per aggiornare un plugin installato:</strong> <strong>wp plugin update plugin_name</strong></p>
</li>
<li>
<p><strong>Per aggiornare tutti i plugin installati:</strong> <strong>wp plugin update –all</strong></p>
</li>
</ul>
<p><em>(Ricordati di sostituire il testo di esempio con il nome del tema o del plugin con cui desideri interagire.)</em></p>
<h3 id="creazione-di-custom-post-personalizzati">CREAZIONE DI CUSTOM POST PERSONALIZZATI</h3>
<p>WP-CLI elimina il lavoro pesante dalla creazione di custom post type in WordPress e lo riduce a una semplice riga di codice. Invece di scaricare un plug-in per aiutarti a portare a termine il lavoro, perché non provare la seguente riga di codice:</p>
<pre tabindex="0"><code>$ wp scaffold post-type cpt_slug --label=CPT_Label --theme=theme_name
</code></pre><p>Tutto quello che devi fare è sostituire il testo di esempio con lo slug, l&rsquo;etichetta e il nome del tema del tuo custom post type e voilà!</p>
<h3 id="creazione-di-temi-child">CREAZIONE DI TEMI CHILD</h3>
<p>Se ti è già capitato di creare un tema child, avrai dovuto accedere al pannello di controllo e creareti cartella e file relativi dentro al sito. WP-CLI ti consente di creare un tema child con una singola riga di codice:</p>
<pre tabindex="0"><code>$ wp scaffold child-theme name-of-child-theme --parent_theme=name_of_parent_theme --theme_name=&#39;My Child Theme&#39; --author=&#39;Your Name&#39; --author_uri=http://www.yoursite.com --theme_uri=http://www.themesite.com --activate
</code></pre><p><em>(Come sempre, ricorda di sostituire il testo di esempio con il tema child e le informazioni sul tema genitore.)</em></p>
<h2 id="conclusione">CONCLUSIONE</h2>
<p>Con WP-CLI puoi ottenere di più facendo di meno. Se desideri aumentare la tua produttività accelerando le operazioni di routine di sviluppo e manutenzione di WordPress, allora vale sicuramente la pena provare WP-CLI.</p>
<p>Ti ho mostrato come installare lo strumento nel tuo ambiente di hosting e abbiamo visto alcuni scenari in cui WP-CLI batte la GUI di WordPress in termini di efficienza. Ora non ti resta che provarlo!</p>
<p>Ah, sembra scontato, ma NON FARE MAI TEST IN AMBIENTE DI PRODUZIONE, usa lo STAGING o falli in LOCALE.</p>
<p>Buon codice!</p>
]]></content>
		</item>

		<item>
			<title>Come creare un widget WordPress personalizzato</title>
			<link>https://albertoreineri.it/blog/come-creare-un-widget-wordpress-personalizzato/</link>
			<pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/come-creare-un-widget-wordpress-personalizzato/</guid>
			<description>Vuoi creare i tuoi widget personalizzati in WordPress? I widget ti consentono di aggiungere elementi non contenuti in una sidebar o in qualsiasi area predisposta per i widget del tuo sito web.
Puoi utilizzare i widget per aggiungere banner, pubblicità, moduli di iscrizione alla newsletter e altri elementi sul tuo sito web.
In questo articolo, ti mostreremo come creare un widget WordPress personalizzato, passo dopo passo.
CHE COS’È UN WIDGET WORDPRESS?</description>
			<content type="html"><![CDATA[<p>Vuoi <strong>creare i tuoi widget</strong> personalizzati in WordPress? I widget ti consentono di aggiungere elementi non contenuti in una sidebar o in qualsiasi area predisposta per i widget del tuo sito web.</p>
<p>Puoi utilizzare i widget per <strong>aggiungere banner, pubblicità, moduli di iscrizione alla newsletter e altri elementi</strong> sul tuo sito web.</p>
<p>In questo articolo, ti mostreremo come creare un widget WordPress personalizzato, passo dopo passo.</p>
<h2 id="che-cosè-un-widget-wordpress">CHE COS’È UN WIDGET WORDPRESS?</h2>
<p>I widget di WordPress contengono <strong>parti di codice che puoi aggiungere alle sidebar del tuo sito Web o alle aree predisposte per accogliere i widget.</strong></p>
<p>Pensali come moduli che puoi usare per aggiungere diversi elementi usando una semplice <strong>interfaccia drag and drop.</strong></p>
<p>Per impostazione predefinita, <strong>WordPress viene fornito con un set standard di widget</strong> che è possibile utilizzare con qualsiasi tema WordPress. Consulta la nostra guida per principianti su <a href="http://specialistawp.local/widget-in-wordpress-come-utilizzarli/">come utilizzare i widget in WordPress</a> .</p>
<p><img src="images/image-1-2-1-1024x484.png" alt=""></p>
<p>WordPress consente inoltre agli sviluppatori di <strong>creare i propri widget personalizzati.</strong></p>
<p>Molti temi e plugin premium di WordPress sono dotati di widget personalizzati che puoi aggiungere alle sidebar.</p>
<p>Ad esempio, puoi aggiungere un modulo di contatto , un modulo di accesso personalizzato o una galleria fotografica a una sidebar senza scrivere alcun codice.</p>
<p>Detto questo, vediamo come creare facilmente i tuoi widget personalizzati in WordPress.</p>
<h2 id="creazione-di-un-widget-personalizzato-in-wordpress">CREAZIONE DI UN WIDGET PERSONALIZZATO IN WORDPRESS</h2>
<p>Se stai imparando a sviluppare in WordPress, avrai bisogno di un <strong>ambiente di sviluppo locale</strong>. Puoi <a href="http://specialistawp.local/installare-wordpress-in-locale/">installare WordPress</a> sul tuo computer (Mac o Windows).</p>
<p>Esistono <strong>diversi modi</strong> per aggiungere il codice del widget personalizzato in WordPress.</p>
<p>Puoi creare un <strong>plug-in</strong> specifico per il sito e incollare qui il codice del tuo widget.</p>
<p>Puoi anche incollare il codice nel <strong>file Functions.php</strong> del tuo tema . Tuttavia, sarà disponibile solo quando quel particolare tema è attivo.</p>
<p>In questo tutorial, creeremo un semplice widget che saluta i visitatori. L’obiettivo è familiarizzare con la classe del widget WordPress.</p>
<p><em><strong>Iniziamo</strong></em>.</p>
<h2 id="creazione-di-un-widget-wordpress-di-base">CREAZIONE DI UN WIDGET WORDPRESS DI BASE</h2>
<p>WordPress viene fornito con una classe Widget WordPress integrata. <strong>Ogni nuovo widget WordPress estende la classe del widget WordPress.</strong></p>
<p>Esistono <strong>18 metodi</strong> menzionati nel manuale dello sviluppatore di WordPress che possono essere utilizzati con la <a href="http://developer.wordpress.org/reference/classes/wp_widget/">classe Widget WP</a> .</p>
<p>Tuttavia, per il bene di questo tutorial, <strong>ci concentreremo sui seguenti metodi.</strong></p>
<ul>
<li>__construct (): questa è la parte in cui creiamo l’ID del widget, il titolo e la descrizione.</li>
<li>widget: Qui è dove definiamo l’output generato dal widget.</li>
<li>modulo: questa parte del codice è dove creiamo il modulo con le opzioni del widget per il backend.</li>
<li>aggiornamento: questa è la parte in cui salviamo le opzioni del widget nel database.</li>
</ul>
<p>Studiamo il seguente codice in cui abbiamo usato questi quattro metodi all’interno della classe <strong>WP_Widget</strong>.</p>
<pre tabindex="0"><code>// Creo il widget
class swp_widget extends WP_Widget {

// Construct
function __construct() {

}

// Widget front-end
public function widget( $args, $instance ) {

}

// Widget Backend
public function form( $instance ) {

}

// Updating widget replacing old instances with new
public function update( $new_instance, $old_instance ) {

}

// Fine Classe swp_widget ends here
}
</code></pre><p>Il pezzo finale del codice è dove registreremo effettivamente il widget e lo cariceremo all’interno di WordPress.</p>
<pre tabindex="0"><code>// Registrazione e caricamento widget
function swp_load_widget()
{
	register_widget(&#39;swp_widget&#39;);
}
add_action(&#39;widgets_init&#39;, &#39;swp_load_widget&#39;);
</code></pre><p>Ora mettiamo tutto insieme per <strong>creare un widget WordPress di base.</strong></p>
<p>Puoi <strong>copiare e incollare il seguente codice</strong> nel tuo plugin personalizzato o nel file Functions.php del tema.</p>
<pre tabindex="0"><code>// Creo il widget
class swp_widget extends WP_Widget
{

	function __construct()
	{
		parent::__construct(

			// Base ID del widget
			&#39;swp_widget&#39;,

			// Nome del Widget
			__(&#39;Specialista WP Widget&#39;, &#39;swp_widget_domain&#39;),

			// Descrizione Widget
			array(&#39;description&#39; =&gt; __(&#39;Widget di esempio di Specialista WP!&#39;, &#39;swp_widget_domain&#39;),)
		);
	}

	// Widget front-end

	public function widget($args, $instance)
	{
		$title = apply_filters(&#39;widget_title&#39;, $instance[&#39;title&#39;]);

		// Gli argomenti before and after widget sono definiti dal tema
		echo $args[&#39;before_widget&#39;];
		if (!empty($title))
			echo $args[&#39;before_title&#39;] . $title . $args[&#39;after_title&#39;];

		// Qua è dove vediamo l&#39;output
		echo __(&#39;Ciao mondo!&#39;, &#39;swp_widget_domain&#39;);
		echo $args[&#39;after_widget&#39;];
	}

	// Widget Backend
	public function form($instance)
	{
		if (isset($instance[&#39;title&#39;])) {
			$title = $instance[&#39;title&#39;];
		} else {
			$title = __(&#39;Titolo&#39;, &#39;swp_widget_domain&#39;);
		}
		// Widget admin form
	?&gt;
		&lt;p&gt;
			&lt;label for=&#34;&lt;?php echo $this-&gt;get_field_id(&#39;title&#39;); ?&gt;&#34;&gt;&lt;?php _e(&#39;Title:&#39;); ?&gt;&lt;/label&gt;
			&lt;input class=&#34;widefat&#34; id=&#34;&lt;?php echo $this-&gt;get_field_id(&#39;title&#39;); ?&gt;&#34; name=&#34;&lt;?php echo $this-&gt;get_field_name(&#39;title&#39;); ?&gt;&#34; type=&#34;text&#34; value=&#34;&lt;?php echo esc_attr($title); ?&gt;&#34; /&gt;
		&lt;/p&gt;
&lt;?php
	}

	// Aggiorniamo il widget sostituendo le vecchie istanze con le nuove
	public function update($new_instance, $old_instance)
	{
		$instance = array();
		$instance[&#39;title&#39;] = (!empty($new_instance[&#39;title&#39;])) ? strip_tags($new_instance[&#39;title&#39;]) : &#39;&#39;;
		return $instance;
	}

	// Fine classe swp_widget
}


// Registrazione e caricamento widget
function swp_load_widget()
{
	register_widget(&#39;swp_widget&#39;);
}
add_action(&#39;widgets_init&#39;, &#39;swp_load_widget&#39;);
</code></pre><p>Dopo aver aggiunto il codice, devi andare alla pagina <strong>Aspetto »Widget</strong> . Noterai il nuovo widget SpecialistaWP nell’elenco dei widget disponibili. Devi trascinare questo widget su una barra laterale.</p>
<p><img src="images/image-2-1-1-1024x678.png" alt=""></p>
<p>Questo widget ha solo un campo modulo da compilare, puoi <strong>aggiungere il tuo testo e fare clic sul pulsante Salva</strong> per memorizzare le modifiche.</p>
<p>Ora puoi <strong>visitare il tuo sito Web per vederlo in azione.</strong></p>
<p><img src="images/image-3-1-2-1024x626.png" alt=""></p>
<p>Ora <strong>studiamo di nuovo il codice.</strong></p>
<p>Innanzitutto <strong>abbiamo registrato “swp_widget” e caricato il nostro widget personalizzato</strong>. Successivamente abbiamo definito cosa fa quel widget e come visualizzare il back-end del widget.</p>
<p>Infine, abbiamo definito come <strong>gestire le modifiche apportate al widget</strong>.</p>
<p>Ora ci sono alcune cose che potresti voler chiedere. Ad esempio, qual è lo scopo <code>swp_text_domain</code>?</p>
<p>WordPress utilizza gettext per gestire la traduzione e la localizzazione. Questo <code>swp_text_domain</code> e dice a gettext di rendere disponibile una stringa per la traduzione.</p>
<p>Se stai creando un widget personalizzato per il tuo tema, puoi sostituirlo <code>swp_text_domain</code> con il <strong>text_domain del tuo tema.</strong></p>
<p>Speriamo che questo articolo ti abbia <strong>aiutato a imparare come creare facilmente un widget WordPress personalizzato</strong>. </p>
<p>Buono sviluppo!</p>
]]></content>
		</item>

		<item>
			<title>Functions.php – Cos’è e come modificarlo</title>
			<link>https://albertoreineri.it/blog/functions.php-cos%C3%A8-e-come-modificarlo/</link>
			<pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/functions.php-cos%C3%A8-e-come-modificarlo/</guid>
			<description>In WordPress, Functions.php è uno dei file più importanti presenti all’interno di un tema.
Racchiude tutte le funzioni necessarie al funzionamento del tema. Funziona come un plugin per il tuo sito WordPress che viene attivato automaticamente con il tuo tema attuale. Il file functions.php utilizza il codice PHP per aggiungere funzionalità o modificare funzionalità predefinite su un sito WordPress.
Ad esempio, un tema WordPress potrebbe aggiungere un po’ di codice al file functions.</description>
			<content type="html"><![CDATA[<p>In WordPress, <strong>Functions.php</strong> è uno dei file più <strong>importanti</strong> presenti all’interno di un tema.</p>
<p>Racchiude <strong>tutte le funzioni necessarie al funzionamento del tema</strong>. Funziona come un <strong>plugin per il tuo sito WordPress</strong> che viene attivato automaticamente con il tuo tema attuale. Il file functions.php utilizza il codice <a href="/categoria_guide/php">PHP</a> per <strong>aggiungere funzionalità</strong> o modificare funzionalità predefinite su un sito WordPress.</p>
<p>Ad esempio, un tema WordPress potrebbe aggiungere un po’ di codice al file functions.php del tema per <strong>aggiungere una nuova area widget</strong> al piè di pagina o aggiungere un messaggio di benvenuto personalizzato alla dashboard di WordPress. Le possibilità sono infinite!</p>
<p>Il file Functions.php <strong>si carica automaticamente</strong> quando installi e attivi un tema sul tuo sito WordPress.</p>
<p>La modifica del file Functions.php utilizzando codici personalizzati ti consente di <strong>aggiungere custom post type, tassonomie , shortcodes</strong> e altro per migliorare il tuo sito web.</p>
<h2 id="dove-si-trova-il-file-functions">Dove si trova il file Functions?</h2>
<p>Il percorso del file Functions.php si trova <strong>nella cartella del tema.</strong></p>
<p>Se vuoi aggiungere uno <strong>snippet</strong> di codice al tuo sito WordPress, puoi aggiungerlo al file Functions.php.</p>
<p>Ma di solito non è il modo migliore per farlo. WordPress cerca di separare design e funzionalità quando possibile. Questo è il motivo per cui abbiamo <strong>temi</strong> che determinano il <strong>design</strong> e <strong>plugin</strong>, che determinano le <strong>funzioni</strong>.</p>
<p>È meglio poter <strong>cambiare il tema di WordPress senza cambiare il modo in cui funziona</strong> il tuo sito o cambiare i tuoi plugin senza influire sulla progettazione del tuo sito.</p>
<p>Esistono molti tutorial di WordPress che ti diranno di aggiungere frammenti di codice al file Functions.php del tuo tema, ma <strong>non sempre è la cosa migliore da fare</strong>. Occorre analizzare bene il caso.</p>
<p>Se decidi di modificare il tuo file Functions.php, usa la massima <strong>cautela</strong>. Ecco 3 motivi per cui modificare il tuo file Functions.php non è una buona idea:</p>
<ul>
<li>Le modifiche al file delle funzioni andranno perse quando il tema viene aggiornato.</li>
<li>Le modifiche andranno perse se cambi il tema di WordPress.</li>
<li>Fare errori di codifica nel file delle funzioni può bloccare fuori dal tuo sito.</li>
</ul>
<p>Anche qualcosa di semplice come un punto e virgola mancante potrebbe far scomparire tutto il tuo sito… </p>
<p>Perché i plugin specifici del sito sono migliori (alternativa a Functions.php)</p>
<p>Quindi, se non vuoi modificare Functions.php, dove dovresti aggiungere le nuove funzioni del tuo sito?</p>
<p>La risposta è creare il tuo <a href="/blog/creare-un-plugin-wordpress/">plugin WordPress</a> .</p>
<p>Questo sarà un <strong>plugin specifico per il tuo sito</strong>, perché è specifico per il tuo sito e non verrà mai condiviso nella directory dei plug-in di WordPress.</p>
<p>L’uso di un plug-in specifico per il sito è la <strong>soluzione migliore</strong> perché i frammenti di codice vengono archiviati separatamente dal file Functions.php del tuo tema. Ciò significa che possono essere attivati â€‹â€‹o disattivati, proprio come qualsiasi altro plugin. Questo garantisce che <strong>il tuo codice non scomparirà se cambi tema.</strong></p>
<p>Speriamo che questo articolo ti abbia aiutato a conoscere tutto sul file Functions.php in WordPress e su come aggiungere frammenti di codice al tuo sito!</p>
]]></content>
		</item>

		<item>
			<title>Come abilitare gli aggiornamenti automatici in WordPress per le Major Release</title>
			<link>https://albertoreineri.it/blog/come-abilitare-gli-aggiornamenti-automatici-in-wordpress-per-le-major-release/</link>
			<pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/come-abilitare-gli-aggiornamenti-automatici-in-wordpress-per-le-major-release/</guid>
			<description>Sapevi che WordPress include aggiornamenti automatici abilitati per le versioni minori? Ciò significa che il team di WordPress.org può installare automaticamente gli aggiornamenti di sicurezza senza richiedere nulla dell’utente.
Tuttavia, non aggiorna automaticamente il tuo sito Web quando è disponibile una nuova versione del sistema. A meno che tu non faccia parte di un servizio di hosting WordPress gestito , dovrai avviare manualmente l’aggiornamento da solo.
In questo articolo, ti mostreremo come abilitare facilmente gli aggiornamenti automatici anche per le major release.</description>
			<content type="html"><![CDATA[<p>Sapevi che WordPress include <strong>aggiornamenti automatici</strong> abilitati per le versioni minori? Ciò significa che il team di WordPress.org può <strong>installare automaticamente gli aggiornamenti di sicurezza</strong> senza richiedere nulla dell’utente.</p>
<p>Tuttavia, <strong>non aggiorna automaticamente il tuo sito Web quando è disponibile una nuova versione del sistema</strong>. A meno che tu non faccia parte di un servizio di hosting WordPress gestito , dovrai avviare manualmente l’aggiornamento da solo.</p>
<p>In questo articolo, ti mostreremo come a<strong>bilitare facilmente gli aggiornamenti automatici anche per le major release.</strong></p>
<h2 id="come-funzionano-gli-aggiornamenti-automatici-di-wordpress">Come funzionano gli aggiornamenti automatici di WordPress</h2>
<p>WordPress ha introdotto la funzione di aggiornamento automatico in WordPress 3.7 (24 ottobre 2013). Ciò ha permesso a WordPress di installare automaticamente le nuove versioni minori per migliorare la sicurezza del tuo sito web.</p>
<p>C’è un’opzione per disabilitare gli aggiornamenti automatici in WordPress. Tuttavia, ti consigliamo di <strong>mantenere abilitati gli aggiornamenti automatici</strong> perché in genere risolvono importanti problemi di sicurezza e vulnerabilità.</p>
<p>I provider di hosting WordPress gestiti aggiornano automaticamente WordPress per tutte le nuove versioni, non solo per quelle minori.</p>
<p>Ora, se gestisci solo uno o due siti Web WordPress, puoi aggiornarli manualmente senza grossi problemi.</p>
<p>D’altra parte, <strong>se gestisci più siti WordPress</strong>, l’aggiornamento di tutti questi può richiedere molto tempo.</p>
<p>Diamo un’occhiata a come impostare facilmente gli aggiornamenti automatici per le principali versioni di WordPress.</p>
<h2 id="preparazione-agli-aggiornamenti-automatici-in-wordpress">Preparazione agli aggiornamenti automatici in WordPress</h2>
<p>Il livello più importante di sicurezza che è possibile aggiungere a qualsiasi sito Web è la configurazione di un sistema di <strong>backup</strong>. Che tu attivi gli aggiornamenti automatici o meno, dovresti sempre avere un sistema di backup automatico in atto per ogni sito Web WordPress.</p>
<p>Esistono diversi plug-in di backup WordPress utili che puoi utilizzare per impostare backup automatici sul tuo sito WordPress.</p>
<p>Ti consigliamo di utilizzare il plug-in <a href="https://it.wordpress.org/plugins/updraftplus/">UpdraftPlus</a> perché è il plug-in di WordPress più popolare sul mercato ed è gratuito. <strong>UpdraftPlus</strong> consente di impostare facilmente backup automatici dell’intero sito Web WordPress.</p>
<p>Inoltre, consente di archiviare automaticamente i file di backup in una posizione remota come <strong>Google Drive</strong>, Dropbox, ecc.</p>
<p>Dopo aver impostato i backup automatici di WordPress, puoi andare avanti e attivare l’aggiornamento automatico di WordPress per le versioni principali.</p>
<h2 id="metodo-1-abilita-gli-aggiornamenti-automatici-di-wordpress-per-le-versioni-principali-utilizzando-un-plug-in">Metodo 1. Abilita gli aggiornamenti automatici di WordPress per le versioni principali utilizzando un plug-in</h2>
<p>Questo metodo è più <strong>semplice</strong> e consigliato a tutti gli utenti.</p>
<p>Innanzitutto, è necessario installare e attivare il plug-in <a href="https://wordpress.org/plugins/stops-core-theme-and-plugin-updates/">Easy Updates Manager</a> . </p>
<p>Al momento dell’attivazione, è necessario visitare <strong>Dashboard »</strong> <strong>Update Options</strong> per configurare il plug-in.</p>
<p><img src="images/image-27-1-1024x200.png" alt=""></p>
<p>Nella sezione “<strong>WordPress core updates</strong>“, fai clic sull’opzione “<strong>Auto update all releases</strong>“.</p>
<p>Il plugin memorizzerà automaticamente le tue impostazioni e consentirà <strong>l’aggiornamento automatico delle principali versioni di WordPress.</strong></p>
<p>Questo plugin consente anche di <strong>impostare altri aggiornamenti automatici</strong> o disabilitarli. </p>
<h2 id="metodo-2-abilita-manualmente-laggiornamento">Metodo 2. Abilita manualmente l’aggiornamento</h2>
<p>Questo metodo richiede di <strong>aggiungere codice</strong> ai tuoi file WordPress.</p>
<p>Innanzitutto, devi aggiungere la seguente riga di codice al file <em>wp-config.php</em> del tuo sito .</p>
<pre tabindex="0"><code>define( &#39;WP_AUTO_UPDATE_CORE&#39;, true );
</code></pre><p>C’è un piccolo problema con questo codice: consente aggiornamenti <strong>notturni</strong>.</p>
<p>Per <strong>disabilitare build notturni</strong> e aggiornamenti di sviluppo, è necessario aggiungere il seguente codice nel file <em>functions.php</em></p>
<pre tabindex="0"><code>add_filter( &#39;allow_dev_auto_core_updates&#39;, &#39;__return_false&#39; );
</code></pre><p>Questo filtro disabiliterà gli aggiornamenti automatici per build notturne o aggiornamenti di sviluppo.</p>
<p>Il tuo sito WordPress è ora pronto per aggiornarsi automaticamente, senza il tuo input, ogni volta che è disponibile una nuova versione di WordPress.</p>
<h2 id="domande-frequenti-sugli-aggiornamenti-automatici-di-wordpress">Domande frequenti sugli aggiornamenti automatici di WordPress</h2>
<h3 id="1-perché-devo-installare-gli-aggiornamenti-di-wordpress"><strong>1. Perché devo installare gli aggiornamenti di WordPress?</strong></h3>
<p><strong>WordPress è un software regolarmente gestito</strong>. Migliaia di sviluppatori contribuiscono a rendere WordPress migliore e sicuro.</p>
<p>Devi installare gli aggiornamenti di WordPress non appena sono disponibili. Ciò <strong>garantisce che il tuo sito Web disponga delle ultime patch di sicurezza</strong>, nuove funzionalità per velocità e prestazioni ottimali.</p>
<h3 id="2-gli-aggiornamenti-sono-sicuri-per-il-mio-sito-web"><strong>2. Gli aggiornamenti sono sicuri per il mio sito Web?</strong></h3>
<p>Gli aggiornamenti di WordPress diventano immediatamente disponibili per milioni di siti Web. <strong>Il team principale lavora molto duramente per garantire che siano assolutamente sicuri</strong> per l’installazione di tutti i siti Web.</p>
<p>Tuttavia, consigliamo a tutti di <strong>eseguire sempre il backup del sito Web WordPress prima degli aggiornamenti</strong>. Ciò consente di tornare rapidamente indietro nel caso in cui qualcosa vada storto dopo un aggiornamento.</p>
<h3 id="3-posso-anche-aggiornare-automaticamente-i-plugin-di-wordpress"><strong>3. Posso anche aggiornare automaticamente i plugin di WordPress?</strong></h3>
<p>Per impostazione predefinita, WordPress richiede l’installazione manuale degli aggiornamenti dei plug-in. Tuttavia, <strong>puoi abilitare gli aggiornamenti automatici anche per i plugin</strong>. </p>
<p>Speriamo che questo articolo ti abbia aiutato a imparare come <strong>abilitare gli aggiornamenti automatici in WordPress</strong> per le</p>
]]></content>
		</item>

		<item>
			<title>1. Creare un tema WordPress da zero – Parte 1</title>
			<link>https://albertoreineri.it/blog/creare-un-tema-wordpress-da-zero-parte-1/</link>
			<pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/creare-un-tema-wordpress-da-zero-parte-1/</guid>
			<description>WordPress è una piattaforma fantastica! Permette di creare siti web di ogni tipo in maniera semplice e veloce, grazie all’infinita quantità di temi e plugin disponibili, moltissimi dei quali in maniera gratuita.
Però quando si vuole fare il salto di livello ed avere un sito web veramente performante, allora conviene utilizzare un tema sviluppato da zero, in grado di implementare tutte le funzioni necessarie nella maniera più performante!
Niente errori in console, niente stringhe in inglese, niente codici sparsi in giro per il sito, niente css e js inutili… Solo ciò che serve realmente, sviluppato nel modo corretto.</description>
			<content type="html"><![CDATA[<p><strong>WordPress</strong> è una piattaforma <strong>fantastica</strong>! Permette di creare <strong>siti web di ogni tipo</strong> in maniera semplice e <strong>veloce</strong>, grazie all’infinita quantità di <strong>temi</strong> e <strong>plugin</strong> disponibili, moltissimi dei quali in maniera gratuita.</p>
<p>Però <strong>quando si vuole fare il salto di livello</strong> ed avere un sito web veramente <strong>performante</strong>, allora conviene utilizzare un <strong>tema sviluppato da zero</strong>, in grado di implementare tutte le funzioni necessarie nella maniera più performante!</p>
<p><strong>Niente errori</strong> in console, niente stringhe in inglese, niente codici sparsi in giro per il sito, niente css e js inutili… Solo ciò che serve realmente, sviluppato nel modo corretto.</p>
<p><strong>Oggi vediamo come creare un tema WordPress da zero!</strong></p>
<p>Mettiti comodo e <strong>prenditi il tuo tempo</strong>, ci vorrà un po’, ma alla fine avrai realizzato <strong>il tuo primo tema WordPress</strong> funzionante e nel rispetto di tutte le best practice.</p>
<p><em><strong>Partiremo da un’installazione di WordPress, se non sai come installare il CMS ti consiglio di seguire le guide per <a href=".local/inizia-qui/inizia-qui-principiante/">Inizia Qui</a>.</strong></em></p>
<p><em>Questo tutorial è suddiviso in 3 parti, alla fine potrai scaricare l’intero tema che creeremo insieme per confrontarlo e correggere eventuali errori. Ti consiglio di seguire le varie parti e scaricare il tema solo alla fine, ma se ti servisse prima lo puoi trovare sul fondo della <a href="/blog/creare-un-tema-wordpress-da-zero-parte-3/">parte 3</a>.</em></p>
<h2 id="creiamo-il-nostro-tema">CREIAMO IL NOSTRO TEMA</h2>
<p>Se apri la cartella del tuo sito <strong>WordPress</strong> noterai che all’interno sono presenti <strong>3 cartelle</strong>:</p>
<ul>
<li>wp-admin</li>
<li>wp-content</li>
<li>wp-includes</li>
</ul>
<p>A noi per il momento interessa solamente la “<strong>wp-content</strong>“, quindi iniziamo ad <strong>aprirla</strong>.</p>
<p>All’interno di wp-content apriamo ora la cartella “<strong>themes</strong>“, che come puoi intuire contiene <strong>i temi del progetto.</strong></p>
<p><strong>Procediamo quindi a creare il nostro primo tema!</strong></p>
<p>Creiamo una <strong>nuova cartella</strong> e la chiamiamo “<strong>il-mio-tema</strong>“, dopodiché apriamo la cartella con <strong><a href="http://code.visualstudio.com/">VS Code</a></strong>. (Se non sai come fare questo passaggio visualizza le <a href="/blog/le-basi-dellhtml/">guide per principianti</a>)</p>
<p>Un <strong>tema WordPress</strong> per essere riconosciuto necessita solamente di <strong>2 file:</strong></p>
<ul>
<li>style.css</li>
<li>index.php</li>
</ul>
<p><strong>creiamo quindi questi 2 file all’interno della cartella “il-mio-tema”</strong> e inseriamo questo codice in “<strong>style.css</strong>“, in modo da indicare a WordPress i dati del tema:</p>
<pre tabindex="0"><code>/*
Theme Name: Il mio tema
Author: Specialista WP
Description: Il mio primo tema WordPress
Version: 0.0.1
*/
</code></pre><p>Puoi <strong>sostituire</strong> l’autore con il tuo nome, così come il nome del tema e la descrizione.</p>
<p>Se ora salvi il file CSS e vai nel backend di WordPress in “<strong>Aspetto – Temi</strong>” vedrai comparire il nostro tema!</p>
<p><img src="images/image-12-2.png" alt=""></p>
<p>Puoi <strong>attivare il tema</strong> e <em>voilà</em>! Il tema è fatto!</p>
<p>Non è poi tanto complicato vero? Già, però ora il tema è <strong>vuoto</strong>, occorre riempirlo!</p>
<p>Inizia con l’inserire questo codice nella “<strong>index.php</strong>“, è un <strong>layout di base</strong> creato con <a href="/blog/le-basi-di-bootstrap/">bootstrap</a> sul quale andremo a costruire il nostro sito:</p>
<p><strong>index.html</strong></p>
<pre tabindex="0"><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;it&#34;&gt;

&lt;head&gt;
    &lt;meta charset=&#34;utf-8&#34;&gt;
    &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt;
    &lt;!-- I 3 meta tags qua sopra DEVONO essere inseriti come primi --&gt;
    &lt;meta name=&#34;description&#34; content=&#34;&#34;&gt;
    &lt;meta name=&#34;author&#34; content=&#34;&#34;&gt;

    &lt;title&gt;Il mio primo tema&lt;/title&gt;

    &lt;!-- Bootstrap core CSS --&gt;
    &lt;link href=&#34;http://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&#34; rel=&#34;stylesheet&#34;&gt;

&lt;/head&gt;

&lt;body&gt;

    &lt;nav class=&#34;navbar navbar-expand-lg navbar-light bg-light&#34;&gt;
        &lt;div class=&#34;container&#34;&gt;
            &lt;a class=&#34;navbar-brand&#34; href=&#34;#&#34;&gt;Il mio primo tema&lt;/a&gt;
            &lt;button class=&#34;navbar-toggler&#34; type=&#34;button&#34; data-toggle=&#34;collapse&#34; data-target=&#34;#navbarSupportedContent&#34; aria-controls=&#34;navbarSupportedContent&#34; aria-expanded=&#34;false&#34; aria-label=&#34;Toggle navigation&#34;&gt;
                &lt;span class=&#34;navbar-toggler-icon&#34;&gt;&lt;/span&gt;
            &lt;/button&gt;

            &lt;div class=&#34;collapse navbar-collapse&#34; id=&#34;navbarSupportedContent&#34;&gt;
                &lt;ul class=&#34;navbar-nav ml-auto&#34;&gt;
                    &lt;li class=&#34;nav-item active&#34;&gt;
                        &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Home &lt;span class=&#34;sr-only&#34;&gt;(current)&lt;/span&gt;&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=&#34;nav-item&#34;&gt;
                        &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Chi sono&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=&#34;nav-item&#34;&gt;
                        &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Blog&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=&#34;nav-item&#34;&gt;
                        &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Contatti&lt;/a&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/nav&gt;


    &lt;div class=&#34;container mt-5&#34;&gt;

        &lt;div class=&#34;row&#34;&gt;
            &lt;!-- CONTENUTO --&gt;
            &lt;div class=&#34;col-sm-8&#34;&gt;

                &lt;!-- ARTICOLO --&gt;
                &lt;div class=&#34;articolo-list&#34;&gt;
                    &lt;!-- TITOLO --&gt;
                    &lt;h2 class=&#34;&#34;&gt;Il mio articolo&lt;/h2&gt;
                    &lt;!-- META --&gt;
                    &lt;p&gt;15 luglio 2020 - Scritto da &lt;a href=&#34;#&#34;&gt;Alberto&lt;/a&gt;&lt;/p&gt;
                    &lt;!-- CONTENT --&gt;
                    &lt;p&gt;
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque et justo ultrices, blandit nulla in, convallis metus. Nullam et mollis orci.
                        Nulla magna augue, accumsan in metus ut, pulvinar facilisis libero. Aliquam erat volutpat. Nulla lectus tortor, lacinia id imperdiet ut, sagittis
                        consectetur magna. Maecenas laoreet sodales tristique. [...]
                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;!-- /ARTICOLO --&gt;

                &lt;!-- ARTICOLO --&gt;
                &lt;div class=&#34;articolo-list mt-5&#34;&gt;
                    &lt;!-- TITOLO --&gt;
                    &lt;h2 class=&#34;&#34;&gt;Il mio articolo 2&lt;/h2&gt;
                    &lt;!-- META --&gt;
                    &lt;p&gt;16 luglio 2020 - Scritto da &lt;a href=&#34;#&#34;&gt;Alberto&lt;/a&gt;&lt;/p&gt;
                    &lt;!-- CONTENT --&gt;
                    &lt;p&gt;
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque et justo ultrices, blandit nulla in, convallis metus. Nullam et mollis orci.
                        Nulla magna augue, accumsan in metus ut, pulvinar facilisis libero. Aliquam erat volutpat. Nulla lectus tortor, lacinia id imperdiet ut, sagittis
                        consectetur magna. Maecenas laoreet sodales tristique. [...]
                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;!-- /ARTICOLO --&gt;

                &lt;!-- ARTICOLO --&gt;
                &lt;div class=&#34;articolo-list mt-5&#34;&gt;
                    &lt;!-- TITOLO --&gt;
                    &lt;h2 class=&#34;&#34;&gt;Il mio articolo 3&lt;/h2&gt;
                    &lt;!-- META --&gt;
                    &lt;p&gt;17 luglio 2020 - Scritto da &lt;a href=&#34;#&#34;&gt;Alberto&lt;/a&gt;&lt;/p&gt;
                    &lt;!-- CONTENT --&gt;
                    &lt;p&gt;
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque et justo ultrices, blandit nulla in, convallis metus. Nullam et mollis orci.
                        Nulla magna augue, accumsan in metus ut, pulvinar facilisis libero. Aliquam erat volutpat. Nulla lectus tortor, lacinia id imperdiet ut, sagittis
                        consectetur magna. Maecenas laoreet sodales tristique. [...]
                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;!-- /ARTICOLO --&gt;

                &lt;!-- NAVIGATION LINKS --&gt;
                &lt;nav aria-label=&#34;Page navigation example&#34;&gt;
                    &lt;ul class=&#34;pagination justify-content-center mb-5&#34;&gt;
                        &lt;li class=&#34;page-item disabled&#34;&gt;
                            &lt;a class=&#34;page-link&#34; href=&#34;#&#34; tabindex=&#34;-1&#34; aria-disabled=&#34;true&#34;&gt;Precedente&lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;&lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;1&lt;/a&gt;&lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;&lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;2&lt;/a&gt;&lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;&lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;3&lt;/a&gt;&lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;
                            &lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;Successivo&lt;/a&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/nav&gt;
                &lt;!-- /NAVIGATION LINKS --&gt;
            &lt;/div&gt;
            &lt;!-- /CONTENUTO --&gt;

            &lt;!-- SIDEBAR --&gt;
            &lt;div class=&#34;col-sm-3 col-sm-offset-1 blog-sidebar&#34;&gt;
                &lt;div&gt;
                    &lt;h4&gt;Chi sono&lt;/h4&gt;
                    &lt;p&gt;Etiam porta &lt;em&gt;sem malesuada magna&lt;/em&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;h4&gt;Ultimi articoli&lt;/h4&gt;
                    &lt;ol class=&#34;list-unstyled&#34;&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Il mio articolo 1&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Il mio articolo 2&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Il mio articolo 3&lt;/a&gt;&lt;/li&gt;

                    &lt;/ol&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;h4&gt;Social&lt;/h4&gt;
                    &lt;ol class=&#34;list-unstyled&#34;&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
                    &lt;/ol&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;!-- /SIDEBAR --&gt;

        &lt;/div&gt;&lt;!-- /.row --&gt;

    &lt;/div&gt;&lt;!-- /.container --&gt;

    &lt;footer&gt;
        &lt;div class=&#34;container text-center mb-5&#34;&gt;
            &lt;p&gt;Sito realizzato da &lt;a href=&#34;&#34;&gt;Specialista WP!&lt;/a&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/footer&gt;


    &lt;!-- Bootstrap core JavaScript
    ================================================== --&gt;
    &lt;!-- Placed at the end of the document so the pages load faster --&gt;
    &lt;script src=&#34;http://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&#34;&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><p>Se ora <strong>salvi</strong> e <strong><em>refreshi</em></strong> la home del sito vedrai del contenuto!</p>
<p>La pagina è commentata, quindi dovresti riuscire a capire bene il codice al suo interno.</p>
<p><em>Ricorda sempre di commentare il codice indicando cosa stai facendo, potrà aiutare i tuoi collaboratori ma anche il te stesso del futuro quando ritornerà al codice dopo molto tempo!</em></p>
<p><strong>Ora procediamo con la creazione del tema!</strong></p>
<h2 id="dividere-in-sezioni">DIVIDERE IN SEZIONI</h2>
<p>Ora esiste solamente index.php, ma noi vogliamo creare un <strong>tema vero e proprio</strong>, che avrà delle parti di layout che si <strong>ripeteranno</strong> spesso e altre parti da aggiornare <strong>dinamicamente</strong>.</p>
<p>Procediamo quindi a <strong>dividere il layout</strong> del nostro sito in quattro sezioni:</p>
<ul>
<li>header.php</li>
<li>footer.php</li>
<li>sidebar.php</li>
<li>content.php</li>
</ul>
<p><strong>Creiamo</strong> questi <strong>quattro file</strong> nella cartella del nostro tema ed andiamo a <strong>spezzettare la index.php</strong> in questo modo:</p>
<p><strong>heder.php</strong></p>
<pre tabindex="0"><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;it&#34;&gt;

&lt;head&gt;
    &lt;meta charset=&#34;utf-8&#34;&gt;
    &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt;
    &lt;!-- I 3 meta tags qua sopra DEVONO essere inseriti come primi --&gt;
    &lt;meta name=&#34;description&#34; content=&#34;&#34;&gt;
    &lt;meta name=&#34;author&#34; content=&#34;&#34;&gt;

    &lt;title&gt;Il mio primo tema&lt;/title&gt;

    &lt;!-- Bootstrap core CSS --&gt;
    &lt;link href=&#34;http://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&#34; rel=&#34;stylesheet&#34;&gt;

&lt;/head&gt;

&lt;body&gt;

    &lt;nav class=&#34;navbar navbar-expand-lg navbar-light bg-light&#34;&gt;
        &lt;div class=&#34;container&#34;&gt;
            &lt;a class=&#34;navbar-brand&#34; href=&#34;#&#34;&gt;Il mio primo tema&lt;/a&gt;
            &lt;button class=&#34;navbar-toggler&#34; type=&#34;button&#34; data-toggle=&#34;collapse&#34; data-target=&#34;#navbarSupportedContent&#34; aria-controls=&#34;navbarSupportedContent&#34; aria-expanded=&#34;false&#34; aria-label=&#34;Toggle navigation&#34;&gt;
                &lt;span class=&#34;navbar-toggler-icon&#34;&gt;&lt;/span&gt;
            &lt;/button&gt;

            &lt;div class=&#34;collapse navbar-collapse&#34; id=&#34;navbarSupportedContent&#34;&gt;
                &lt;ul class=&#34;navbar-nav ml-auto&#34;&gt;
                    &lt;li class=&#34;nav-item active&#34;&gt;
                        &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Home &lt;span class=&#34;sr-only&#34;&gt;(current)&lt;/span&gt;&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=&#34;nav-item&#34;&gt;
                        &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Chi sono&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=&#34;nav-item&#34;&gt;
                        &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Blog&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=&#34;nav-item&#34;&gt;
                        &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Contatti&lt;/a&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/nav&gt;


    &lt;div class=&#34;container mt-5&#34;&gt;

        &lt;div class=&#34;row&#34;&gt;
</code></pre><p><strong>footer.php</strong></p>
<pre tabindex="0"><code>
            &lt;/div&gt;&lt;!-- /.row --&gt;

&lt;/div&gt;&lt;!-- /.container --&gt;

    &lt;footer&gt;
        &lt;div class=&#34;container text-center mb-5&#34;&gt;
            &lt;p&gt;Sito realizzato da &lt;a href=&#34;&#34;&gt;Specialista WP!&lt;/a&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/footer&gt;


    &lt;!-- Bootstrap core JavaScript
    ================================================== --&gt;
    &lt;!-- Placed at the end of the document so the pages load faster --&gt;
    &lt;script src=&#34;http://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&#34;&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><p><strong>sidebar.php</strong></p>
<pre tabindex="0"><code>            &lt;!-- SIDEBAR --&gt;
            &lt;div class=&#34;col-sm-3 col-sm-offset-1 blog-sidebar&#34;&gt;
                &lt;div&gt;
                    &lt;h4&gt;Chi sono&lt;/h4&gt;
                    &lt;p&gt;Etiam porta &lt;em&gt;sem malesuada magna&lt;/em&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;h4&gt;Ultimi articoli&lt;/h4&gt;
                    &lt;ol class=&#34;list-unstyled&#34;&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Il mio articolo 1&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Il mio articolo 2&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Il mio articolo 3&lt;/a&gt;&lt;/li&gt;

                    &lt;/ol&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;h4&gt;Social&lt;/h4&gt;
                    &lt;ol class=&#34;list-unstyled&#34;&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;#&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
                    &lt;/ol&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;!-- /SIDEBAR --&gt;
</code></pre><p><strong>content.php</strong></p>
<pre tabindex="0"><code>

            &lt;!-- CONTENUTO --&gt;
            &lt;div class=&#34;col-sm-8&#34;&gt;

                &lt;!-- ARTICOLO --&gt;
                &lt;div class=&#34;articolo-list&#34;&gt;
                    &lt;!-- TITOLO --&gt;
                    &lt;h2 class=&#34;&#34;&gt;Il mio articolo&lt;/h2&gt;
                    &lt;!-- META --&gt;
                    &lt;p&gt;15 luglio 2020 - Scritto da &lt;a href=&#34;#&#34;&gt;Alberto&lt;/a&gt;&lt;/p&gt;
                    &lt;!-- CONTENT --&gt;
                    &lt;p&gt;
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque et justo ultrices, blandit nulla in, convallis metus. Nullam et mollis orci.
                        Nulla magna augue, accumsan in metus ut, pulvinar facilisis libero. Aliquam erat volutpat. Nulla lectus tortor, lacinia id imperdiet ut, sagittis
                        consectetur magna. Maecenas laoreet sodales tristique. [...]
                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;!-- /ARTICOLO --&gt;

                &lt;!-- ARTICOLO --&gt;
                &lt;div class=&#34;articolo-list mt-5&#34;&gt;
                    &lt;!-- TITOLO --&gt;
                    &lt;h2 class=&#34;&#34;&gt;Il mio articolo 2&lt;/h2&gt;
                    &lt;!-- META --&gt;
                    &lt;p&gt;16 luglio 2020 - Scritto da &lt;a href=&#34;#&#34;&gt;Alberto&lt;/a&gt;&lt;/p&gt;
                    &lt;!-- CONTENT --&gt;
                    &lt;p&gt;
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque et justo ultrices, blandit nulla in, convallis metus. Nullam et mollis orci.
                        Nulla magna augue, accumsan in metus ut, pulvinar facilisis libero. Aliquam erat volutpat. Nulla lectus tortor, lacinia id imperdiet ut, sagittis
                        consectetur magna. Maecenas laoreet sodales tristique. [...]
                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;!-- /ARTICOLO --&gt;

                &lt;!-- ARTICOLO --&gt;
                &lt;div class=&#34;articolo-list mt-5&#34;&gt;
                    &lt;!-- TITOLO --&gt;
                    &lt;h2 class=&#34;&#34;&gt;Il mio articolo 3&lt;/h2&gt;
                    &lt;!-- META --&gt;
                    &lt;p&gt;17 luglio 2020 - Scritto da &lt;a href=&#34;#&#34;&gt;Alberto&lt;/a&gt;&lt;/p&gt;
                    &lt;!-- CONTENT --&gt;
                    &lt;p&gt;
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque et justo ultrices, blandit nulla in, convallis metus. Nullam et mollis orci.
                        Nulla magna augue, accumsan in metus ut, pulvinar facilisis libero. Aliquam erat volutpat. Nulla lectus tortor, lacinia id imperdiet ut, sagittis
                        consectetur magna. Maecenas laoreet sodales tristique. [...]
                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;!-- /ARTICOLO --&gt;

                &lt;!-- NAVIGATION LINKS --&gt;
                &lt;nav aria-label=&#34;Page navigation example&#34;&gt;
                    &lt;ul class=&#34;pagination justify-content-center mb-5&#34;&gt;
                        &lt;li class=&#34;page-item disabled&#34;&gt;
                            &lt;a class=&#34;page-link&#34; href=&#34;#&#34; tabindex=&#34;-1&#34; aria-disabled=&#34;true&#34;&gt;Precedente&lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;&lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;1&lt;/a&gt;&lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;&lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;2&lt;/a&gt;&lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;&lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;3&lt;/a&gt;&lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;
                            &lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;Successivo&lt;/a&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/nav&gt;
                &lt;!-- /NAVIGATION LINKS --&gt;
            &lt;/div&gt;
            &lt;!-- /CONTENUTO --&gt;
</code></pre><p>Ora non ci resta che richiamare i vari pezzi di contenuto nella index.php, in modo da montare il sito, in questo modo:</p>
<p><strong>index.php</strong></p>
<pre tabindex="0"><code>&lt;?php get_header(); ?&gt;

&lt;?php get_template_part( &#39;content&#39;, get_post_format() ); ?&gt;

&lt;?php get_sidebar(); ?&gt;

&lt;?php get_footer(); ?&gt;
</code></pre><p>Ora la nostra index.php è <strong>molto più semplice</strong> no?</p>
<p>Le funzioni <em>get_header()</em>, <em>get_sidebar()</em> e <em>get_footer()</em> vanno automaticamente ad inserire i fine <em>header.php</em>, <em>sidebar.php</em> e <em>footer.php</em>.</p>
<p>Per inserire un file diverso abbiamo utilizzato la funzione <em>get_template_part()</em> indicando il nome del file php da cui prendere il codice.</p>
<p>Nella programmazione è molto importante <strong>suddividere i contenuti</strong> in parti più piccole, in modo da rendere i file più semplici e facilmente leggibili.</p>
<h2 id="impostazioni-principali">IMPOSTAZIONI PRINCIPALI</h2>
<p>Vediamo ora come <strong>recuperare</strong> alcune delle <strong>informazioni principali</strong> del nostro sito.</p>
<p>Nel <strong>backend</strong> puoi impostare un nome e una descrizione al tuo sito, nella sezione “<strong>Impostazioni – Generali</strong>“.</p>
<p><img src="images/image-14-1.png" alt=""></p>
<p><strong>Inserisci</strong> il <strong>titolo</strong> del sito e un <strong>motto</strong>. Ora vediamo come recuperare questi dati nel <strong>frontend</strong>!</p>
<p>Andiamo in <strong>header.php</strong> e modifichiamo il <strong>titolo</strong> nella navbar del sito.</p>
<p>Eliminiamo quindi la scritta “<strong>Il mio primo tema</strong>” e la sostituiamo con</p>
<pre tabindex="0"><code>&lt;?php echo get_bloginfo( &#39;name&#39; ); ?&gt;
</code></pre><p>In questo modo <strong>il nome del sito sarà dinamico.</strong></p>
<p>Possiamo anche inserire il <strong>motto</strong> del sito con questa funzione:</p>
<pre tabindex="0"><code>&lt;?php echo get_bloginfo( &#39;description&#39; ); ?&gt;
</code></pre><p>Infine possiamo impostare <strong>i link alla home del sito</strong> sul titolo, in questo modo:</p>
<pre tabindex="0"><code>&lt;a class=&#34;navbar-brand&#34; href=&#34;&lt;?php echo esc_url( home_url( &#39;/&#39; ) ); ?&gt;&#34;&gt;&lt;?php echo get_bloginfo( &#39;name&#39; ); ?&gt;&lt;/a&gt;
</code></pre><p>Molto bene! <strong>Abbiamo iniziato a rendere dinamico il nostro sito!</strong> Ora buttiamoci in qualcosa di più complicato ma <strong>fondamentale</strong>!</p>
<h2 id="il-loop">IL LOOP</h2>
<p><strong>Il loop sta alla base di ogni tema WordPress</strong>. Consente di inserire una serie di dati recuperandoli dal database.</p>
<p>Possiamo utilizzarlo per inserire l’elenco degli articoli, delle pagine, di una determinata categoria, di sezioni speciali etc.</p>
<p>Tutti i contenuti in WordPress vengono generati da loop! Possiamo dire che <strong>è la funzione più importante di tutte!</strong></p>
<p>Nel <strong>backend</strong> al momento abbiamo solamente <strong>l’articolo</strong> di default: “Ciao mondo!”, vediamo come <strong>farlo comparire nella home page del sito.</strong></p>
<p>Il <strong>loop</strong> di WordPress è molto semplice:</p>
<pre tabindex="0"><code>&lt;?php
if (have_posts()) :
    while (have_posts()) : the_post();
?&gt;

        &lt;!-- Contenuto del loop --&gt;

&lt;?php
    endwhile;
endif;
?&gt;
</code></pre><p>Direi che <strong>si spiega</strong> abbastanza <strong>da solo</strong>.</p>
<p>Se ci sono dei post allora inizia il loop, nel quale inserisce i post finché ce ne sono.</p>
<p>Proviamo ad <strong>inserire il loop nella nostra home page</strong>, in index.php</p>
<p><strong>index.php</strong></p>
<pre tabindex="0"><code>&lt;?php get_header(); ?&gt;

&lt;?php
if (have_posts()) :
    while (have_posts()) : the_post();

        get_template_part(&#39;content&#39;, get_post_format());

    endwhile;
endif;
?&gt;

&lt;?php get_sidebar(); ?&gt;

&lt;?php get_footer(); ?&gt;
</code></pre><p>Ora <strong>rendiamo dinamico il contenuto</strong> all’interno del file content.php</p>
<p><strong>content.php</strong></p>
<pre tabindex="0"><code>

            &lt;!-- CONTENUTO --&gt;
            &lt;div class=&#34;col-sm-8&#34;&gt;

                &lt;!-- ARTICOLO --&gt;
                &lt;div class=&#34;articolo-list&#34;&gt;
                    &lt;!-- TITOLO --&gt;
                    &lt;h2 class=&#34;&#34;&gt;&lt;?php the_title(); ?&gt;&lt;/h2&gt;
                    &lt;!-- META --&gt;
                    &lt;p&gt;&lt;?php the_date(&#39;d/m/Y&#39;); ?&gt;  - Scritto da &lt;a href=&#34;#&#34;&gt;&lt;?php the_author(); ?&gt;&lt;/a&gt;&lt;/p&gt;
                    &lt;!-- CONTENT --&gt;
                    &lt;?php the_content(); ?&gt;

                &lt;/div&gt;
                &lt;!-- /ARTICOLO --&gt;

                &lt;!-- NAVIGATION LINKS --&gt;
                &lt;nav aria-label=&#34;Page navigation example&#34;&gt;
                    &lt;ul class=&#34;pagination justify-content-center mb-5&#34;&gt;
                        &lt;li class=&#34;page-item disabled&#34;&gt;
                            &lt;a class=&#34;page-link&#34; href=&#34;#&#34; tabindex=&#34;-1&#34; aria-disabled=&#34;true&#34;&gt;Precedente&lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;&lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;1&lt;/a&gt;&lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;&lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;2&lt;/a&gt;&lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;&lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;3&lt;/a&gt;&lt;/li&gt;
                        &lt;li class=&#34;page-item&#34;&gt;
                            &lt;a class=&#34;page-link&#34; href=&#34;#&#34;&gt;Successivo&lt;/a&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/nav&gt;
                &lt;!-- /NAVIGATION LINKS --&gt;
            &lt;/div&gt;
            &lt;!-- /CONTENUTO --&gt;
</code></pre><p>Benissimo! Ora in home page compare solamente il nostro primo articolo.</p>
<p>Prova a <strong>creare un nuovo articolo</strong> nel backend e a pubblicarlo, lo vedrai comparire anche nella home page!</p>
<p><strong>Grande! Stai iniziando a fare sul serio con WordPress!</strong></p>
<p>Se vuoi continuare a sviluppare il tuo primo tema WordPress da zero prosegui con la <a href="/blog/creare-un-tema-wordpress-da-zero-parte-2/">parte 2</a>!</p>
<p><a href="/blog/creare-un-tema-wordpress-da-zero-parte-2/">Parte 2 &raquo;</a></p>
]]></content>
		</item>

		<item>
			<title>2. Creare un tema WordPress da zero – Parte 2</title>
			<link>https://albertoreineri.it/blog/creare-un-tema-wordpress-da-zero-parte-2/</link>
			<pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/creare-un-tema-wordpress-da-zero-parte-2/</guid>
			<description>Nella parte 1 di questa guida per creare un tema WordPress da zero abbiamo iniziato a creare in nostro primo tema WordPress, creando header, footer e sidebar e imparando come funziona il loop di WordPress.
Ora andiamo a rendere dinamico il contenuto delle varie sezioni!
MENU WordPress permette di impostare dei menu, nella sezione “Aspetto – Menu“.
Questi menu creati nel backend possono essere inseriti nel frontend, rendendo così eventuali modifiche molto semplici ed immediate.</description>
			<content type="html"><![CDATA[<p>Nella <strong><a href="/blog/creare-un-tema-wordpress-da-zero-parte-1/">parte 1</a></strong> di questa guida per <strong>creare un tema WordPress da zero</strong> abbiamo iniziato a creare in nostro primo tema WordPress, creando <strong>header</strong>, <strong>footer</strong> e <strong>sidebar</strong> e imparando come funziona il <strong>loop</strong> di WordPress.</p>
<p>Ora andiamo a <strong>rendere dinamico</strong> il contenuto delle varie sezioni!</p>
<h2 id="menu">MENU</h2>
<p>WordPress permette di impostare dei <strong>menu</strong>, nella sezione “<strong>Aspetto – Menu</strong>“.</p>
<p>Questi menu <strong>creati nel backend</strong> possono essere <strong>inseriti nel frontend</strong>, rendendo così eventuali modifiche molto semplici ed immediate.</p>
<p><strong>Vediamo come fare.</strong></p>
<p>Per prima cosa dobbiamo <strong>abilitare il nostro tema all’utilizzo dei menu</strong>. Se infatti provi ad andare nel backend a certare la sezione “Aspetto – Menu” ora non la troverai ancora.</p>
<p>Per abilitarla dobbiamo creare quello che sarà il file più importante di tutto il tema: <em><strong>functions.php</strong></em>.</p>
<p>Creiamo quindi un file chiamato <em>functions.php</em> e inseriamo al suo interno questo codice:</p>
<pre tabindex="0"><code>&lt;?php
//Setup del tema
function il_mio_tema_setup() {

//Imposto il menù per la navbar
    register_nav_menus(array(
		&#39;navigation&#39; =&gt; __( &#39;Menu Navbar&#39;,&#39;il-mio-tema&#39;),
	));

}

add_action(&#39;after_setup_theme&#39;, &#39;il_mio_tema_setup&#39;);
</code></pre><p>Abbiamo creato una funzione di <strong>setup del tema</strong>, che utilizzeremo ancora in seguito per inserire altre personalizzazioni.</p>
<p>Qua abbiamo <strong>registrato un nuovo menu</strong> attraverso la funzione <em>register_nav_menus</em> e l’abbiamo chiamato ‘<strong>Menu Navbar</strong>‘.</p>
<p>Se ora andiamo nel <strong>backend</strong> vedremo che la sezione “Aspetto – Menu” è attiva e utilizzabile.</p>
<p>Procediamo quindi a <strong>creare un nuovo menù:</strong></p>
<p><img src="images/image-31-1024x324-1.png" alt=""></p>
<p>Per il momento inseriamo solamente la home page e la pagina di esempio di default di WordPress, giusto per avere del contenuto al suo interno e clicchiamo su “<strong>Crea menu</strong>“.</p>
<p>Poi possiamo impostare il menù nella <strong>posizione</strong> “Menù navbar”:</p>
<p><img src="images/image-32-1024x142-1.png" alt=""></p>
<p>Ora non ci resta che <strong>inserire questo menù nella nostra barra di navigazione</strong>, nell’header del tema.</p>
<p>Apriamo quindi <em>header.php</em> e sostituiamo l&rsquo;<ul> della nav con questo:</p>
<pre tabindex="0"><code>            &lt;div class=&#34;collapse navbar-collapse&#34; id=&#34;navbarSupportedContent&#34;&gt;
                &lt;?php
                $args = array(
                    &#39;theme_location&#39; =&gt; &#39;navigation&#39;,
                    &#39;depth&#39;      =&gt; 2,
                    &#39;container&#39; =&gt; false,
                    &#39;menu_class&#39; =&gt; &#39;navbar-nav ml-auto&#39;,
                    &#39;add_li_class&#39;  =&gt; &#39;nav-item&#39;,
                    &#39;link_class&#39;   =&gt; &#39;nav-link&#39;,
                    &#39;walker&#39;     =&gt; new Bootstrap_Walker_Nav_Menu()

                );

                ?&gt;
                &lt;?php wp_nav_menu($args); ?&gt;
            &lt;/div&gt;
</code></pre><p>IMPORTANTE: per selezionare il giusto menù abbiamo inserito il theme_location uguale al nome di registrazione del menu inserito in functions.php.</p>
<p>Per far funzionare correttamente il <strong>dropdown</strong> di bootstrap dobbiamo ancora aggiungere una funzione che permetta di gestire i vari sottomenù. Questa funzione è chiamata “<strong>walker</strong>“, puoi semplicemente incollare questo codice nel <em>functions.php</em>:</p>
<pre tabindex="0"><code>// Custom Walker Class for Bootstrap Menu
add_action( &#39;after_setup_theme&#39;, &#39;bootstrap_setup&#39; );

if ( ! function_exists( &#39;bootstrap_setup&#39; ) ):

  function bootstrap_setup(){

    class Bootstrap_Walker_Nav_Menu extends Walker_Nav_Menu {


      function start_lvl( &amp;$output, $depth = 0, $args = array() ) {

        $indent = str_repeat( &#34;\t&#34;, $depth );
        $output    .= &#34;\n$indent&lt;ul class=\&#34;dropdown-menu\&#34;&gt;\n&#34;;

      }

      function start_el( &amp;$output, $item, $depth = 0, $args = array(), $id = 0 ) {

        $indent = ( $depth ) ? str_repeat( &#34;\t&#34;, $depth ) : &#39;&#39;;

        $li_attributes = &#39;&#39;;
        $class_names = $value = &#39;&#39;;

        $classes = empty( $item-&gt;classes ) ? array() : (array) $item-&gt;classes;
        $classes[] = ($args-&gt;walker-&gt;has_children) ? &#39;dropdown&#39; : &#39;&#39;;
        $classes[] = ($item-&gt;current || $item-&gt;current_item_ancestor) ? &#39;active&#39; : &#39;&#39;;
        $classes[] = &#39;menu-item-&#39; . $item-&gt;ID;
        $classes[] = &#39;nav-item&#39;;


        $class_names = join( &#39; &#39;, apply_filters( &#39;nav_menu_css_class&#39;, array_filter( $classes ), $item, $args ) );
        $class_names = &#39; class=&#34;&#39; . esc_attr( $class_names ) . &#39;&#34;&#39;;

        $id = apply_filters( &#39;nav_menu_item_id&#39;, &#39;menu-item-&#39;. $item-&gt;ID, $item, $args );
        $id = strlen( $id ) ? &#39; id=&#34;&#39; . esc_attr( $id ) . &#39;&#34;&#39; : &#39;&#39;;

        $output .= $indent . &#39;&lt;li&#39; . $id . $value . $class_names . $li_attributes . &#39;&gt;&#39;;

        $attributes  = ! empty( $item-&gt;attr_title ) ? &#39; title=&#34;&#39;  . esc_attr( $item-&gt;attr_title ) .&#39;&#34;&#39; : &#39;&#39;;
        $attributes .= ! empty( $item-&gt;target )     ? &#39; target=&#34;&#39; . esc_attr( $item-&gt;target     ) .&#39;&#34;&#39; : &#39;&#39;;
        $attributes .= ! empty( $item-&gt;xfn )        ? &#39; rel=&#34;&#39;    . esc_attr( $item-&gt;xfn        ) .&#39;&#34;&#39; : &#39;&#39;;
        $attributes .= ! empty( $item-&gt;url )        ? &#39; href=&#34;&#39;   . esc_attr( $item-&gt;url        ) .&#39;&#34;&#39; : &#39;&#39;;
        $attributes .= ($args-&gt;walker-&gt;has_children)      ? &#39; class=&#34;nav-link dropdown-toggle&#34; id=&#34;navbarDropdownMenuLink&#34; data-toggle=&#34;dropdown&#34; aria-haspopup=&#34;true&#34; aria-expanded=&#34;false&#34;&#39; : &#39;class=&#34;nav-link&#34;&#39;;

        $item_output = $args-&gt;before;
        $item_output .= ($depth &gt; 0) ? &#39;&lt;a class=&#34;dropdown-item&#34;&#39; . $attributes . &#39;&gt; &#39; : &#39;&lt;a&#39;. $attributes .&#39;&gt;&#39;;
        $item_output .= $args-&gt;link_before . apply_filters( &#39;the_title&#39;, $item-&gt;title, $item-&gt;ID ) . $args-&gt;link_after;
        $item_output .= &#39;&lt;/a&gt;&#39;;
        $item_output .= $args-&gt;after;

        $output .= apply_filters( &#39;walker_nav_menu_start_el&#39;, $item_output, $item, $depth, $args );
      }

    }

  }

endif;
</code></pre><p>Ora se salvi e aggiorni dovresti avere <strong>il menu funzionante e dinamico!</strong></p>
<h2 id="widget">WIDGET</h2>
<p>I <strong>widget</strong> sono una parte <strong>importantissima</strong> di WordPress. Consentono di creare una <strong>sezione inseribile in più parti</strong> in maniera semplice e veloce.</p>
<h3 id="inizializziamo-i-widget">INIZIALIZZIAMO I WIDGET</h3>
<p>Per inizializzare un widget dobbiamo andare sempre nel <em>functions.php</em> ed inserire questo codice:</p>
<pre tabindex="0"><code>// Widgets
function InizializzazioneWidget() {

	register_sidebar( array(
		&#39;name&#39; =&gt; &#39;Sidebar&#39;,
		&#39;id&#39; =&gt; &#39;sidebar1&#39;,
		&#39;before_widget&#39; =&gt; &#39;&lt;div class=&#34;sidebar&#34;&gt;&#39;,
		&#39;after_widget&#39; =&gt; &#39;&lt;/div&gt;&#39;,
		&#39;before_title&#39; =&gt; &#39;&lt;h3&gt;&#39;,
		&#39;after_title&#39; =&gt; &#39;&lt;/h3&gt;&#39;,
	));
}

add_action(&#39;widgets_init&#39;, &#39;InizializzazioneWidget&#39;);
</code></pre><p>Ora abbiamo <strong>aggiunto la possibilità di inserire widget nella sidebar</strong>. I widget saranno inseriti in un div con classe “<strong>sidebar</strong>” e il titolo di ogni widget sarà un <h3>.</p>
<p>Se andiamo nel backend in “<strong>Aspetto – Widget</strong>” possiamo vedere che abbiamo un’area riservata alla sidebar:</p>
<p><img src="images/image-33.png" alt=""></p>
<p>Proviamo ad inserire dei widget al suo interno. Al momento non verranno inseriti nel frontend.</p>
<p>Dobbiamo <strong>andare a dire alla sidebar di prendere il suo contenuto attraverso i widget</strong>!</p>
<p>Apriamo quindi il nostro file <em>sidebar.php</em>, cancelliamo tutto e sostituiamo il codice con questo:</p>
<pre tabindex="0"><code>&lt;!-- SIDEBAR --&gt;
&lt;div class=&#34;col-sm-3 col-sm-offset-1 blog-sidebar&#34;&gt;
    &lt;?php if (is_active_sidebar(&#39;sidebar1&#39;)) : ?&gt;

        &lt;?php dynamic_sidebar(&#39;sidebar1&#39;); ?&gt;

    &lt;?php endif; ?&gt;
&lt;/div&gt;
&lt;!-- /SIDEBAR --&gt;
</code></pre><p>Ora nel backend proviamo ad inserire il Widget <strong>“Articoli recenti”</strong> nella sidebar, inserendo “Articoli recenti” come titolo e salvando.</p>
<p><img src="images/image-34-1.png" alt=""></p>
<p>Se tutto è andato liscio dovresti vedere gli ultimi articoli apparire nella sidebar!</p>
<p><img src="images/image-35.png" alt=""></p>
<p><strong>Fantastico! Hai appena creato un widget!</strong></p>
<p>Puoi creare <strong>widget anche in altre parti del sito</strong>, per esempio nel footer.</p>
<p><strong>Esercizio:</strong></p>
<p>Prova a creare dei widget da solo adesso.</p>
<p>Crea 4 widget da inserire nel footer del sito. Ricordati, devi registrare 4 zone per il footer in functions.php e andare nel file footer.php a inserire le aree giuste!</p>
<p>Ecco il risultato nel front-end:</p>
<p><img src="images/image-36-1024x138-1.png" alt=""></p>
<p>Prenditi un po’ di tempo e prova a farlo, qua sotto ti lascerò <strong>il codice:</strong></p>
<p><strong>functions.php</strong></p>
<pre tabindex="0"><code>// Widgets
function InizializzazioneWidget() {

	register_sidebar( array(
		&#39;name&#39; =&gt; &#39;Sidebar&#39;,
		&#39;id&#39; =&gt; &#39;sidebar1&#39;,
		&#39;before_widget&#39; =&gt; &#39;&lt;div class=&#34;sidebar&#34;&gt;&#39;,
		&#39;after_widget&#39; =&gt; &#39;&lt;/div&gt;&#39;,
		&#39;before_title&#39; =&gt; &#39;&lt;h3&gt;&#39;,
		&#39;after_title&#39; =&gt; &#39;&lt;/h3&gt;&#39;,
	));

    register_sidebar( array(
		&#39;name&#39; =&gt; &#39;Footer Area 1&#39;,
		&#39;id&#39; =&gt; &#39;footer1&#39;,
		&#39;before_widget&#39; =&gt; &#39;&lt;div class=&#34;widget-item&#34;&gt;&#39;,
		&#39;after_widget&#39; =&gt; &#39;&lt;/div&gt;&#39;,
		&#39;before_title&#39; =&gt; &#39;&lt;h2&gt;&#39;,
		&#39;after_title&#39; =&gt; &#39;&lt;/h2&gt;&#39;,
    ));

    register_sidebar( array(
		&#39;name&#39; =&gt; &#39;Footer Area 2&#39;,
		&#39;id&#39; =&gt; &#39;footer2&#39;,
		&#39;before_widget&#39; =&gt; &#39;&lt;div class=&#34;widget-item&#34;&gt;&#39;,
		&#39;after_widget&#39; =&gt; &#39;&lt;/div&gt;&#39;,
		&#39;before_title&#39; =&gt; &#39;&lt;h2&gt;&#39;,
		&#39;after_title&#39; =&gt; &#39;&lt;/h2&gt;&#39;,
    ));

    register_sidebar( array(
		&#39;name&#39; =&gt; &#39;Footer Area 3&#39;,
		&#39;id&#39; =&gt; &#39;footer3&#39;,
		&#39;before_widget&#39; =&gt; &#39;&lt;div class=&#34;widget-item&#34;&gt;&#39;,
		&#39;after_widget&#39; =&gt; &#39;&lt;/div&gt;&#39;,
		&#39;before_title&#39; =&gt; &#39;&lt;h2&gt;&#39;,
		&#39;after_title&#39; =&gt; &#39;&lt;/h2&gt;&#39;,
    ));

    register_sidebar( array(
		&#39;name&#39; =&gt; &#39;Footer Area 4&#39;,
		&#39;id&#39; =&gt; &#39;footer4&#39;,
		&#39;before_widget&#39; =&gt; &#39;&lt;div class=&#34;widget-item&#34;&gt;&#39;,
		&#39;after_widget&#39; =&gt; &#39;&lt;/div&gt;&#39;,
		&#39;before_title&#39; =&gt; &#39;&lt;h2&gt;&#39;,
		&#39;after_title&#39; =&gt; &#39;&lt;/h2&gt;&#39;,
	));


}

add_action(&#39;widgets_init&#39;, &#39;InizializzazioneWidget&#39;);
</code></pre><p><strong>footer.php</strong></p>
<pre tabindex="0"><code>&lt;div class=&#34;row&#34;&gt;

            &lt;?php if (is_active_sidebar(&#39;footer1&#39;)) : ?&gt;

                &lt;div class=&#34;col-lg-3&#34;&gt;
                    &lt;?php dynamic_sidebar(&#39;footer1&#39;); ?&gt;
                &lt;/div&gt;

            &lt;?php endif; ?&gt;

            &lt;?php if (is_active_sidebar(&#39;footer2&#39;)) : ?&gt;

                &lt;div class=&#34;col-lg-3&#34;&gt;
                    &lt;?php dynamic_sidebar(&#39;footer2&#39;); ?&gt;
                &lt;/div&gt;

            &lt;?php endif; ?&gt;

            &lt;?php if (is_active_sidebar(&#39;footer3&#39;)) : ?&gt;

                &lt;div class=&#34;col-lg-3&#34;&gt;
                    &lt;?php dynamic_sidebar(&#39;footer3&#39;); ?&gt;
                &lt;/div&gt;

            &lt;?php endif; ?&gt;

            &lt;?php if (is_active_sidebar(&#39;footer4&#39;)) : ?&gt;

                &lt;div class=&#34;col-lg-3&#34;&gt;
                    &lt;?php dynamic_sidebar(&#39;footer4&#39;); ?&gt;
                &lt;/div&gt;

            &lt;?php endif; ?&gt;
        &lt;/div&gt;
</code></pre><p>Molto bene, ora <strong>il sito inizia a prendere forma!</strong> Andiamo ora a cerare i layout per le pagine, gli articoli e gli archivi.</p>
<h2 id="layout-pagine">LAYOUT PAGINE</h2>
<p>Per creare un layout dedicato alle pagine di WordPress dobbiamo andare nella cartella del nostro tema e creare un file <em><strong>page.php</strong></em>.</p>
<p><strong>page.php</strong></p>
<pre tabindex="0"><code>&lt;?php get_header(); ?&gt;


&lt;?php
if (have_posts()) :
    while (have_posts()) : the_post();

?&gt;
        &lt;!-- TITOLO --&gt;
        &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;

        &lt;!-- IMMAGINE EVIDENZA --&gt;
        &lt;?php the_post_thumbnail(); ?&gt;

        &lt;!-- CONTENUTO --&gt;
        &lt;?php the_content(); ?&gt;

&lt;?php

    endwhile;
endif;
?&gt;

&lt;?php get_footer(); ?&gt;
</code></pre><p>Questo codice ci permetterà di <strong>visualizzare il titolo, l’immagine in evidenza ed il contenuto</strong> della pagina salvata nel backend.</p>
<p>Per differenziarla dagli articoli non abbiamo inserito la sidebar nelle pagine.</p>
<p>Vediamo ora come creare un articolo.</p>
<h3 id="layout-articoli">LAYOUT ARTICOLI</h3>
<p>Per creare un layout dedicato agli articoli ci basterà creare il file <em><strong>single.php</strong></em> all’interno del tema e inserire il loop:</p>
<p><strong>single.php</strong></p>
<pre tabindex="0"><code>&lt;?php get_header(); ?&gt;

&lt;div class=&#34;container&#34;&gt;
    &lt;div class=&#34;row&#34;&gt;g&lt;!-- CONTENTUO --&gt;
        &lt;div class=&#34;col-lg-8&#34;&gt;

            &lt;?php
            if (have_posts()) :
                while (have_posts()) : the_post();

            ?&gt;
                    &lt;!-- TITOLO --&gt;
                    &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;

                    &lt;!-- IMMAGINE EVIDENZA --&gt;
                    &lt;?php the_post_thumbnail(); ?&gt;

                    &lt;!-- CONTENUTO --&gt;
                    &lt;?php the_content(); ?&gt;

            &lt;?php

                endwhile;
            endif;
            ?&gt;

        &lt;/div&gt;
        &lt;!-- SIDEBAR --&gt;
        &lt;div class=&#34;col-lg-4&#34;&gt;

            &lt;?php get_sidebar(); ?&gt;

        &lt;/div&gt;
    &lt;/div&gt;

&lt;/div&gt;

&lt;?php get_footer(); ?&gt;
</code></pre><p>In questo caso abbiamo il contenuto dell’articolo sulla sinistra e la sidebar sulla destra.</p>
<p>Ed ecco il nostro bel layout per gli articoli!</p>
<h2 id="layout-archivi">LAYOUT ARCHIVI</h2>
<p>Un <strong>archivio</strong> è una pagina che contiene un <strong>elenco di post.</strong></p>
<p>Iniziamo con il creare una categoria “<strong>blog</strong>” nel backend di WordPress, dopodiché inseriamo questa categoria nel nostro menu di navigazione.</p>
<p>Creiamo anche un paio di articoli con categoria “blog”, in modo da avere dei contenuti da visualizzare nel frontend.</p>
<p>Ora andiamo nella cartella del nostro tema e creiamo un file <em><strong>archive.php</strong></em> contenente questo codice:</p>
<p><strong>archive.php</strong></p>
<pre tabindex="0"><code>&lt;?php get_header(); ?&gt;

&lt;div class=&#34;container&#34;&gt;
    &lt;div class=&#34;row&#34;&gt;
        &lt;!-- CONTENTUO --&gt;
        &lt;div class=&#34;col-lg-8&#34;&gt;
            &lt;h1&gt;
                &lt;?php
                single_cat_title();
                ?&gt;
            &lt;/h1&gt;

            &lt;?php
            if (have_posts()) :
                while (have_posts()) : the_post();

            ?&gt;
                    &lt;a href=&#34;&lt;?php the_permalink(); ?&gt;&#34;&gt;
                        &lt;div class=&#34;articolo&#34;&gt;
                            &lt;!-- TITOLO --&gt;
                            &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;

                            &lt;!-- IMMAGINE EVIDENZA --&gt;
                            &lt;?php the_post_thumbnail(); ?&gt;

                            &lt;!-- CONTENUTO --&gt;
                            &lt;?php the_excerpt(); ?&gt;
                        &lt;/div&gt;
                    &lt;/a&gt;
            &lt;?php

                endwhile;
            endif;
            ?&gt;

        &lt;/div&gt;
        &lt;!-- SIDEBAR --&gt;
        &lt;div class=&#34;col-lg-4&#34;&gt;

            &lt;?php get_sidebar(); ?&gt;

        &lt;/div&gt;
    &lt;/div&gt;

&lt;/div&gt;



&lt;?php get_footer(); ?&gt;
</code></pre><p>Il <strong>loop</strong> come puoi vedere <strong>è sempre lo stesso</strong>, però in questo caso al posto che visualizzare il contenuto (the_content), abbiamo visualizzato <strong>l’excerpt</strong>!</p>
<p>Un <strong>excerpt</strong> è una parte del contenuto, un’anteprima del testo vero e proprio.</p>
<p>In più abbiamo inserito il link ad ogni singolo articolo, utilizzando <em><strong>the_permalink</strong></em>.</p>
<p>Non è così complicato vero?</p>
<p><strong>Il tema è sempre più completo!</strong> Ci mancano solamente ancora un paio di passaggi. Leggi la parte numero 3 per imparare a creare un tema WordPress completo!</p>
<p><em><a href="/blog/le-basi-dellhtml/">&laquo; Parte 1</a></em></p>
<p><em><a href="/blog/creare-un-tema-wordpress-da-zero-parte-3/">Parte 3 &raquo;</a></em></p>
]]></content>
		</item>

		<item>
			<title>3. Creare un tema WordPress da zero – Parte 3</title>
			<link>https://albertoreineri.it/blog/creare-un-tema-wordpress-da-zero-parte-3/</link>
			<pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/creare-un-tema-wordpress-da-zero-parte-3/</guid>
			<description>Negli ultimi tutorial abbiamo iniziato a creare un tema WordPress da zero, e siamo arrivati già a un buon punto!
Ci mancano però ancora un paio di cosette per rendere accettabile il nostro lavoro. Vediamo di andare avanti!
Ti ricordo che sul fondo di questo articolo potrai trovare un link al tema completo. Potrai scaricarlo per cercare eventuali errori ed utilizzarlo come vorrai! Consideralo un regalo!
Ma riprendiamo il tutorial!</description>
			<content type="html"><![CDATA[<p>Negli <a href="/categories/wordpress-dev/">ultimi tutorial</a> abbiamo iniziato a <strong>creare un tema WordPress da zero</strong>, e siamo arrivati già a un buon punto!</p>
<p>Ci mancano però ancora un paio di cosette per rendere accettabile il nostro lavoro. <strong>Vediamo di andare avanti!</strong></p>
<p><em>Ti ricordo che sul fondo di questo articolo potrai trovare un link al tema completo. Potrai scaricarlo per cercare eventuali errori ed utilizzarlo come vorrai! Consideralo un regalo!</em></p>
<p>Ma riprendiamo il <strong>tutorial</strong>!</p>
<h2 id="inserire-immagini">Inserire immagini</h2>
<p>Con WordPress è semplicissimo inserire immagini all&rsquo;interno degli articoli, delle pagine o dei widget, ma se volessimo inserire per esempio un logo? Oppure un&rsquo;immagine in un punto specifico del sito?</p>
<p>Per fare questo dobbiamo utilizzare la funzione <em>get_template_directory_uri</em>, che ci permette di <strong>collegarci alla cartella del nostro tema</strong>. Vediamo come fare.</p>
<h3 id="inseriamo-un-logo-nella-navbar">Inseriamo un logo nella navbar</h3>
<p>Per prima cosa rechiamoci nella cartella del nostro tema e creiamo un&rsquo;altra cartella chiamata &ldquo;<strong>img</strong>&rdquo;. Qua dentro ora possiamo inserire le immagini che vogliamo inserire nel tema. Inseriamo un logo. Io lo chiamerò &ldquo;<strong>logo.png</strong>&rdquo;.</p>
<p>Ora andiamo nel nostro <em>header.php</em> e inseriamo il logo prima del titolo del nostro sito, in questo modo:</p>
<pre tabindex="0"><code>&lt;img src=&#34;&lt;?php echo get_template_directory_uri(); ?&gt;/img/logo.png&#34; alt=&#34;&#34; height=&#34;50&#34;&gt;
</code></pre><p>La funzione <em>get_template_directory_uri</em> inserirà il percorso della cartella del nostro sito, a cui noi aggiungiamo il percorso per raggiungere l&rsquo;immagine.</p>
<p>Prova a salvare e aggiornare il sito, dovresti vedere <strong>il logo comparire</strong> prima del nome del sito!</p>
<p>Se appare brutto puoi <strong>modificarlo tramite CSS</strong>, ma per il momento ci interessa il fatto che compaia!</p>
<p>La funzione <em>get_template_directory_uri</em> può essere utilizzata ogni volta che dobbiamo raggiungere qualcosa contenuto nella <strong>cartella del nostro tema.</strong></p>
<p>Potremmo anche utilizzarla per inserire i file CSS e JS nel sito, ma WordPress prevede un sistema diverso, che vedremo fra poco.</p>
<h2 id="hook">Hook</h2>
<p>Nello sviluppo WordPress gli <strong>hook</strong> hanno una grande importanza.</p>
<p>Ci permettono di <em>aggrapparci</em> a questi per inserire le nostre customizzazioni. Questo permette a noi sviluppatori di inserire delle <strong>modifiche al nostro tema</strong> senza toccare il core di WordPress.</p>
<p>Ci sono alcuni hook che sono <strong>fondamentali</strong> in ogni tema ben fatto.</p>
<h3 id="wp_title">wp_title</h3>
<p>Un primo hook da inserire è il <em>wp_title</em>, che va messo nel meta tag <code>&lt;title&gt;</code>, nell&rsquo;<code>&lt;head&gt;</code> della pagina.</p>
<p>Apriamo quindi il nostro <code>heder.php</code> e modifichiamo il <code>&lt;title&gt;</code> in questo modo:</p>
<pre tabindex="0"><code>&lt;title&gt;&lt;?php wp_title(); ?&gt;&lt;/title&gt;
</code></pre><p>In questo modo il tag del titolo verrà <strong>gestito da WordPress</strong> nel migliore dei modi.</p>
<h3 id="wp_head">wp_head</h3>
<p>Sempre nel nostro header dobbiamo aggiungere l&rsquo;hook <em>wp_head</em>. Questo ci permette di inserire i nostri CSS e JS nell&rsquo;<head> della pagina, come vedremo fra poco.</p>
<p>Aggiungiamo quindi questo codice giusto prima del <em></head></em>:</p>
<pre tabindex="0"><code>&lt;?php wp_head(); ?&gt;
</code></pre><h3 id="body_class">body_class</h3>
<p>Rimaniamo sempre nel nostro header.php e aggiungiamo un hook anche al <body>, in questo modo:</p>
<pre tabindex="0"><code>&lt;body &lt;?php body_class(); ?&gt;&gt;
</code></pre><p>Così WordPress <strong>gestirà al meglio il body</strong> del nostro tema.</p>
<h3 id="wp_footer">wp_footer</h3>
<p>L&rsquo;ultimo hook che andremo ad aggiungere è il <em>wp_footer</em>, che permette di inserire i contenuti prima del <em></body></em>, come i file javascript.</p>
<p>Andiamo quindi nel <em>footer.php</em> e inseriamo questo giusto prima del </body></p>
<pre tabindex="0"><code>&lt;?php wp_footer(); ?&gt;
</code></pre><h2 id="inserire-css-e-js-in-un-tema-wordpress">Inserire CSS e JS in un tema WordPress</h2>
<p>Il <strong>metodo corretto</strong> per inserire dei file CSS e JS all&rsquo;interno di un tema WordPress è un po&rsquo; particolare.</p>
<p>Sebbene funzioni anche in metodo classico di inserimento nell&rsquo;<head> e prima del </body> (metodo che abbiamo utilizzato nella parte 1 di questa serie di tutorial), un tema WordPress ben fatto deve inserire i file CSS e JS attraverso il file <strong><em>functions.php.</em></strong></p>
<h3 id="css">CSS</h3>
<p>Iniziamo ad aprire il nostro file <em>functions.php</em> e inseriamo questo codice per embeddare il nostro file style.css nel tema:</p>
<pre tabindex="0"><code>function risorse_il_mio_tema() {
	//CSS
         enqueue_style(&#39;style&#39;, get_stylesheet_uri());
}
add_action(&#39;wp_enqueue_scripts&#39;, &#39;risorse_il_mio_tema&#39;);
</code></pre><p>In questo modo embedderemo il file <em>style.css</em>, obbligatorio in ogni tema WordPress.</p>
<p>Ora inseriamo il CSS di <strong><a href="/blog/le-basi-di-bootstrap/">Bootstrap</a></strong> in maniera corretta. Lo aggiungiamo a questa funzione, in questo modo:</p>
<pre tabindex="0"><code>wp_enqueue_style( &#39;bootstrap&#39;,&#39;http://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&#39;,&#39;&#39;,&#39;&#39;,&#39;all&#39;);
</code></pre><p>Ricorda di inserire <strong>Bootstrap</strong> come <strong>primo file</strong>, prima di &ldquo;style&rdquo;, per un corretto funzionamento.</p>
<p>Ora andiamo nell&rsquo;header.php e rimuoviavo il CSS di bootstrap, che ora verrà inserito nella maniera corretta tramite functions.php</p>
<h3 id="js">JS</h3>
<p>Inseriamo ora i file <strong>javascript di Bootstrap</strong> nel modo corretto.</p>
<p>Anche i file Javascript vanno inseriti come i CSS, nella stessa funzione, in questo modo:</p>
<pre tabindex="0"><code>//JS
wp_enqueue_script( &#39;jquery-js&#39;, &#39;http://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js&#39;, &#39;&#39;,&#39;&#39; ,true);
wp_enqueue_script( &#39;bootstrap-js&#39;, &#39;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&#39;, &#39;&#39;,&#39;&#39; ,true);
</code></pre><p>Ora possiamo eliminare i file JS di bootstrap dal nostro <strong>footer.php</strong></p>
<p>Per semplicità ti riscrivo <strong>tutta la funzione</strong> di embeddamento di CSS e JS:</p>
<pre tabindex="0"><code>/* CSS e JS */
function risorse_il_mio_tema() {
	//CSS
	wp_enqueue_style( &#39;bootstrap&#39;,&#39;http://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&#39;,&#39;&#39;,&#39;&#39;,&#39;all&#39;);
	wp_enqueue_style(&#39;style&#39;, get_stylesheet_uri());

	//JS
	wp_enqueue_script( &#39;jquery-js&#39;, &#39;http://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js&#39;, &#39;&#39;,&#39;&#39; ,true);
	wp_enqueue_script( &#39;bootstrap-js&#39;, &#39;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&#39;, &#39;&#39;,&#39;&#39; ,true);

}
add_action(&#39;wp_enqueue_scripts&#39;, &#39;risorse_il_mio_tema&#39;);
</code></pre><p><strong>In questo modo hai inserito i codici CSS e JS secondo le Best Practice di WordPress!</strong></p>
<h2 id="paginazione">Paginazione</h2>
<p>Se il nostro tema inizierà ad avere molti articoli, allora la pagina archivio diventerà presto molto pesante.</p>
<p>Fortunatamente WordPress fornisce una funzione per facilitare moltissimo la <strong>paginazione</strong>.</p>
<p>Puoi decidere quanti articoli far visualizzare nelle pagine archivio tramite la sezione &ldquo;<strong>Impostazioni - Lettura</strong>&rdquo;.</p>
<p><img src="images/image-38-1.png" alt=""></p>
<p>Per inserire la paginazione nel frontend andiamo nel nostro <em><strong>archive.php</strong></em> e inseriamo questa funzione <strong>dopo il</strong> <strong>loop</strong>:</p>
<pre tabindex="0"><code>&lt;?php echo paginate_links(); ?&gt;
</code></pre><p>In questo modo <strong>i link di paginazione saranno gestiti interamente da WordPress!</strong></p>
<p>Fantastico vero? Nulla di più semplice! Non ti resta che rendere questi link un po&rsquo; più carini, tramite <strong>CSS</strong>.</p>
<h3 id="commenti">Commenti</h3>
<p>Il sito inizia ad avere senso, ma non abbiamo ancora inserito una sezione commenti! Vediamo come fare!</p>
<p>Iniziamo creando un file <strong><em>comments.php</em></strong> nella cartella del nostro tema.</p>
<p><strong>comments.php</strong></p>
<pre tabindex="0"><code>
&lt;div id=&#34;comments&#34; class=&#34;comments-area&#34;&gt;

    &lt;?php if ( have_comments() ) : ?&gt;
        &lt;h2 class=&#34;comments-title&#34;&gt;
            &lt;?php
                printf( _nx( &#39;Un commento per &#34;%2$s&#34;&#39;, &#39;%1$s Commenti su &#34;%2$s&#34;&#39;, get_comments_number(), &#39;comments title&#39;, &#39;beauty-mountain&#39; ),
                    number_format_i18n( get_comments_number() ), &#39;&lt;span&gt;&#39; . get_the_title() . &#39;&lt;/span&gt;&#39; );
            ?&gt;
        &lt;/h2&gt;

        &lt;ol class=&#34;comment-list&#34;&gt;
            &lt;?php
                wp_list_comments( array(
                    &#39;style&#39;       =&gt; &#39;ol&#39;,
                    &#39;short_ping&#39;  =&gt; true,
                    &#39;avatar_size&#39; =&gt; 74,
                ) );
            ?&gt;
        &lt;/ol&gt;&lt;!-- .comment-list --&gt;

        &lt;?php
            // Ci sono più commenti?
            if ( get_comment_pages_count() &gt; 1 &amp;&amp; get_option( &#39;page_comments&#39; ) ) :
        ?&gt;
        &lt;nav class=&#34;navigation comment-navigation&#34; role=&#34;navigation&#34;&gt;
            &lt;h1 class=&#34;screen-reader-text section-heading&#34;&gt;&lt;?php _e( &#39;Comment navigation&#39;, &#39;beauty-mountain&#39; ); ?&gt;&lt;/h1&gt;
            &lt;div class=&#34;nav-previous&#34;&gt;&lt;?php previous_comments_link( __( &#39;&amp;larr; Older Comments&#39;, &#39;beauty-mountain&#39; ) ); ?&gt;&lt;/div&gt;
            &lt;div class=&#34;nav-next&#34;&gt;&lt;?php next_comments_link( __( &#39;Newer Comments &amp;rarr;&#39;, &#39;beauty-mountain&#39; ) ); ?&gt;&lt;/div&gt;
        &lt;/nav&gt;&lt;!-- .comment-navigation --&gt;
        &lt;?php endif; ?&gt;

        &lt;?php if ( ! comments_open() &amp;&amp; get_comments_number() ) : ?&gt;
        &lt;p class=&#34;no-comments&#34;&gt;&lt;?php _e( &#39;Comments are closed.&#39; , &#39;beauty-mountain&#39; ); ?&gt;&lt;/p&gt;
        &lt;?php endif; ?&gt;

    &lt;?php endif; // have_comments() ?&gt;

    &lt;?php comment_form(); ?&gt;

&lt;/div&gt;&lt;!-- #comments --&gt;
</code></pre><p>Questo codice ti pemetterà di inserire i commenti, ora andiamo nel file <strong><em>single.php,</em></strong> quello che contiene i nostri articoli, e inseriamo il template per i commenti dopo il contenuto:</p>
<pre tabindex="0"><code>&lt;!-- COMMENTI --&gt;
&lt;?php comments_template(); ?&gt;
</code></pre><p>In questo modo potrai <strong>vedere i commenti sui tuoi articoli!</strong></p>
<p><strong>Perfetto!</strong> Direi che per iniziare abbiamo già creato qualcosa di carino!</p>
<p>Prima di lasciarti andare via ti condivido ancora <strong>un po&rsquo; di CSS</strong> per rendere il nostro lavoro un po&rsquo; più carino.</p>
<p>Ricorda che puoi <strong>scaricare l&rsquo;intero tema</strong>, per controllare errori e verificare di aver capito tutto al meglio! Clicca <strong>sul bottone sul fondo</strong> dell&rsquo;articolo per scaricare il tema!</p>
<p>Non è un tema perfetto ma può essere un buon <strong>starter theme</strong> per i tuoi progetti futuri!</p>
<p><strong>style.css</strong></p>
<pre tabindex="0"><code>/*
Theme Name: Il mio tema
Author: Specialista WP
Description: Il mio primo tema WordPress
Version: 0.0.1
*/

/*
 * Globals
 */

a:hover{
  text-decoration: none;
}

img{
  max-width: 100%;
  height:auto
}

footer{
  background-color: #888;
  margin-top: 50px;
  padding-top: 50px;
  color:#000;
  margin-bottom: 0;
  padding-bottom: 50px;
}
</code></pre><p><em><a href="/blog/le-basi-dellhtml/">&laquo; Parte 2</a></em></p>
<p><em><a href="/blog/creare-un-plugin-wordpress/">Creare Plugin &raquo;</a></em></p>
]]></content>
		</item>

		<item>
			<title>4. Creare un plugin WordPress</title>
			<link>https://albertoreineri.it/blog/4.-creare-un-plugin-wordpress/</link>
			<pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/4.-creare-un-plugin-wordpress/</guid>
			<description>Hai imparato a creare un tema WordPress da zero e vuoi impratichirti anche con i plugin?
Sei nel posto giusto!
Creare un plugin per WordPress può essere una cosa semplicissima e molto veloce come complicatissima e molto lenta…
In questa guida vediamo semplicemente come creare un plugin per WordPress funzionante.
Creeremo un plugin che aggiunge il back on top del sito. Andremo a inserire una freccia verso l’alto nell’angolo in basso a destra della pagina.</description>
			<content type="html"><![CDATA[<p>Hai imparato a <strong><a href="/blog/creare-un-tema-wordpress-da-zero-parte-1/">creare un tema WordPress da zero</a></strong> e vuoi impratichirti anche con i <strong>plugin</strong>?</p>
<p>Sei nel posto giusto!</p>
<p>Creare un plugin per WordPress può essere una cosa semplicissima e molto veloce come complicatissima e molto lenta…</p>
<p>In questa guida vediamo semplicemente come <strong>creare un plugin per WordPress funzionante.</strong></p>
<p>Creeremo un plugin che aggiunge il <strong>back on top</strong> del sito. Andremo a inserire una freccia verso l’alto nell’angolo in basso a destra della pagina. Cliccando su questa freccia avvieremo uno smooth scroll verso il top della pagina!</p>
<h2 id="creare-il-plugin">CREARE IL PLUGIN</h2>
<p>Creare un nuovo plugin <strong>non è difficile.</strong></p>
<p>Per prima cosa rechiamoci nella <strong>cartella dei plugin</strong> di WordPress: <em>/wp-content/pluigns.</em></p>
<p>Ora qui dentro <strong>creiamo una nuova cartella</strong> con il nome “<strong>back-on-top</strong>” e apriamo la cartella con <strong>VS Code</strong>.</p>
<p>Creiamo adesso un <strong>file</strong> in questa cartella chiamato “<em><strong>back-on-top.php</strong></em>” e inseriamo questo codice al suo interno:</p>
<pre tabindex="0"><code>&lt;?php

/**
 * Plugin Name: Back on top
 * Plugin URI: /
 * Description: Un semplice link al top della pagina
 * Version: 1
 * author: Alberto Reineri DEV
 * Author URI: http://albydev.net
 * Text Domain: back-on-top
 */
</code></pre><p>Questo codice <strong>indicherà a WordPress l’esistenza del plugin.</strong></p>
<p>Se salviamo e andiamo nel backend in “<strong>Plugins</strong>” vedremo apparire “<strong>Back on top</strong>” nell’elenco. Possiamo quindi <strong>attivarlo</strong>.</p>
<p><img src="images/image-41-1024x48-1.png" alt=""></p>
<p>Il plugin al momento <strong>non fa assolutamente nulla</strong>, ma l’abbiamo creato.</p>
<p>Vediamo ora come aggiungere una funzionalità al plugin.</p>
<h2 id="aggiungere-funzionalità-al-plugin">AGGIUNGERE FUNZIONALITÀ AL PLUGIN</h2>
<p>Per poter aggiungere una funzionalità al nostro plugin occorre <strong>agganciarsi ai vari hook di WordPress</strong>. Nel nostro caso dobbiamo inserire una freccia in fondo alla pagina, quindi ci attaccheremo al footer.</p>
<p>Possiamo considerare il file back-on-top.php come un’<strong>estensione del functions.php</strong>. Ogni funzione che agguingiamo nel plugni verrà aggiunta al tema corrente.</p>
<h3 id="inseriamo-il-contenuto-nel-footer">INSERIAMO IL CONTENUTO NEL FOOTER</h3>
<pre tabindex="0"><code>add_action(&#39;wp_footer&#39;, &#39;back_on_top&#39;);
function back_on_top()
{
    ob_start();
?&gt;
    &lt;div class=&#34;back-on-top&#34; onclick=&#34;scrollToTop()&#34;&gt;
        &lt;?php
        echo file_get_contents(plugin_dir_url(__FILE__) . &#34;up.svg&#34;);
        ?&gt;
    &lt;/div&gt;
&lt;?php
    $output = ob_get_contents();
    ob_end_clean();
    echo $output;
}
</code></pre><p>In questo modo abbiamo inserito sul fondo della nostra pagina <strong>l’immagine up.svg</strong> presente nella cartella del plugin.</p>
<p><strong>Puoi inserire l’immagine che preferisci</strong>. Se inserisci un jpg o un png al posto di un svg puoi usare semplicemente il tag <img src=…>.</p>
<p><strong><em>on_start</em></strong> è una funzione che permette di inserire codice html e considerarlo come una <strong>variabile php.</strong></p>
<p>Ora aggiungiamo un po’ di <strong>CSS</strong> per rendere sensata la grafica. Per semplificare inseriamo il CSS direttamente nel file php, giusto sopra il div “<strong>back-on-top</strong>“:</p>
<pre tabindex="0"><code>&lt;style&gt;
        .back-on-top {
            position: fixed;
            z-index: 99999;
            bottom: 30px;
            right: 30px;
            cursor: pointer
        }

        .back-on-top svg {
            width: 30px;
            height: 30px;
            fill: #444;
            transition: .3s;
        }

        .back-on-top svg:hover {
            fill: lightblue;
        }
    &lt;/style&gt;
</code></pre><p>Adesso non ci resta che inserire un po’ di <strong>Javascript</strong> per effettuare lo smooth scroll al top della pagina. Questo può essere fatto in molti modi, da vanilla Javascript a JQuery.</p>
<p>Per rendere le cose minimali inseriamo del <strong>vanilla Javascript</strong> dopo il div “<strong>back-on-top</strong>“:</p>
<pre tabindex="0"><code>&lt;script&gt;
        // Smooth scroll to top
        const scrollToTop = () =&gt; {
            const c = document.documentElement.scrollTop || document.body.scrollTop;
            if (c &gt; 0) {
                window.requestAnimationFrame(scrollToTop);
                window.scrollTo(0, c - c / 8);
            }
        };
        scrollToTop();
    &lt;/script&gt;
</code></pre><p><strong><em>E voilà!</em></strong></p>
<p><strong>Il plugin è bello che pronto.</strong> Puoi salvare e se tutto è andato a buon fine dovresti vedere una freccia verso l’alto nell’angolo in basso a destra del sito. Cliccando sulla freccia dovresti tornare al top della pagina.</p>
<p><img src="images/image-39-1.png" alt=""></p>
<p><strong><em>Complimenti! Hai appena creato il tuo primo plugin!!!</em></strong></p>
<pre tabindex="0"><code>&lt;?php

/**
 * Plugin Name: Back on top
 * Plugin URI: /
 * Description: Un semplice link al top della pagina
 * Version: 1
 * author: Alberto Reineri DEV
 * Author URI: http://albydev.net
 * Text Domain: back-on-top
 */

add_action(&#39;wp_footer&#39;, &#39;back_on_top&#39;);
function back_on_top()
{
    ob_start();
?&gt;
    &lt;style&gt;
        .back-on-top {
            position: fixed;
            z-index: 99999;
            bottom: 30px;
            right: 30px;
            cursor: pointer
        }

        .back-on-top svg {
            width: 30px;
            height: 30px;
            fill: #444;
            transition: .3s;
        }

        .back-on-top svg:hover {
            fill: lightblue;
        }
    &lt;/style&gt;
    &lt;div class=&#34;back-on-top&#34; onclick=&#34;scrollToTop()&#34;&gt;
        &lt;?php
        echo file_get_contents(plugin_dir_url(__FILE__) . &#34;up.svg&#34;);
        ?&gt;
    &lt;/div&gt;

    &lt;script&gt;
        // Smooth scroll to top
        const scrollToTop = () =&gt; {
            const c = document.documentElement.scrollTop || document.body.scrollTop;
            if (c &gt; 0) {
                window.requestAnimationFrame(scrollToTop);
                window.scrollTo(0, c - c / 8);
            }
        };
        scrollToTop();
    &lt;/script&gt;
&lt;?php
    $output = ob_get_contents();
    ob_end_clean();
    echo $output;
}
</code></pre><p><em><a href="/blog/creare-un-tema-wordpress-da-zero-parte-3/">&laquo; Parte 3</a></em><a href=".local/assistenza/"></a></p>
]]></content>
		</item>

		<item>
			<title>Come aggiungere uno shortcode in WordPress?</title>
			<link>https://albertoreineri.it/blog/come-aggiungere-uno-shortcode-in-wordpress/</link>
			<pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/come-aggiungere-uno-shortcode-in-wordpress/</guid>
			<description>Gli shortcode sono un modo semplice per aggiungere contenuti dinamici nei post, nelle pagine e nelle barre laterali di WordPress.
Molti plugin e temi WordPress utilizzano shortcode per aggiungere contenuti particolari come moduli di contatto, gallerie di immagini, cursori e altro.
In questo articolo, ti mostreremo come aggiungere facilmente uno shortcode in WordPress. Ti mostreremo anche come creare i tuoi shortcode personalizzati in WordPress.
COSA SONO GLI SHORTCODE? Gli shortcode in ​​WordPress sono stringhe che ti aiutano ad aggiungere contenuti dinamici nei post, nelle pagine e nei widget della sidebar di WordPress.</description>
			<content type="html"><![CDATA[<p>Gli shortcode sono un modo semplice per <strong>aggiungere contenuti dinamici</strong> nei post, nelle pagine e nelle barre laterali di WordPress.</p>
<p>Molti <strong>plugin e temi WordPress utilizzano shortcode</strong> per aggiungere contenuti particolari come moduli di contatto, gallerie di immagini, cursori e altro.</p>
<p>In questo articolo, ti mostreremo come <strong>aggiungere facilmente uno shortcode in WordPress</strong>. Ti mostreremo anche come creare i tuoi shortcode personalizzati in WordPress.</p>
<h2 id="cosa-sono-gli-shortcode">COSA SONO GLI SHORTCODE?</h2>
<p>Gli shortcode in ​​WordPress sono stringhe che ti aiutano ad aggiungere contenuti dinamici nei post, nelle pagine e nei widget della sidebar di WordPress. Sono visualizzati <strong>tra parentesi quadre</strong> quadre in questo modo:</p>
<p><em>[shortcode]</em></p>
<p>Per comprendere meglio gli shortcode, diamo un’occhiata al motivo per cui sono stati inseriti.</p>
<p>WordPress filtra tutto il contenuto per assicurarsi che nessuno utilizzi post e contenuto della pagina per inserire <strong>codice dannoso</strong> nel database . Ciò significa che <strong>puoi scrivere HTML di base nei tuoi post, ma non puoi scrivere codice PHP.</strong></p>
<p>E se volessi eseguire un codice personalizzato all’interno dei tuoi post per visualizzare post correlati, banner pubblicitari, moduli di contatto, gallerie, ecc.?</p>
<p>Qui entra in gioco <strong>l’API Shortcode.</strong></p>
<p>Fondamentalmente, <strong>consente agli sviluppatori di aggiungere il loro codice all’interno di una funzione</strong> e quindi di registrarla con WordPress come shortcode, in modo che gli utenti possano usarlo facilmente senza avere alcuna conoscenza di sviluppo web.</p>
<p>Quando WordPress trova lo shortcode, eseguirà automaticamente il codice ad esso associato.</p>
<p>Vediamo <strong>come aggiungere facilmente</strong> shortcode nei post e nelle pagine di WordPress.</p>
<h2 id="aggiunta-di-uno-shortcode-nei-post-e-nelle-pagine-di-wordpress">AGGIUNTA DI UNO SHORTCODE NEI POST E NELLE PAGINE DI WORDPRESS</h2>
<p>Innanzitutto, è necessario <strong>modificare il post e la pagina in cui si desidera aggiungere lo shortcode</strong>. Successivamente, è necessario fare clic sul pulsante <strong>Aggiungi blocco</strong> per inserire un blocco <em>shortcode</em>.</p>
<p><img src="images/shortcode-1024x513.gif" alt=""></p>
<p>Dopo aver aggiunto il blocco <em>shortcode</em>, puoi semplicemente inserire il tuo shortcode nelle impostazioni del blocco. Lo shortcode sarà fornito da vari plugin di WordPress che potresti utilizzare.</p>
<p>Ora puoi salvare il tuo post o la pagina e visualizzare in anteprima le modifiche <strong>per vedere lo shortcode in azione.</strong></p>
<h2 id="aggiunta-di-uno-shortcode-nei-widget-della-sidebar-di-wordpress">AGGIUNTA DI UNO SHORTCODE NEI WIDGET DELLA SIDEBAR DI WORDPRESS</h2>
<p>Puoi anche usare gli shortcode nei widget della sidebar di WordPress . Basta visitare la pagina <strong>Aspetto »Widget</strong> e aggiungere il widget “Testo” a una sidebar.</p>
<p>Ora puoi <strong>incollare il tuo shortcode</strong> nell’area di testo del widget.</p>
<p><img src="images/image-33-1-1024x438.png" alt=""></p>
<p>Non dimenticare di fare clic sul pulsante “<strong>Salva</strong>” per memorizzare le impostazioni del widget.</p>
<p>Successivamente, puoi visitare il tuo sito Web WordPress per vedere <strong>l’anteprima dal vivo</strong> dello shortcode nel widget della barra laterale.</p>
<h2 id="aggiunta-di-uno-shortcode-nel-vecchio-editor-classico-di-wordpress">AGGIUNTA DI UNO SHORTCODE NEL VECCHIO EDITOR CLASSICO DI WORDPRESS</h2>
<p>Se stai ancora utilizzando il vecchio <strong>editor classico</strong> in WordPress, ecco come aggiungere codici brevi ai tuoi post e alle tue pagine WordPress.</p>
<p>Modifica semplicemente il post e la pagina in cui desideri aggiungere lo shortcode. È possibile <strong>incollare lo shortcode</strong> in qualsiasi punto all’interno dell’editor dei contenuti nel punto in cui si desidera che venga visualizzato. Assicurati solo che lo shortcode sia nella sua stessa riga.</p>
<p><img src="images/image-34-3-1024x316.png" alt=""></p>
<p>Non dimenticare di <strong>salvare</strong> le modifiche. Successivamente puoi visualizzare l’anteprima del tuo post e della pagina per vedere lo shortcode in azione.</p>
<h2 id="come-aggiungere-un-shortcode-nel-tema-wordpress">COME AGGIUNGERE UN SHORTCODE NEL TEMA WORDPRESS</h2>
<p>Gli shortcode sono pensati per essere utilizzati all’interno di post, pagine e widget di WordPress. Tuttavia, a volte potresti voler <strong>usare un shortcode all’interno di un tema</strong> di WordPress.</p>
<p>Fondamentalmente, puoi aggiungere uno shortcode a qualsiasi file del tuo tema WordPress semplicemente aggiungendo il seguente codice.</p>
<pre tabindex="0"><code>&lt;?php echo do_shortcode(&#34;[shortcode]&#34;); ?&gt;
</code></pre><p>WordPress cercherà lo shortcode e visualizzerà il suo output nel file del tema.</p>
<h2 id="come-creare-il-tuo-shortcode-personalizzato-in-wordpress">COME CREARE IL TUO SHORTCODE PERSONALIZZATO IN WORDPRESS</h2>
<p>Gli shortcode possono essere davvero utili quando si desidera <strong>aggiungere contenuto dinamico o codice personalizzato</strong> all’interno del post e delle pagine di WordPress. Tuttavia, se vuoi <strong>creare un tuo shortcode personalizzato</strong>, dovrai scrivere un po’ di codice.</p>
<p>Se hai dimestichezza con la scrittura di codice PHP, ecco un esempio che puoi utilizzare come modello:</p>
<pre tabindex="0"><code>// Funzione che viene eseguita quando è richiamato lo shortcode
function my_shortcode() {
    $messaggio = &#39;Ciao mondo!&#39;;  // Output
    return $messaggio;
}
// Registro lo shortcode
add_shortcode(&#39;saluto&#39;, &#39;my_shortcode&#39;); // Lo shortcode sarà [saluto]
</code></pre><p>Con questo codice abbiamo prima creato una funzione che esegue del codice e restituisce l’output. Successivamente, abbiamo creato un nuovo shortcode chiamato ‘saluto’ e abbiamo detto a WordPress di eseguire la funzione che abbiamo creato.</p>
<p>Ora puoi <strong>usare aggiungi questo shortcode ai tuoi post</strong>, pagine e widget usando il seguente codice:</p>
<p><em>[saluto]</em></p>
<p>Questo eseguirà la funzione creata e mostrerà l’output desiderato.</p>
<h2 id="shortcode-o-blocchi-di-gutenberg">SHORTCODE O BLOCCHI DI GUTENBERG?</h2>
<p>Gli utenti ci chiedono spesso le differenze tra shortcode e nuovi blocchi di Gutenberg.</p>
<p>Fondamentalmente se trovi utili gli shortcode, adorerai i blocchi dell’editor di WordPress. I blocchi ti consentono di fare la stessa cosa ma <strong>in modo più intuitivo.</strong></p>
<p>Invece di richiedere agli utenti di aggiungere uno shortcode per visualizzare contenuti dinamici, i blocchi consentono agli utenti di aggiungere contenuti dinamici all’interno di post / pagine con <strong>un’interfaccia utente più intuitiva</strong>. Molti plugin WordPress popolari stanno passando all’uso dei blocchi <strong>Gutenberg</strong> anziché degli shortcode perché sono <strong>più adatti ai principianti.</strong></p>
<p>Speriamo che questo articolo ti abbia aiutato a imparare come aggiungere uno shortcode in WordPress.</p>
]]></content>
		</item>

		<item>
			<title>Rimuovere Virus da WordPress</title>
			<link>https://albertoreineri.it/blog/rimuovere-virus-da-wordpress/</link>
			<pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>

			<guid>https://albertoreineri.it/blog/rimuovere-virus-da-wordpress/</guid>
			<description>WordPress è una delle piattaforme più utilizzate la mondo per la creazione di siti web ma a volte può essere facile imbattersi in un virus, ma come si possono rimuovere?
WordPRess permette a chiunque di tirar su un sito internet funzionante in pochissimo tempo e con costi molto bassi.
Questo però significa anche avere moltissimi siti web creati da estranei ai lavori che installato temi e plugin a caso senza sapere realmente cosa stanno facendo… Finché il sito è piccolino e con un numero esigui di utenti non c’è problema, quando invece raggiunge una audience più alta allora la probabilità di essere bersagliati da qualche hacker diventa elevata.</description>
			<content type="html"><![CDATA[<p>WordPress è una delle piattaforme <strong>più utilizzate la mondo</strong> per la <strong>creazione di siti web ma a volte può essere facile imbattersi in un virus, ma come si possono rimuovere?</strong></p>
<p>WordPRess permette a chiunque di <strong>tirar su un sito internet</strong> funzionante <strong>in pochissimo tempo</strong> e con <strong>costi molto bassi.</strong></p>
<p>Questo però significa anche avere <strong>moltissimi siti web creati da estranei ai lavori</strong> che installato temi e plugin <em>a caso</em> senza sapere realmente cosa stanno facendo… Finché il sito è piccolino e con un numero esigui di utenti non c’è problema, quando invece raggiunge una audience più alta allora <strong>la probabilità di essere bersagliati da qualche hacker diventa elevata.</strong></p>
<p>Si stima che almeno <strong>il 30% dei siti web in WordPress abbia delle vulnerabilità.</strong> Se pensiamo che <strong>più di 75 milioni di siti web utilizzano questa piattaforma</strong> allora le vulnerabilità sono moltissime.</p>
<p>Vedremo ora come <strong>mantenere al sicuro il proprio sito WordPress e come eliminare eventuali virus.</strong></p>
<h2 id="mettere-in-sicurezza-wordpress">Mettere in sicurezza WordPress</h2>
<p>WordPress utilizza un sistema molto intelligente di <strong>temi e plugin</strong>, ma occorre <strong>fare attenzione a ciò che si installa.</strong></p>
<p>Esistono alcune <strong>regole fondamentali:</strong></p>
<ul>
<li><strong>Controllo sulla provenienza di temi e plugin</strong></li>
<li><strong>Installare il minor numero di plugin possibili</strong></li>
<li><strong>Avere un buon hosting</strong></li>
</ul>
<h3 id="1-controllo-sulla-provenienza-di-temi-e-plugin">1. Controllo sulla provenienza di temi e plugin</h3>
<p>Ogni volta che si installa qualcosa su un sito in WordPress si va ad inserire del codice sul proprio progetto. Questo codice se ben scritto porterà funzionalità utili e migliorerà il sito, se invece è scritto male o contiene <strong>bug</strong> può causare molti problemi.</p>
<p>Quando si installa qualcosa su WordPress bisogna fare <strong>molta molta attenzione alla fonte.</strong></p>
<p><strong>MAI</strong> installare plugin o temi scaricati da <strong>fonti non chiare.</strong></p>
<p>La cosa migliore è attenersi alla <strong>repository ufficiale di WordPress</strong> oppure ai grandi store garantiti.</p>
<h3 id="2-installare-il-minor-numero-di-plugin-possibili">2. Installare il minor numero di plugin possibili</h3>
<p>Esistono plugin per ogni cosa ormai, ma <strong>ogni plugin è un oggetto in più da gestire e mantenere.</strong></p>
<p>Avere plugin specifici per funzionalità pressoché inutili rischia di portarci <strong>falle nel sistema</strong>, oltre che appesantire inutilmente il sito.</p>
<p>Installare 20 plugin gestiti da sviluppatori diversi aumenta notevolmente il rischio di attacchi. Se uno di questi sviluppatori non corregge un bug oppure viene scoperta una falla, allora è a rischio l’intero sito.</p>
<p><strong><em>Il trucco è questo: “Pochi ma buoni”.</em></strong></p>
<h3 id="3-avere-un-buon-hosting">3. Avere un buon hosting</h3>
<p>Parliamo di hosting e non di server perché la stragrande maggioranza dei siti web è ospitata su hosting condiviso.</p>
<p>Questi servizi sono <strong>migliorati moltissimo</strong> e offrono servizi che in passato erano disponibili solamente sui server dedicati, come accessi <strong>SSH</strong>, <strong>cache</strong> e <strong>sicurezza</strong>.</p>
<p>Poter contare su un buon servizio è molto importante per <strong>proteggersi dagli attacchi e gestirli</strong> nel malaugurato caso in cui si venga infettati.</p>
<h2 id="rimuovere-un-virus-da-un-sito-wordpress">Rimuovere un virus da un sito WordPress</h2>
<p><strong>Non c’è un modo unico per rimuovere un virus,</strong> perché questi agiscono in maniera molto diversa gli uni dagli altri.</p>
<p>Questo complica un pochino le cose… È difficile quindi spiegare come rimuovere un virus in un semplice articolo, ma cercherò di <strong>indicare alcune vie per gestire il problema</strong></p>
<h3 id="1-cercare-backup-precedenti-allattacco">1. Cercare backup precedenti all’attacco</h3>
<p>Se avete un buon hosting sicuramente avrete anche dei <strong>backup giornalieri o almeno settimanali</strong>. La prima cosa da fare è scaricarsi uno si questi backup e tenerlo da parte, per <strong>avere una situazione “</strong><em><strong>pre-virus</strong></em><strong>“.</strong></p>
<p>Se il sito è <strong>statico</strong>, senza sezioni aggiornabili come blog o portfolio allora si può semplicemente ripristinare il backup alla versione pre-attacco e il gioco è fatto.</p>
<p>Se invece il sito ha subito <strong>aggiornamenti</strong> che non si vogliono perdere allora conviene tenersi una copia pre-virus per sicurezza e andare a cercare i file infetti.</p>
<h3 id="2-scansionare-sito-web-con-tool-online">2. Scansionare sito web con tool online</h3>
<p>Esistono molti tool online in grado di analizzare il sito e individuare le criticità.</p>
<p>Si possono anche utilizzare alcuni plugin sviluppati per gestire la sicurezza, come <strong>WordFence</strong> o <strong>Sucuri</strong> e utilizzare il loro scan per analizzare tutti i file sul sito.</p>
<p>Questi non garantiscono un risultato ottimale al 100%, ma è comunque un buon punto di partenza.</p>
<p>Ecco una serie di link utili per effettuare le scansioni:</p>
<ul>
<li><a href="https://wpsec.com/">https://wpsec.com/</a></li>
<li><a href="https://sitecheck.sucuri.net/%E2%80%A8">https://sitecheck.sucuri.net/</a></li>
<li><a href="https://hackertarget.com/wordpress-security-scan/%E2%80%A8">https://hackertarget.com/wordpress-security-scan/</a></li>
<li><a href="https://wprecon.com/%E2%80%A8">https://wprecon.com/</a></li>
<li><a href="https://firstsiteguide.com/tools/free-fsg/wordpress-security-online-scanner/">https://firstsiteguide.com/tools/free-fsg/wordpress-security-online-scanner/</a></li>
</ul>
<p>Se ve la cavate con la CLI potete anche utilizzare <a href="https://wpscan.org/">WP Scan</a>, il software per eccellenza per testare la sicurezza di un sito in WordPress.</p>
<h3 id="disattivare-temi-e-plugin">Disattivare Temi e Plugin</h3>
<p>Per cercare di <strong>isolare</strong> il <strong>virus</strong> può essere utile procedere con la <strong>disattivazione</strong> di temi a plugin.</p>
<p>Se il sito senza plugin e con il tema di default di WordPress funziona allora si possono riattivare uno ad uno e capire dove si trova l’infezione.</p>
<h3 id="copiare-i-file-originali-di-temi-e-plugin">Copiare i file originali di temi e plugin</h3>
<p><strong>ATTENZIONE!!!</strong> Fai molta attenzione nel mettere in pratica questo punto, se non sei esperto potresti fare più danni di quelli già presenti!Se un tema o un plugin è stato infettato una soluzione per rimuovere il virus dal sito WordPress è quella di <strong>sovrascrivere le cartelle contenenti il tema e i plugin</strong> con le versioni scaricate dalle fonti ufficiali.</p>
<p>In questo caso se il virus era presente nella cartella verrà sovrascritto.</p>
<h3 id="analizzare-struttura-wordpress">Analizzare struttura WordPress</h3>
<p>In ultima battuta si può <strong>analizzare la struttura di file e cartelle di WordPress</strong> per controllare che non ci siano file strani, non presenti nell’installazione originale.</p>
<p>Se si trovano file <strong>strani</strong> allora bisogna cancellarli, sempre prestando molta attenzione a ciò che si sta facendo.</p>
<h2 id="conclusione"><strong>Conclusione</strong></h2>
<p>Questi sono alcuni passaggi <strong>generici</strong> da effettuare per controllare lo stato di un sito web.</p>
<p>Purtroppo <strong>ogni virus è differente</strong>, alcuni agiscono sul database, altri direttaemnte nei file di sistema, altri ancora in modi che non ci immaginiamo nemmeno.</p>
<p>In questo articolo ho provato a darti <strong>alcuni consigli di base</strong> da mettere in pratica per provare a rimuovere un virus da un <strong>sito in WordPress.</strong></p>
<p>Se nessuno di questi ha funzionato ti consiglio di <strong>rivolgerti ad un professionista.</strong></p>
<p>Se <strong>hai un sito web hackerato e vuoi una consulenza o un intervento professionale</strong> volto alla rimozione e alla messa in sicurezza del suo sito contattami tramite la pagina <a href="/contatti">contatti</a></p>
]]></content>
		</item>

	</channel>
</rss>
